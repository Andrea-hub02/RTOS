
F767ZI_NBTLength.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a0  080038a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08003918  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003918  00020160  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be18  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018f5  00000000  00000000  0002beb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000278c8  00000000  00000000  0002eea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e73  00000000  00000000  00056770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9b6f  00000000  00000000  0005f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  001591d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003814 	.word	0x08003814

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003814 	.word	0x08003814

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fa9e 	bl	8000b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f847 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f925 	bl	800083c <MX_GPIO_Init>
  MX_TIM6_Init();
 80005f2:	f000 f8bd 	bl	8000770 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f8f1 	bl	80007dc <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  // 3. You must start
  HAL_TIM_Base_Start(&htim6);
 80005fa:	481c      	ldr	r0, [pc, #112]	; (800066c <main+0x8c>)
 80005fc:	f001 fe8e 	bl	800231c <HAL_TIM_Base_Start>
  // 4. Prepare a string and send it to UART
  buffer_len = sprintf( buffer, "Measuring time test\r\n");
 8000600:	463b      	mov	r3, r7
 8000602:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <main+0x90>)
 8000604:	461c      	mov	r4, r3
 8000606:	4615      	mov	r5, r2
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000610:	6020      	str	r0, [r4, #0]
 8000612:	3404      	adds	r4, #4
 8000614:	8021      	strh	r1, [r4, #0]
 8000616:	2315      	movs	r3, #21
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart3, (uint8_t *) buffer, buffer_len, 100);
 800061a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800061c:	b29a      	uxth	r2, r3
 800061e:	4639      	mov	r1, r7
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <main+0x94>)
 8000624:	f002 f820 	bl	8002668 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Read the first timestamp (counter register)
	          timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <main+0x8c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	867b      	strh	r3, [r7, #50]	; 0x32

	          // Do some work
	          HAL_Delay(50);
 8000630:	2032      	movs	r0, #50	; 0x32
 8000632:	f000 fad5 	bl	8000be0 <HAL_Delay>

	          // Read the second timestamp and computer the counter difference
	          timer_val = __HAL_TIM_GET_COUNTER(&htim6) - timer_val;
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <main+0x8c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063c:	b29a      	uxth	r2, r3
 800063e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	867b      	strh	r3, [r7, #50]	; 0x32

	          // Transform an unsigned int value to a string
	          buffer_len = sprintf(buffer,"%u us\r\n", timer_val);
 8000644:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000646:	463b      	mov	r3, r7
 8000648:	490b      	ldr	r1, [pc, #44]	; (8000678 <main+0x98>)
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fcdc 	bl	8003008 <siprintf>
 8000650:	6378      	str	r0, [r7, #52]	; 0x34

	          // Send data to UART3
	          HAL_UART_Transmit(&huart3, (uint8_t *) buffer, buffer_len, 100);
 8000652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000654:	b29a      	uxth	r2, r3
 8000656:	4639      	mov	r1, r7
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <main+0x94>)
 800065c:	f002 f804 	bl	8002668 <HAL_UART_Transmit>

	          // Wait half a second before next measurement
	          HAL_Delay(1000);
 8000660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000664:	f000 fabc 	bl	8000be0 <HAL_Delay>
	          timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8000668:	e7de      	b.n	8000628 <main+0x48>
 800066a:	bf00      	nop
 800066c:	20000118 	.word	0x20000118
 8000670:	0800382c 	.word	0x0800382c
 8000674:	20000098 	.word	0x20000098
 8000678:	08003844 	.word	0x08003844

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0b8      	sub	sp, #224	; 0xe0
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fcb4 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2290      	movs	r2, #144	; 0x90
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fca5 	bl	8002ff8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <SystemClock_Config+0xec>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <SystemClock_Config+0xec>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <SystemClock_Config+0xec>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xf0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ce:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xf0>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xf0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fd3a 	bl	8001178 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800070a:	f000 f8e1 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f000 ffce 	bl	80016d4 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073e:	f000 f8c7 	bl	80008d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000748:	2300      	movs	r3, #0
 800074a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f991 	bl	8001a78 <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800075c:	f000 f8b8 	bl	80008d0 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	37e0      	adds	r7, #224	; 0xe0
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_TIM6_Init+0x64>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_TIM6_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_TIM6_Init+0x64>)
 8000788:	220f      	movs	r2, #15
 800078a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_TIM6_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_TIM6_Init+0x64>)
 8000794:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000798:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_TIM6_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM6_Init+0x64>)
 80007a2:	f001 fd8f 	bl	80022c4 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007ac:	f000 f890 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_TIM6_Init+0x64>)
 80007be:	f001 fe77 	bl	80024b0 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 f882 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000118 	.word	0x20000118
 80007d8:	40001000 	.word	0x40001000

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_USART3_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000820:	f001 fed4 	bl	80025cc <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 f851 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000098 	.word	0x20000098
 8000838:	40004800 	.word	0x40004800

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x8c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_GPIO_Init+0x8c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IGreen_Pin|IBlue_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2181      	movs	r1, #129	; 0x81
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0x90>)
 80008a0:	f000 fc50 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IGreen_Pin IBlue_Pin */
  GPIO_InitStruct.Pin = IGreen_Pin|IBlue_Pin;
 80008a4:	2381      	movs	r3, #129	; 0x81
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0x90>)
 80008bc:	f000 fa98 	bl	8000df0 <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020400 	.word	0x40020400

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <Error_Handler+0x6>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_TIM_Base_MspInit+0x38>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40001000 	.word	0x40001000
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_UART_MspInit+0x7c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d128      	bne.n	80009d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0x80>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0x80>)
 8000988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x80>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0x80>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c4:	2307      	movs	r3, #7
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_UART_MspInit+0x84>)
 80009d0:	f000 fa0e 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004800 	.word	0x40004800
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020c00 	.word	0x40020c00

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8b4 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f002 fa9a 	bl	8002fa4 <__errno>
 8000a70:	4602      	mov	r2, r0
 8000a72:	230c      	movs	r3, #12
 8000a74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20080000 	.word	0x20080000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	20000160 	.word	0x20000160

08000aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <SystemInit+0x28>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <SystemInit+0x28>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SystemInit+0x28>)
 8000abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ada:	e003      	b.n	8000ae4 <LoopCopyDataInit>

08000adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ae2:	3104      	adds	r1, #4

08000ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aec:	d3f6      	bcc.n	8000adc <CopyDataInit>
  ldr  r2, =_sbss
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000af0:	e002      	b.n	8000af8 <LoopFillZerobss>

08000af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000af4:	f842 3b04 	str.w	r3, [r2], #4

08000af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000afc:	d3f9      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000afe:	f7ff ffd3 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f002 fa55 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fd6b 	bl	80005e0 <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000b10:	080038a8 	.word	0x080038a8
  ldr  r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b1c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b20:	20000160 	.word	0x20000160

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>

08000b26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f000 f92c 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f000 f805 	bl	8000b40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b36:	f7ff fecf 	bl	80008d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f939 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f90f 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000158 	.word	0x20000158

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000158 	.word	0x20000158

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_Delay+0x40>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <__NVIC_SetPriorityGrouping+0x40>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x40>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	05fa0000 	.word	0x05fa0000

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff47 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff5c 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffb0 	bl	8000d44 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e175      	b.n	80010fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8164 	bne.w	80010f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d00b      	beq.n	8000e4e <HAL_GPIO_Init+0x5e>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e42:	2b11      	cmp	r3, #17
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x100>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80be 	beq.w	80010f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b65      	ldr	r3, [pc, #404]	; (8001110 <HAL_GPIO_Init+0x320>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a64      	ldr	r2, [pc, #400]	; (8001110 <HAL_GPIO_Init+0x320>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b62      	ldr	r3, [pc, #392]	; (8001110 <HAL_GPIO_Init+0x320>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f92:	4a60      	ldr	r2, [pc, #384]	; (8001114 <HAL_GPIO_Init+0x324>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a57      	ldr	r2, [pc, #348]	; (8001118 <HAL_GPIO_Init+0x328>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d037      	beq.n	800102e <HAL_GPIO_Init+0x23e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a56      	ldr	r2, [pc, #344]	; (800111c <HAL_GPIO_Init+0x32c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d031      	beq.n	800102a <HAL_GPIO_Init+0x23a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a55      	ldr	r2, [pc, #340]	; (8001120 <HAL_GPIO_Init+0x330>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d02b      	beq.n	8001026 <HAL_GPIO_Init+0x236>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a54      	ldr	r2, [pc, #336]	; (8001124 <HAL_GPIO_Init+0x334>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d025      	beq.n	8001022 <HAL_GPIO_Init+0x232>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a53      	ldr	r2, [pc, #332]	; (8001128 <HAL_GPIO_Init+0x338>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d01f      	beq.n	800101e <HAL_GPIO_Init+0x22e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	; (800112c <HAL_GPIO_Init+0x33c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0x22a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	; (8001130 <HAL_GPIO_Init+0x340>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a50      	ldr	r2, [pc, #320]	; (8001134 <HAL_GPIO_Init+0x344>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x348>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_GPIO_Init+0x34c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x21a>
 8001006:	2309      	movs	r3, #9
 8001008:	e012      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800100a:	230a      	movs	r3, #10
 800100c:	e010      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800100e:	2308      	movs	r3, #8
 8001010:	e00e      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001012:	2307      	movs	r3, #7
 8001014:	e00c      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001016:	2306      	movs	r3, #6
 8001018:	e00a      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800101a:	2305      	movs	r3, #5
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800101e:	2304      	movs	r3, #4
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001040:	4934      	ldr	r1, [pc, #208]	; (8001114 <HAL_GPIO_Init+0x324>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <HAL_GPIO_Init+0x350>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001072:	4a33      	ldr	r2, [pc, #204]	; (8001140 <HAL_GPIO_Init+0x350>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <HAL_GPIO_Init+0x350>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109c:	4a28      	ldr	r2, [pc, #160]	; (8001140 <HAL_GPIO_Init+0x350>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_GPIO_Init+0x350>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <HAL_GPIO_Init+0x350>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_GPIO_Init+0x350>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_GPIO_Init+0x350>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f ae86 	bls.w	8000e10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	3724      	adds	r7, #36	; 0x24
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40022000 	.word	0x40022000
 800113c:	40022400 	.word	0x40022400
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e29b      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8087 	beq.w	80012aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800119c:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a8:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d112      	bne.n	80011da <HAL_RCC_OscConfig+0x62>
 80011b4:	4b90      	ldr	r3, [pc, #576]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c0:	d10b      	bne.n	80011da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c2:	4b8d      	ldr	r3, [pc, #564]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d06c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x130>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d168      	bne.n	80012a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e275      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x7a>
 80011e4:	4b84      	ldr	r3, [pc, #528]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a83      	ldr	r2, [pc, #524]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e02e      	b.n	8001250 <HAL_RCC_OscConfig+0xd8>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x9c>
 80011fa:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b7c      	ldr	r3, [pc, #496]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7b      	ldr	r2, [pc, #492]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xd8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0xc0>
 800121e:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b73      	ldr	r3, [pc, #460]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a72      	ldr	r2, [pc, #456]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xd8>
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b6c      	ldr	r3, [pc, #432]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6b      	ldr	r2, [pc, #428]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fcb6 	bl	8000bc8 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fcb2 	bl	8000bc8 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e229      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xe8>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fca2 	bl	8000bc8 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fc9e 	bl	8000bc8 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e215      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x110>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d069      	beq.n	800138a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b6:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x190>
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x17a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1e9      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	493d      	ldr	r1, [pc, #244]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e040      	b.n	800138a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d023      	beq.n	8001358 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a38      	ldr	r2, [pc, #224]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc54 	bl	8000bc8 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fc50 	bl	8000bc8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1c7      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4929      	ldr	r1, [pc, #164]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
 8001356:	e018      	b.n	800138a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fc30 	bl	8000bc8 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fc2c 	bl	8000bc8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1a3      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d038      	beq.n	8001408 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d019      	beq.n	80013d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc0d 	bl	8000bc8 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc09 	bl	8000bc8 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e180      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80013c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x23a>
 80013d0:	e01a      	b.n	8001408 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80013d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff fbf3 	bl	8000bc8 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbef 	bl	8000bc8 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d903      	bls.n	80013fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e166      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
 80013f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4b92      	ldr	r3, [pc, #584]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80013fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ee      	bne.n	80013e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a4 	beq.w	800155e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b89      	ldr	r3, [pc, #548]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a88      	ldr	r2, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b86      	ldr	r3, [pc, #536]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143e:	4b83      	ldr	r3, [pc, #524]	; (800164c <HAL_RCC_OscConfig+0x4d4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800144a:	4b80      	ldr	r3, [pc, #512]	; (800164c <HAL_RCC_OscConfig+0x4d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7f      	ldr	r2, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x4d4>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fbb7 	bl	8000bc8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fbb3 	bl	8000bc8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e12a      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001470:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x4d4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x31a>
 8001484:	4b70      	ldr	r3, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a6f      	ldr	r2, [pc, #444]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	e02d      	b.n	80014ee <HAL_RCC_OscConfig+0x376>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x33c>
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a67      	ldr	r2, [pc, #412]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x376>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x35e>
 80014bc:	4b62      	ldr	r3, [pc, #392]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a61      	ldr	r2, [pc, #388]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x376>
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb67 	bl	8000bc8 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fb63 	bl	8000bc8 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0d8      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x386>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fb51 	bl	8000bc8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fb4d 	bl	8000bc8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0c2      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a3c      	ldr	r2, [pc, #240]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80ae 	beq.w	80016c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d06d      	beq.n	8001650 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d14b      	bne.n	8001614 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a31      	ldr	r2, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb1e 	bl	8000bc8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fb1a 	bl	8000bc8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e091      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	071b      	lsls	r3, r3, #28
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff faec 	bl	8000bc8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fae8 	bl	8000bc8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e05f      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x47c>
 8001612:	e057      	b.n	80016c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 800161a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fad2 	bl	8000bc8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff face 	bl	8000bc8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e045      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163a:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_RCC_OscConfig+0x4d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x4b0>
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x54c>
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x558>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d030      	beq.n	80016c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d129      	bne.n	80016c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d122      	bne.n	80016c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001686:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001688:	4293      	cmp	r3, r2
 800168a:	d119      	bne.n	80016c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d10f      	bne.n	80016c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0d0      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d910      	bls.n	800171c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 020f 	bic.w	r2, r3, #15
 8001702:	4965      	ldr	r1, [pc, #404]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d040      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e073      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e06b      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 0203 	bic.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4936      	ldr	r1, [pc, #216]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c8:	f7ff f9fe 	bl	8000bc8 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d0:	f7ff f9fa 	bl	8000bc8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e053      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 020c 	and.w	r2, r3, #12
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1eb      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d210      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 020f 	bic.w	r2, r3, #15
 800180e:	4922      	ldr	r1, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4601      	mov	r1, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1cc>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	fa21 f303 	lsr.w	r3, r1, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1d4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f95a 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	0800384c 	.word	0x0800384c
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d007      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x32>
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d008      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x38>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 808d 	bne.w	80019f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018da:	60bb      	str	r3, [r7, #8]
      break;
 80018dc:	e08c      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 80018e0:	60bb      	str	r3, [r7, #8]
      break;
 80018e2:	e089      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d023      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	099b      	lsrs	r3, r3, #6
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	ea03 0501 	and.w	r5, r3, r1
 8001910:	ea04 0602 	and.w	r6, r4, r2
 8001914:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 8001916:	fb02 f106 	mul.w	r1, r2, r6
 800191a:	2200      	movs	r2, #0
 800191c:	fb02 f205 	mul.w	r2, r2, r5
 8001920:	440a      	add	r2, r1
 8001922:	493a      	ldr	r1, [pc, #232]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 8001924:	fba5 0101 	umull	r0, r1, r5, r1
 8001928:	1853      	adds	r3, r2, r1
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	461a      	mov	r2, r3
 8001934:	4623      	mov	r3, r4
 8001936:	f7fe fcd3 	bl	80002e0 <__aeabi_uldivmod>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e049      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	ea03 0501 	and.w	r5, r3, r1
 8001958:	ea04 0602 	and.w	r6, r4, r2
 800195c:	4629      	mov	r1, r5
 800195e:	4632      	mov	r2, r6
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	0154      	lsls	r4, r2, #5
 800196a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800196e:	014b      	lsls	r3, r1, #5
 8001970:	4619      	mov	r1, r3
 8001972:	4622      	mov	r2, r4
 8001974:	1b49      	subs	r1, r1, r5
 8001976:	eb62 0206 	sbc.w	r2, r2, r6
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f04f 0400 	mov.w	r4, #0
 8001982:	0194      	lsls	r4, r2, #6
 8001984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001988:	018b      	lsls	r3, r1, #6
 800198a:	1a5b      	subs	r3, r3, r1
 800198c:	eb64 0402 	sbc.w	r4, r4, r2
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	00e2      	lsls	r2, r4, #3
 800199a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800199e:	00d9      	lsls	r1, r3, #3
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	195b      	adds	r3, r3, r5
 80019a6:	eb44 0406 	adc.w	r4, r4, r6
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	02a2      	lsls	r2, r4, #10
 80019b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019b8:	0299      	lsls	r1, r3, #10
 80019ba:	460b      	mov	r3, r1
 80019bc:	4614      	mov	r4, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	4621      	mov	r1, r4
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	f7fe fc88 	bl	80002e0 <__aeabi_uldivmod>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	60bb      	str	r3, [r7, #8]
      break;
 80019f0:	e002      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019f4:	60bb      	str	r3, [r7, #8]
      break;
 80019f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f8:	68bb      	ldr	r3, [r7, #8]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	017d7840 	.word	0x017d7840

08001a10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a30:	4601      	mov	r1, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0a9b      	lsrs	r3, r3, #10
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3e:	5cd3      	ldrb	r3, [r2, r3]
 8001a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	0800385c 	.word	0x0800385c

08001a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a54:	f7ff ffdc 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a58:	4601      	mov	r1, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0b5b      	lsrs	r3, r3, #13
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	0800385c 	.word	0x0800385c

08001a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001aaa:	6093      	str	r3, [r2, #8]
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	4964      	ldr	r1, [pc, #400]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d017      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	4959      	ldr	r1, [pc, #356]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af0:	d101      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d017      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 808b 	beq.w	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b80:	f7ff f822 	bl	8000bc8 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7ff f81e 	bl	8000bc8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e38d      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d035      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d02e      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d114      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe ffe6 	bl	8000bc8 <HAL_GetTick>
 8001bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7fe ffe2 	bl	8000bc8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e34f      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0ee      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c2e:	d111      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	4901      	ldr	r1, [pc, #4]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	0ffffcff 	.word	0x0ffffcff
 8001c54:	4bb3      	ldr	r3, [pc, #716]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4ab2      	ldr	r2, [pc, #712]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c5e:	6093      	str	r3, [r2, #8]
 8001c60:	4bb0      	ldr	r3, [pc, #704]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	49ad      	ldr	r1, [pc, #692]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c7e:	4ba9      	ldr	r3, [pc, #676]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c84:	4aa7      	ldr	r2, [pc, #668]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c8e:	4ba5      	ldr	r3, [pc, #660]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	49a2      	ldr	r1, [pc, #648]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cac:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cba:	499a      	ldr	r1, [pc, #616]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cce:	4b95      	ldr	r3, [pc, #596]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cdc:	4991      	ldr	r1, [pc, #580]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cf0:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfe:	4989      	ldr	r1, [pc, #548]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d12:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4980      	ldr	r1, [pc, #512]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4978      	ldr	r1, [pc, #480]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	f023 020c 	bic.w	r2, r3, #12
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	496f      	ldr	r1, [pc, #444]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4967      	ldr	r1, [pc, #412]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d9a:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da8:	495e      	ldr	r1, [pc, #376]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	4956      	ldr	r1, [pc, #344]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001dde:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	4945      	ldr	r1, [pc, #276]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	493c      	ldr	r1, [pc, #240]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e52:	4934      	ldr	r1, [pc, #208]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d011      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e74:	492b      	ldr	r1, [pc, #172]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb4:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ed8:	4912      	ldr	r1, [pc, #72]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001efc:	4909      	ldr	r1, [pc, #36]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00f      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f20:	e002      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	4985      	ldr	r1, [pc, #532]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f3c:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4c:	497c      	ldr	r1, [pc, #496]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f62:	f040 80d6 	bne.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f72:	f7fe fe29 	bl	8000bc8 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f7a:	f7fe fe25 	bl	8000bc8 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e194      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f8c:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d021      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11d      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fac:	4b64      	ldr	r3, [pc, #400]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc0:	0e1b      	lsrs	r3, r3, #24
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	019a      	lsls	r2, r3, #6
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	061b      	lsls	r3, r3, #24
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	071b      	lsls	r3, r3, #28
 8001fe0:	4957      	ldr	r1, [pc, #348]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d02e      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002012:	d129      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002028:	0f1b      	lsrs	r3, r3, #28
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	019a      	lsls	r2, r3, #6
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	071b      	lsls	r3, r3, #28
 8002048:	493d      	ldr	r1, [pc, #244]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002056:	f023 021f 	bic.w	r2, r3, #31
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	3b01      	subs	r3, #1
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01d      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	0e1b      	lsrs	r3, r3, #24
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002088:	0f1b      	lsrs	r3, r3, #28
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	019a      	lsls	r2, r3, #6
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	071b      	lsls	r3, r3, #28
 80020a8:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d011      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	019a      	lsls	r2, r3, #6
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	071b      	lsls	r3, r3, #28
 80020d8:	4919      	ldr	r1, [pc, #100]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ec:	f7fe fd6c 	bl	8000bc8 <HAL_GetTick>
 80020f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020f4:	f7fe fd68 	bl	8000bc8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0d7      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b01      	cmp	r3, #1
 8002116:	f040 80cd 	bne.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002126:	f7fe fd4f 	bl	8000bc8 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800212e:	f7fe fd4b 	bl	8000bc8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d903      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ba      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002140:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002150:	d0ed      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02e      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12a      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002188:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	0f1b      	lsrs	r3, r3, #28
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	019a      	lsls	r2, r3, #6
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	4944      	ldr	r1, [pc, #272]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021b6:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	493d      	ldr	r1, [pc, #244]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d022      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e4:	d11d      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	0e1b      	lsrs	r3, r3, #24
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	0f1b      	lsrs	r3, r3, #28
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	019a      	lsls	r2, r3, #6
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	071b      	lsls	r3, r3, #28
 800221a:	4929      	ldr	r1, [pc, #164]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	4917      	ldr	r1, [pc, #92]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800226c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	4911      	ldr	r1, [pc, #68]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228c:	f7fe fc9c 	bl	8000bc8 <HAL_GetTick>
 8002290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002294:	f7fe fc98 	bl	8000bc8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e007      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b2:	d1ef      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e01d      	b.n	8002312 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fb18 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 f834 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_TIM_Base_Start+0x50>)
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b06      	cmp	r3, #6
 800233c:	d00b      	beq.n	8002356 <HAL_TIM_Base_Start+0x3a>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d007      	beq.n	8002356 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	00010007 	.word	0x00010007

08002370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a40      	ldr	r2, [pc, #256]	; (8002484 <TIM_Base_SetConfig+0x114>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238e:	d00f      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3d      	ldr	r2, [pc, #244]	; (8002488 <TIM_Base_SetConfig+0x118>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00b      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3c      	ldr	r2, [pc, #240]	; (800248c <TIM_Base_SetConfig+0x11c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <TIM_Base_SetConfig+0x120>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a3a      	ldr	r2, [pc, #232]	; (8002494 <TIM_Base_SetConfig+0x124>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <TIM_Base_SetConfig+0x114>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d0:	d027      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <TIM_Base_SetConfig+0x118>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d023      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a2b      	ldr	r2, [pc, #172]	; (800248c <TIM_Base_SetConfig+0x11c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <TIM_Base_SetConfig+0x120>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01b      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a29      	ldr	r2, [pc, #164]	; (8002494 <TIM_Base_SetConfig+0x124>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d017      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a28      	ldr	r2, [pc, #160]	; (8002498 <TIM_Base_SetConfig+0x128>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <TIM_Base_SetConfig+0x12c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00f      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <TIM_Base_SetConfig+0x130>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00b      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <TIM_Base_SetConfig+0x134>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <TIM_Base_SetConfig+0x138>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <TIM_Base_SetConfig+0x13c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d108      	bne.n	8002434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <TIM_Base_SetConfig+0x114>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <TIM_Base_SetConfig+0xf8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <TIM_Base_SetConfig+0x124>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d103      	bne.n	8002470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	615a      	str	r2, [r3, #20]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40010000 	.word	0x40010000
 8002488:	40000400 	.word	0x40000400
 800248c:	40000800 	.word	0x40000800
 8002490:	40000c00 	.word	0x40000c00
 8002494:	40010400 	.word	0x40010400
 8002498:	40014000 	.word	0x40014000
 800249c:	40014400 	.word	0x40014400
 80024a0:	40014800 	.word	0x40014800
 80024a4:	40001800 	.word	0x40001800
 80024a8:	40001c00 	.word	0x40001c00
 80024ac:	40002000 	.word	0x40002000

080024b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e06d      	b.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d108      	bne.n	800250e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d022      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253a:	d01d      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d018      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d013      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00e      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10c      	bne.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800257e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4313      	orrs	r3, r2
 8002588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40010400 	.word	0x40010400
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800
 80025c0:	40000c00 	.word	0x40000c00
 80025c4:	40014000 	.word	0x40014000
 80025c8:	40001800 	.word	0x40001800

080025cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e040      	b.n	8002660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe f9b6 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8be 	bl	800278c <UART_SetConfig>
 8002610:	4603      	mov	r3, r0
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e022      	b.n	8002660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fb5c 	bl	8002ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fbe3 	bl	8002e24 <UART_CheckIdleState>
 800265e:	4603      	mov	r3, r0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	2b20      	cmp	r3, #32
 800267e:	d17f      	bne.n	8002780 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_UART_Transmit+0x24>
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e078      	b.n	8002782 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_UART_Transmit+0x36>
 800269a:	2302      	movs	r3, #2
 800269c:	e071      	b.n	8002782 <HAL_UART_Transmit+0x11a>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2221      	movs	r2, #33	; 0x21
 80026b0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80026b2:	f7fe fa89 	bl	8000bc8 <HAL_GetTick>
 80026b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d108      	bne.n	80026e4 <HAL_UART_Transmit+0x7c>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e003      	b.n	80026ec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80026f4:	e02c      	b.n	8002750 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fbd4 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e038      	b.n	8002782 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10b      	bne.n	800272e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3302      	adds	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e007      	b.n	800273e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1cc      	bne.n	80026f6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2200      	movs	r2, #0
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fba1 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e005      	b.n	8002782 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4bb1      	ldr	r3, [pc, #708]	; (8002a80 <UART_SetConfig+0x2f4>)
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	6939      	ldr	r1, [r7, #16]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a9f      	ldr	r2, [pc, #636]	; (8002a84 <UART_SetConfig+0x2f8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d121      	bne.n	8002850 <UART_SetConfig+0xc4>
 800280c:	4b9e      	ldr	r3, [pc, #632]	; (8002a88 <UART_SetConfig+0x2fc>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b03      	cmp	r3, #3
 8002818:	d816      	bhi.n	8002848 <UART_SetConfig+0xbc>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <UART_SetConfig+0x94>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002831 	.word	0x08002831
 8002824:	0800283d 	.word	0x0800283d
 8002828:	08002837 	.word	0x08002837
 800282c:	08002843 	.word	0x08002843
 8002830:	2301      	movs	r3, #1
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e151      	b.n	8002ada <UART_SetConfig+0x34e>
 8002836:	2302      	movs	r3, #2
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e14e      	b.n	8002ada <UART_SetConfig+0x34e>
 800283c:	2304      	movs	r3, #4
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	e14b      	b.n	8002ada <UART_SetConfig+0x34e>
 8002842:	2308      	movs	r3, #8
 8002844:	77fb      	strb	r3, [r7, #31]
 8002846:	e148      	b.n	8002ada <UART_SetConfig+0x34e>
 8002848:	2310      	movs	r3, #16
 800284a:	77fb      	strb	r3, [r7, #31]
 800284c:	bf00      	nop
 800284e:	e144      	b.n	8002ada <UART_SetConfig+0x34e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8d      	ldr	r2, [pc, #564]	; (8002a8c <UART_SetConfig+0x300>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d134      	bne.n	80028c4 <UART_SetConfig+0x138>
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <UART_SetConfig+0x2fc>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d829      	bhi.n	80028bc <UART_SetConfig+0x130>
 8002868:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <UART_SetConfig+0xe4>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	080028a5 	.word	0x080028a5
 8002874:	080028bd 	.word	0x080028bd
 8002878:	080028bd 	.word	0x080028bd
 800287c:	080028bd 	.word	0x080028bd
 8002880:	080028b1 	.word	0x080028b1
 8002884:	080028bd 	.word	0x080028bd
 8002888:	080028bd 	.word	0x080028bd
 800288c:	080028bd 	.word	0x080028bd
 8002890:	080028ab 	.word	0x080028ab
 8002894:	080028bd 	.word	0x080028bd
 8002898:	080028bd 	.word	0x080028bd
 800289c:	080028bd 	.word	0x080028bd
 80028a0:	080028b7 	.word	0x080028b7
 80028a4:	2300      	movs	r3, #0
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	e117      	b.n	8002ada <UART_SetConfig+0x34e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	77fb      	strb	r3, [r7, #31]
 80028ae:	e114      	b.n	8002ada <UART_SetConfig+0x34e>
 80028b0:	2304      	movs	r3, #4
 80028b2:	77fb      	strb	r3, [r7, #31]
 80028b4:	e111      	b.n	8002ada <UART_SetConfig+0x34e>
 80028b6:	2308      	movs	r3, #8
 80028b8:	77fb      	strb	r3, [r7, #31]
 80028ba:	e10e      	b.n	8002ada <UART_SetConfig+0x34e>
 80028bc:	2310      	movs	r3, #16
 80028be:	77fb      	strb	r3, [r7, #31]
 80028c0:	bf00      	nop
 80028c2:	e10a      	b.n	8002ada <UART_SetConfig+0x34e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a71      	ldr	r2, [pc, #452]	; (8002a90 <UART_SetConfig+0x304>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d120      	bne.n	8002910 <UART_SetConfig+0x184>
 80028ce:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <UART_SetConfig+0x2fc>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d00f      	beq.n	80028fc <UART_SetConfig+0x170>
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d802      	bhi.n	80028e6 <UART_SetConfig+0x15a>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <UART_SetConfig+0x164>
 80028e4:	e010      	b.n	8002908 <UART_SetConfig+0x17c>
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d005      	beq.n	80028f6 <UART_SetConfig+0x16a>
 80028ea:	2b30      	cmp	r3, #48	; 0x30
 80028ec:	d009      	beq.n	8002902 <UART_SetConfig+0x176>
 80028ee:	e00b      	b.n	8002908 <UART_SetConfig+0x17c>
 80028f0:	2300      	movs	r3, #0
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e0f1      	b.n	8002ada <UART_SetConfig+0x34e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e0ee      	b.n	8002ada <UART_SetConfig+0x34e>
 80028fc:	2304      	movs	r3, #4
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e0eb      	b.n	8002ada <UART_SetConfig+0x34e>
 8002902:	2308      	movs	r3, #8
 8002904:	77fb      	strb	r3, [r7, #31]
 8002906:	e0e8      	b.n	8002ada <UART_SetConfig+0x34e>
 8002908:	2310      	movs	r3, #16
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	bf00      	nop
 800290e:	e0e4      	b.n	8002ada <UART_SetConfig+0x34e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <UART_SetConfig+0x308>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d120      	bne.n	800295c <UART_SetConfig+0x1d0>
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <UART_SetConfig+0x2fc>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d00f      	beq.n	8002948 <UART_SetConfig+0x1bc>
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d802      	bhi.n	8002932 <UART_SetConfig+0x1a6>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <UART_SetConfig+0x1b0>
 8002930:	e010      	b.n	8002954 <UART_SetConfig+0x1c8>
 8002932:	2b80      	cmp	r3, #128	; 0x80
 8002934:	d005      	beq.n	8002942 <UART_SetConfig+0x1b6>
 8002936:	2bc0      	cmp	r3, #192	; 0xc0
 8002938:	d009      	beq.n	800294e <UART_SetConfig+0x1c2>
 800293a:	e00b      	b.n	8002954 <UART_SetConfig+0x1c8>
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e0cb      	b.n	8002ada <UART_SetConfig+0x34e>
 8002942:	2302      	movs	r3, #2
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e0c8      	b.n	8002ada <UART_SetConfig+0x34e>
 8002948:	2304      	movs	r3, #4
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e0c5      	b.n	8002ada <UART_SetConfig+0x34e>
 800294e:	2308      	movs	r3, #8
 8002950:	77fb      	strb	r3, [r7, #31]
 8002952:	e0c2      	b.n	8002ada <UART_SetConfig+0x34e>
 8002954:	2310      	movs	r3, #16
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	bf00      	nop
 800295a:	e0be      	b.n	8002ada <UART_SetConfig+0x34e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <UART_SetConfig+0x30c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d124      	bne.n	80029b0 <UART_SetConfig+0x224>
 8002966:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <UART_SetConfig+0x2fc>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d012      	beq.n	800299c <UART_SetConfig+0x210>
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d802      	bhi.n	8002982 <UART_SetConfig+0x1f6>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <UART_SetConfig+0x204>
 8002980:	e012      	b.n	80029a8 <UART_SetConfig+0x21c>
 8002982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002986:	d006      	beq.n	8002996 <UART_SetConfig+0x20a>
 8002988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800298c:	d009      	beq.n	80029a2 <UART_SetConfig+0x216>
 800298e:	e00b      	b.n	80029a8 <UART_SetConfig+0x21c>
 8002990:	2300      	movs	r3, #0
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e0a1      	b.n	8002ada <UART_SetConfig+0x34e>
 8002996:	2302      	movs	r3, #2
 8002998:	77fb      	strb	r3, [r7, #31]
 800299a:	e09e      	b.n	8002ada <UART_SetConfig+0x34e>
 800299c:	2304      	movs	r3, #4
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e09b      	b.n	8002ada <UART_SetConfig+0x34e>
 80029a2:	2308      	movs	r3, #8
 80029a4:	77fb      	strb	r3, [r7, #31]
 80029a6:	e098      	b.n	8002ada <UART_SetConfig+0x34e>
 80029a8:	2310      	movs	r3, #16
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	bf00      	nop
 80029ae:	e094      	b.n	8002ada <UART_SetConfig+0x34e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <UART_SetConfig+0x310>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d124      	bne.n	8002a04 <UART_SetConfig+0x278>
 80029ba:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <UART_SetConfig+0x2fc>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c8:	d012      	beq.n	80029f0 <UART_SetConfig+0x264>
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d802      	bhi.n	80029d6 <UART_SetConfig+0x24a>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <UART_SetConfig+0x258>
 80029d4:	e012      	b.n	80029fc <UART_SetConfig+0x270>
 80029d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029da:	d006      	beq.n	80029ea <UART_SetConfig+0x25e>
 80029dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029e0:	d009      	beq.n	80029f6 <UART_SetConfig+0x26a>
 80029e2:	e00b      	b.n	80029fc <UART_SetConfig+0x270>
 80029e4:	2301      	movs	r3, #1
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e077      	b.n	8002ada <UART_SetConfig+0x34e>
 80029ea:	2302      	movs	r3, #2
 80029ec:	77fb      	strb	r3, [r7, #31]
 80029ee:	e074      	b.n	8002ada <UART_SetConfig+0x34e>
 80029f0:	2304      	movs	r3, #4
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e071      	b.n	8002ada <UART_SetConfig+0x34e>
 80029f6:	2308      	movs	r3, #8
 80029f8:	77fb      	strb	r3, [r7, #31]
 80029fa:	e06e      	b.n	8002ada <UART_SetConfig+0x34e>
 80029fc:	2310      	movs	r3, #16
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	bf00      	nop
 8002a02:	e06a      	b.n	8002ada <UART_SetConfig+0x34e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <UART_SetConfig+0x314>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d124      	bne.n	8002a58 <UART_SetConfig+0x2cc>
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <UART_SetConfig+0x2fc>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d012      	beq.n	8002a44 <UART_SetConfig+0x2b8>
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d802      	bhi.n	8002a2a <UART_SetConfig+0x29e>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <UART_SetConfig+0x2ac>
 8002a28:	e012      	b.n	8002a50 <UART_SetConfig+0x2c4>
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2e:	d006      	beq.n	8002a3e <UART_SetConfig+0x2b2>
 8002a30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a34:	d009      	beq.n	8002a4a <UART_SetConfig+0x2be>
 8002a36:	e00b      	b.n	8002a50 <UART_SetConfig+0x2c4>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	77fb      	strb	r3, [r7, #31]
 8002a3c:	e04d      	b.n	8002ada <UART_SetConfig+0x34e>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	77fb      	strb	r3, [r7, #31]
 8002a42:	e04a      	b.n	8002ada <UART_SetConfig+0x34e>
 8002a44:	2304      	movs	r3, #4
 8002a46:	77fb      	strb	r3, [r7, #31]
 8002a48:	e047      	b.n	8002ada <UART_SetConfig+0x34e>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	77fb      	strb	r3, [r7, #31]
 8002a4e:	e044      	b.n	8002ada <UART_SetConfig+0x34e>
 8002a50:	2310      	movs	r3, #16
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	bf00      	nop
 8002a56:	e040      	b.n	8002ada <UART_SetConfig+0x34e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <UART_SetConfig+0x318>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d139      	bne.n	8002ad6 <UART_SetConfig+0x34a>
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <UART_SetConfig+0x2fc>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a70:	d027      	beq.n	8002ac2 <UART_SetConfig+0x336>
 8002a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a76:	d817      	bhi.n	8002aa8 <UART_SetConfig+0x31c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01c      	beq.n	8002ab6 <UART_SetConfig+0x32a>
 8002a7c:	e027      	b.n	8002ace <UART_SetConfig+0x342>
 8002a7e:	bf00      	nop
 8002a80:	efff69f3 	.word	0xefff69f3
 8002a84:	40011000 	.word	0x40011000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	40004800 	.word	0x40004800
 8002a94:	40004c00 	.word	0x40004c00
 8002a98:	40005000 	.word	0x40005000
 8002a9c:	40011400 	.word	0x40011400
 8002aa0:	40007800 	.word	0x40007800
 8002aa4:	40007c00 	.word	0x40007c00
 8002aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aac:	d006      	beq.n	8002abc <UART_SetConfig+0x330>
 8002aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ab2:	d009      	beq.n	8002ac8 <UART_SetConfig+0x33c>
 8002ab4:	e00b      	b.n	8002ace <UART_SetConfig+0x342>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e00e      	b.n	8002ada <UART_SetConfig+0x34e>
 8002abc:	2302      	movs	r3, #2
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e00b      	b.n	8002ada <UART_SetConfig+0x34e>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	77fb      	strb	r3, [r7, #31]
 8002ac6:	e008      	b.n	8002ada <UART_SetConfig+0x34e>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e005      	b.n	8002ada <UART_SetConfig+0x34e>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	77fb      	strb	r3, [r7, #31]
 8002ad2:	bf00      	nop
 8002ad4:	e001      	b.n	8002ada <UART_SetConfig+0x34e>
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae2:	d17f      	bne.n	8002be4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002ae4:	7ffb      	ldrb	r3, [r7, #31]
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d85c      	bhi.n	8002ba4 <UART_SetConfig+0x418>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <UART_SetConfig+0x364>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002b35 	.word	0x08002b35
 8002af8:	08002b55 	.word	0x08002b55
 8002afc:	08002ba5 	.word	0x08002ba5
 8002b00:	08002b6d 	.word	0x08002b6d
 8002b04:	08002ba5 	.word	0x08002ba5
 8002b08:	08002ba5 	.word	0x08002ba5
 8002b0c:	08002ba5 	.word	0x08002ba5
 8002b10:	08002b8d 	.word	0x08002b8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b14:	f7fe ff88 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8002b18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	61bb      	str	r3, [r7, #24]
        break;
 8002b32:	e03a      	b.n	8002baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b34:	f7fe ff8c 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8002b38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	441a      	add	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	61bb      	str	r3, [r7, #24]
        break;
 8002b52:	e02a      	b.n	8002baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	085a      	lsrs	r2, r3, #1
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <UART_SetConfig+0x54c>)
 8002b5c:	4413      	add	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6852      	ldr	r2, [r2, #4]
 8002b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	61bb      	str	r3, [r7, #24]
        break;
 8002b6a:	e01e      	b.n	8002baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6c:	f7fe fe9e 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002b70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	005a      	lsls	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	61bb      	str	r3, [r7, #24]
        break;
 8002b8a:	e00e      	b.n	8002baa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	61bb      	str	r3, [r7, #24]
        break;
 8002ba2:	e002      	b.n	8002baa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b0f      	cmp	r3, #15
 8002bae:	d916      	bls.n	8002bde <UART_SetConfig+0x452>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d212      	bcs.n	8002bde <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f023 030f 	bic.w	r3, r3, #15
 8002bc0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	897a      	ldrh	r2, [r7, #10]
 8002bda:	60da      	str	r2, [r3, #12]
 8002bdc:	e070      	b.n	8002cc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
 8002be2:	e06d      	b.n	8002cc0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d859      	bhi.n	8002c9e <UART_SetConfig+0x512>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <UART_SetConfig+0x464>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c33 	.word	0x08002c33
 8002bf8:	08002c51 	.word	0x08002c51
 8002bfc:	08002c9f 	.word	0x08002c9f
 8002c00:	08002c69 	.word	0x08002c69
 8002c04:	08002c9f 	.word	0x08002c9f
 8002c08:	08002c9f 	.word	0x08002c9f
 8002c0c:	08002c9f 	.word	0x08002c9f
 8002c10:	08002c87 	.word	0x08002c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c14:	f7fe ff08 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8002c18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	085a      	lsrs	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	61bb      	str	r3, [r7, #24]
        break;
 8002c30:	e038      	b.n	8002ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c32:	f7fe ff0d 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8002c36:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	085a      	lsrs	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	61bb      	str	r3, [r7, #24]
        break;
 8002c4e:	e029      	b.n	8002ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	085a      	lsrs	r2, r3, #1
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <UART_SetConfig+0x550>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6852      	ldr	r2, [r2, #4]
 8002c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	61bb      	str	r3, [r7, #24]
        break;
 8002c66:	e01d      	b.n	8002ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c68:	f7fe fe20 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002c6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	085a      	lsrs	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	61bb      	str	r3, [r7, #24]
        break;
 8002c84:	e00e      	b.n	8002ca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	61bb      	str	r3, [r7, #24]
        break;
 8002c9c:	e002      	b.n	8002ca4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	d908      	bls.n	8002cbc <UART_SetConfig+0x530>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d204      	bcs.n	8002cbc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	e001      	b.n	8002cc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	01e84800 	.word	0x01e84800
 8002cdc:	00f42400 	.word	0x00f42400

08002ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01a      	beq.n	8002df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dde:	d10a      	bne.n	8002df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e32:	f7fd fec9 	bl	8000bc8 <HAL_GetTick>
 8002e36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d10e      	bne.n	8002e64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f82a 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e020      	b.n	8002ea6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d10e      	bne.n	8002e90 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f814 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00a      	b.n	8002ea6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	e05d      	b.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d059      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec8:	f7fd fe7e 	bl	8000bc8 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11b      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002eec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e042      	b.n	8002f9c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02b      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f32:	d123      	bne.n	8002f7c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f3c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e00f      	b.n	8002f9c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d092      	beq.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <__errno>:
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <__errno+0x8>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4e0d      	ldr	r6, [pc, #52]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1ba4      	subs	r4, r4, r6
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2500      	movs	r5, #0
 8002fbc:	42a5      	cmp	r5, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4e0b      	ldr	r6, [pc, #44]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	; (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 fc26 	bl	8003814 <_init>
 8002fc8:	1ba4      	subs	r4, r4, r6
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2500      	movs	r5, #0
 8002fce:	42a5      	cmp	r5, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd8:	4798      	blx	r3
 8002fda:	3501      	adds	r5, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe2:	4798      	blx	r3
 8002fe4:	3501      	adds	r5, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	080038a0 	.word	0x080038a0
 8002fec:	080038a0 	.word	0x080038a0
 8002ff0:	080038a0 	.word	0x080038a0
 8002ff4:	080038a4 	.word	0x080038a4

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <siprintf>:
 8003008:	b40e      	push	{r1, r2, r3}
 800300a:	b500      	push	{lr}
 800300c:	b09c      	sub	sp, #112	; 0x70
 800300e:	ab1d      	add	r3, sp, #116	; 0x74
 8003010:	9002      	str	r0, [sp, #8]
 8003012:	9006      	str	r0, [sp, #24]
 8003014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003018:	4809      	ldr	r0, [pc, #36]	; (8003040 <siprintf+0x38>)
 800301a:	9107      	str	r1, [sp, #28]
 800301c:	9104      	str	r1, [sp, #16]
 800301e:	4909      	ldr	r1, [pc, #36]	; (8003044 <siprintf+0x3c>)
 8003020:	f853 2b04 	ldr.w	r2, [r3], #4
 8003024:	9105      	str	r1, [sp, #20]
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	a902      	add	r1, sp, #8
 800302c:	f000 f866 	bl	80030fc <_svfiprintf_r>
 8003030:	9b02      	ldr	r3, [sp, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	b01c      	add	sp, #112	; 0x70
 8003038:	f85d eb04 	ldr.w	lr, [sp], #4
 800303c:	b003      	add	sp, #12
 800303e:	4770      	bx	lr
 8003040:	2000000c 	.word	0x2000000c
 8003044:	ffff0208 	.word	0xffff0208

08003048 <__ssputs_r>:
 8003048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	688e      	ldr	r6, [r1, #8]
 800304e:	429e      	cmp	r6, r3
 8003050:	4682      	mov	sl, r0
 8003052:	460c      	mov	r4, r1
 8003054:	4690      	mov	r8, r2
 8003056:	4699      	mov	r9, r3
 8003058:	d837      	bhi.n	80030ca <__ssputs_r+0x82>
 800305a:	898a      	ldrh	r2, [r1, #12]
 800305c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003060:	d031      	beq.n	80030c6 <__ssputs_r+0x7e>
 8003062:	6825      	ldr	r5, [r4, #0]
 8003064:	6909      	ldr	r1, [r1, #16]
 8003066:	1a6f      	subs	r7, r5, r1
 8003068:	6965      	ldr	r5, [r4, #20]
 800306a:	2302      	movs	r3, #2
 800306c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003070:	fb95 f5f3 	sdiv	r5, r5, r3
 8003074:	f109 0301 	add.w	r3, r9, #1
 8003078:	443b      	add	r3, r7
 800307a:	429d      	cmp	r5, r3
 800307c:	bf38      	it	cc
 800307e:	461d      	movcc	r5, r3
 8003080:	0553      	lsls	r3, r2, #21
 8003082:	d530      	bpl.n	80030e6 <__ssputs_r+0x9e>
 8003084:	4629      	mov	r1, r5
 8003086:	f000 fb2b 	bl	80036e0 <_malloc_r>
 800308a:	4606      	mov	r6, r0
 800308c:	b950      	cbnz	r0, 80030a4 <__ssputs_r+0x5c>
 800308e:	230c      	movs	r3, #12
 8003090:	f8ca 3000 	str.w	r3, [sl]
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a4:	463a      	mov	r2, r7
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	f000 faa8 	bl	80035fc <memcpy>
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	6126      	str	r6, [r4, #16]
 80030ba:	6165      	str	r5, [r4, #20]
 80030bc:	443e      	add	r6, r7
 80030be:	1bed      	subs	r5, r5, r7
 80030c0:	6026      	str	r6, [r4, #0]
 80030c2:	60a5      	str	r5, [r4, #8]
 80030c4:	464e      	mov	r6, r9
 80030c6:	454e      	cmp	r6, r9
 80030c8:	d900      	bls.n	80030cc <__ssputs_r+0x84>
 80030ca:	464e      	mov	r6, r9
 80030cc:	4632      	mov	r2, r6
 80030ce:	4641      	mov	r1, r8
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	f000 fa9e 	bl	8003612 <memmove>
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	1b9b      	subs	r3, r3, r6
 80030da:	60a3      	str	r3, [r4, #8]
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	441e      	add	r6, r3
 80030e0:	6026      	str	r6, [r4, #0]
 80030e2:	2000      	movs	r0, #0
 80030e4:	e7dc      	b.n	80030a0 <__ssputs_r+0x58>
 80030e6:	462a      	mov	r2, r5
 80030e8:	f000 fb54 	bl	8003794 <_realloc_r>
 80030ec:	4606      	mov	r6, r0
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1e2      	bne.n	80030b8 <__ssputs_r+0x70>
 80030f2:	6921      	ldr	r1, [r4, #16]
 80030f4:	4650      	mov	r0, sl
 80030f6:	f000 faa5 	bl	8003644 <_free_r>
 80030fa:	e7c8      	b.n	800308e <__ssputs_r+0x46>

080030fc <_svfiprintf_r>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	461d      	mov	r5, r3
 8003102:	898b      	ldrh	r3, [r1, #12]
 8003104:	061f      	lsls	r7, r3, #24
 8003106:	b09d      	sub	sp, #116	; 0x74
 8003108:	4680      	mov	r8, r0
 800310a:	460c      	mov	r4, r1
 800310c:	4616      	mov	r6, r2
 800310e:	d50f      	bpl.n	8003130 <_svfiprintf_r+0x34>
 8003110:	690b      	ldr	r3, [r1, #16]
 8003112:	b96b      	cbnz	r3, 8003130 <_svfiprintf_r+0x34>
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	f000 fae3 	bl	80036e0 <_malloc_r>
 800311a:	6020      	str	r0, [r4, #0]
 800311c:	6120      	str	r0, [r4, #16]
 800311e:	b928      	cbnz	r0, 800312c <_svfiprintf_r+0x30>
 8003120:	230c      	movs	r3, #12
 8003122:	f8c8 3000 	str.w	r3, [r8]
 8003126:	f04f 30ff 	mov.w	r0, #4294967295
 800312a:	e0c8      	b.n	80032be <_svfiprintf_r+0x1c2>
 800312c:	2340      	movs	r3, #64	; 0x40
 800312e:	6163      	str	r3, [r4, #20]
 8003130:	2300      	movs	r3, #0
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	2320      	movs	r3, #32
 8003136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313a:	2330      	movs	r3, #48	; 0x30
 800313c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003140:	9503      	str	r5, [sp, #12]
 8003142:	f04f 0b01 	mov.w	fp, #1
 8003146:	4637      	mov	r7, r6
 8003148:	463d      	mov	r5, r7
 800314a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800314e:	b10b      	cbz	r3, 8003154 <_svfiprintf_r+0x58>
 8003150:	2b25      	cmp	r3, #37	; 0x25
 8003152:	d13e      	bne.n	80031d2 <_svfiprintf_r+0xd6>
 8003154:	ebb7 0a06 	subs.w	sl, r7, r6
 8003158:	d00b      	beq.n	8003172 <_svfiprintf_r+0x76>
 800315a:	4653      	mov	r3, sl
 800315c:	4632      	mov	r2, r6
 800315e:	4621      	mov	r1, r4
 8003160:	4640      	mov	r0, r8
 8003162:	f7ff ff71 	bl	8003048 <__ssputs_r>
 8003166:	3001      	adds	r0, #1
 8003168:	f000 80a4 	beq.w	80032b4 <_svfiprintf_r+0x1b8>
 800316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800316e:	4453      	add	r3, sl
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
 8003172:	783b      	ldrb	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 809d 	beq.w	80032b4 <_svfiprintf_r+0x1b8>
 800317a:	2300      	movs	r3, #0
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	9307      	str	r3, [sp, #28]
 8003188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800318c:	931a      	str	r3, [sp, #104]	; 0x68
 800318e:	462f      	mov	r7, r5
 8003190:	2205      	movs	r2, #5
 8003192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003196:	4850      	ldr	r0, [pc, #320]	; (80032d8 <_svfiprintf_r+0x1dc>)
 8003198:	f7fd f852 	bl	8000240 <memchr>
 800319c:	9b04      	ldr	r3, [sp, #16]
 800319e:	b9d0      	cbnz	r0, 80031d6 <_svfiprintf_r+0xda>
 80031a0:	06d9      	lsls	r1, r3, #27
 80031a2:	bf44      	itt	mi
 80031a4:	2220      	movmi	r2, #32
 80031a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031aa:	071a      	lsls	r2, r3, #28
 80031ac:	bf44      	itt	mi
 80031ae:	222b      	movmi	r2, #43	; 0x2b
 80031b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031b4:	782a      	ldrb	r2, [r5, #0]
 80031b6:	2a2a      	cmp	r2, #42	; 0x2a
 80031b8:	d015      	beq.n	80031e6 <_svfiprintf_r+0xea>
 80031ba:	9a07      	ldr	r2, [sp, #28]
 80031bc:	462f      	mov	r7, r5
 80031be:	2000      	movs	r0, #0
 80031c0:	250a      	movs	r5, #10
 80031c2:	4639      	mov	r1, r7
 80031c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031c8:	3b30      	subs	r3, #48	; 0x30
 80031ca:	2b09      	cmp	r3, #9
 80031cc:	d94d      	bls.n	800326a <_svfiprintf_r+0x16e>
 80031ce:	b1b8      	cbz	r0, 8003200 <_svfiprintf_r+0x104>
 80031d0:	e00f      	b.n	80031f2 <_svfiprintf_r+0xf6>
 80031d2:	462f      	mov	r7, r5
 80031d4:	e7b8      	b.n	8003148 <_svfiprintf_r+0x4c>
 80031d6:	4a40      	ldr	r2, [pc, #256]	; (80032d8 <_svfiprintf_r+0x1dc>)
 80031d8:	1a80      	subs	r0, r0, r2
 80031da:	fa0b f000 	lsl.w	r0, fp, r0
 80031de:	4318      	orrs	r0, r3
 80031e0:	9004      	str	r0, [sp, #16]
 80031e2:	463d      	mov	r5, r7
 80031e4:	e7d3      	b.n	800318e <_svfiprintf_r+0x92>
 80031e6:	9a03      	ldr	r2, [sp, #12]
 80031e8:	1d11      	adds	r1, r2, #4
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	9103      	str	r1, [sp, #12]
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	db01      	blt.n	80031f6 <_svfiprintf_r+0xfa>
 80031f2:	9207      	str	r2, [sp, #28]
 80031f4:	e004      	b.n	8003200 <_svfiprintf_r+0x104>
 80031f6:	4252      	negs	r2, r2
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	9207      	str	r2, [sp, #28]
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	783b      	ldrb	r3, [r7, #0]
 8003202:	2b2e      	cmp	r3, #46	; 0x2e
 8003204:	d10c      	bne.n	8003220 <_svfiprintf_r+0x124>
 8003206:	787b      	ldrb	r3, [r7, #1]
 8003208:	2b2a      	cmp	r3, #42	; 0x2a
 800320a:	d133      	bne.n	8003274 <_svfiprintf_r+0x178>
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9203      	str	r2, [sp, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	bfb8      	it	lt
 8003218:	f04f 33ff 	movlt.w	r3, #4294967295
 800321c:	3702      	adds	r7, #2
 800321e:	9305      	str	r3, [sp, #20]
 8003220:	4d2e      	ldr	r5, [pc, #184]	; (80032dc <_svfiprintf_r+0x1e0>)
 8003222:	7839      	ldrb	r1, [r7, #0]
 8003224:	2203      	movs	r2, #3
 8003226:	4628      	mov	r0, r5
 8003228:	f7fd f80a 	bl	8000240 <memchr>
 800322c:	b138      	cbz	r0, 800323e <_svfiprintf_r+0x142>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	1b40      	subs	r0, r0, r5
 8003232:	fa03 f000 	lsl.w	r0, r3, r0
 8003236:	9b04      	ldr	r3, [sp, #16]
 8003238:	4303      	orrs	r3, r0
 800323a:	3701      	adds	r7, #1
 800323c:	9304      	str	r3, [sp, #16]
 800323e:	7839      	ldrb	r1, [r7, #0]
 8003240:	4827      	ldr	r0, [pc, #156]	; (80032e0 <_svfiprintf_r+0x1e4>)
 8003242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003246:	2206      	movs	r2, #6
 8003248:	1c7e      	adds	r6, r7, #1
 800324a:	f7fc fff9 	bl	8000240 <memchr>
 800324e:	2800      	cmp	r0, #0
 8003250:	d038      	beq.n	80032c4 <_svfiprintf_r+0x1c8>
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <_svfiprintf_r+0x1e8>)
 8003254:	bb13      	cbnz	r3, 800329c <_svfiprintf_r+0x1a0>
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	3307      	adds	r3, #7
 800325a:	f023 0307 	bic.w	r3, r3, #7
 800325e:	3308      	adds	r3, #8
 8003260:	9303      	str	r3, [sp, #12]
 8003262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003264:	444b      	add	r3, r9
 8003266:	9309      	str	r3, [sp, #36]	; 0x24
 8003268:	e76d      	b.n	8003146 <_svfiprintf_r+0x4a>
 800326a:	fb05 3202 	mla	r2, r5, r2, r3
 800326e:	2001      	movs	r0, #1
 8003270:	460f      	mov	r7, r1
 8003272:	e7a6      	b.n	80031c2 <_svfiprintf_r+0xc6>
 8003274:	2300      	movs	r3, #0
 8003276:	3701      	adds	r7, #1
 8003278:	9305      	str	r3, [sp, #20]
 800327a:	4619      	mov	r1, r3
 800327c:	250a      	movs	r5, #10
 800327e:	4638      	mov	r0, r7
 8003280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003284:	3a30      	subs	r2, #48	; 0x30
 8003286:	2a09      	cmp	r2, #9
 8003288:	d903      	bls.n	8003292 <_svfiprintf_r+0x196>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0c8      	beq.n	8003220 <_svfiprintf_r+0x124>
 800328e:	9105      	str	r1, [sp, #20]
 8003290:	e7c6      	b.n	8003220 <_svfiprintf_r+0x124>
 8003292:	fb05 2101 	mla	r1, r5, r1, r2
 8003296:	2301      	movs	r3, #1
 8003298:	4607      	mov	r7, r0
 800329a:	e7f0      	b.n	800327e <_svfiprintf_r+0x182>
 800329c:	ab03      	add	r3, sp, #12
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	4622      	mov	r2, r4
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <_svfiprintf_r+0x1ec>)
 80032a4:	a904      	add	r1, sp, #16
 80032a6:	4640      	mov	r0, r8
 80032a8:	f3af 8000 	nop.w
 80032ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032b0:	4681      	mov	r9, r0
 80032b2:	d1d6      	bne.n	8003262 <_svfiprintf_r+0x166>
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	065b      	lsls	r3, r3, #25
 80032b8:	f53f af35 	bmi.w	8003126 <_svfiprintf_r+0x2a>
 80032bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032be:	b01d      	add	sp, #116	; 0x74
 80032c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c4:	ab03      	add	r3, sp, #12
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4622      	mov	r2, r4
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <_svfiprintf_r+0x1ec>)
 80032cc:	a904      	add	r1, sp, #16
 80032ce:	4640      	mov	r0, r8
 80032d0:	f000 f882 	bl	80033d8 <_printf_i>
 80032d4:	e7ea      	b.n	80032ac <_svfiprintf_r+0x1b0>
 80032d6:	bf00      	nop
 80032d8:	08003864 	.word	0x08003864
 80032dc:	0800386a 	.word	0x0800386a
 80032e0:	0800386e 	.word	0x0800386e
 80032e4:	00000000 	.word	0x00000000
 80032e8:	08003049 	.word	0x08003049

080032ec <_printf_common>:
 80032ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	4691      	mov	r9, r2
 80032f2:	461f      	mov	r7, r3
 80032f4:	688a      	ldr	r2, [r1, #8]
 80032f6:	690b      	ldr	r3, [r1, #16]
 80032f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bfb8      	it	lt
 8003300:	4613      	movlt	r3, r2
 8003302:	f8c9 3000 	str.w	r3, [r9]
 8003306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800330a:	4606      	mov	r6, r0
 800330c:	460c      	mov	r4, r1
 800330e:	b112      	cbz	r2, 8003316 <_printf_common+0x2a>
 8003310:	3301      	adds	r3, #1
 8003312:	f8c9 3000 	str.w	r3, [r9]
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	0699      	lsls	r1, r3, #26
 800331a:	bf42      	ittt	mi
 800331c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003320:	3302      	addmi	r3, #2
 8003322:	f8c9 3000 	strmi.w	r3, [r9]
 8003326:	6825      	ldr	r5, [r4, #0]
 8003328:	f015 0506 	ands.w	r5, r5, #6
 800332c:	d107      	bne.n	800333e <_printf_common+0x52>
 800332e:	f104 0a19 	add.w	sl, r4, #25
 8003332:	68e3      	ldr	r3, [r4, #12]
 8003334:	f8d9 2000 	ldr.w	r2, [r9]
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	42ab      	cmp	r3, r5
 800333c:	dc28      	bgt.n	8003390 <_printf_common+0xa4>
 800333e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	3300      	adds	r3, #0
 8003346:	bf18      	it	ne
 8003348:	2301      	movne	r3, #1
 800334a:	0692      	lsls	r2, r2, #26
 800334c:	d42d      	bmi.n	80033aa <_printf_common+0xbe>
 800334e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003352:	4639      	mov	r1, r7
 8003354:	4630      	mov	r0, r6
 8003356:	47c0      	blx	r8
 8003358:	3001      	adds	r0, #1
 800335a:	d020      	beq.n	800339e <_printf_common+0xb2>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	68e5      	ldr	r5, [r4, #12]
 8003360:	f8d9 2000 	ldr.w	r2, [r9]
 8003364:	f003 0306 	and.w	r3, r3, #6
 8003368:	2b04      	cmp	r3, #4
 800336a:	bf08      	it	eq
 800336c:	1aad      	subeq	r5, r5, r2
 800336e:	68a3      	ldr	r3, [r4, #8]
 8003370:	6922      	ldr	r2, [r4, #16]
 8003372:	bf0c      	ite	eq
 8003374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003378:	2500      	movne	r5, #0
 800337a:	4293      	cmp	r3, r2
 800337c:	bfc4      	itt	gt
 800337e:	1a9b      	subgt	r3, r3, r2
 8003380:	18ed      	addgt	r5, r5, r3
 8003382:	f04f 0900 	mov.w	r9, #0
 8003386:	341a      	adds	r4, #26
 8003388:	454d      	cmp	r5, r9
 800338a:	d11a      	bne.n	80033c2 <_printf_common+0xd6>
 800338c:	2000      	movs	r0, #0
 800338e:	e008      	b.n	80033a2 <_printf_common+0xb6>
 8003390:	2301      	movs	r3, #1
 8003392:	4652      	mov	r2, sl
 8003394:	4639      	mov	r1, r7
 8003396:	4630      	mov	r0, r6
 8003398:	47c0      	blx	r8
 800339a:	3001      	adds	r0, #1
 800339c:	d103      	bne.n	80033a6 <_printf_common+0xba>
 800339e:	f04f 30ff 	mov.w	r0, #4294967295
 80033a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a6:	3501      	adds	r5, #1
 80033a8:	e7c3      	b.n	8003332 <_printf_common+0x46>
 80033aa:	18e1      	adds	r1, r4, r3
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	2030      	movs	r0, #48	; 0x30
 80033b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033b4:	4422      	add	r2, r4
 80033b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033be:	3302      	adds	r3, #2
 80033c0:	e7c5      	b.n	800334e <_printf_common+0x62>
 80033c2:	2301      	movs	r3, #1
 80033c4:	4622      	mov	r2, r4
 80033c6:	4639      	mov	r1, r7
 80033c8:	4630      	mov	r0, r6
 80033ca:	47c0      	blx	r8
 80033cc:	3001      	adds	r0, #1
 80033ce:	d0e6      	beq.n	800339e <_printf_common+0xb2>
 80033d0:	f109 0901 	add.w	r9, r9, #1
 80033d4:	e7d8      	b.n	8003388 <_printf_common+0x9c>
	...

080033d8 <_printf_i>:
 80033d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80033e0:	460c      	mov	r4, r1
 80033e2:	7e09      	ldrb	r1, [r1, #24]
 80033e4:	b085      	sub	sp, #20
 80033e6:	296e      	cmp	r1, #110	; 0x6e
 80033e8:	4617      	mov	r7, r2
 80033ea:	4606      	mov	r6, r0
 80033ec:	4698      	mov	r8, r3
 80033ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033f0:	f000 80b3 	beq.w	800355a <_printf_i+0x182>
 80033f4:	d822      	bhi.n	800343c <_printf_i+0x64>
 80033f6:	2963      	cmp	r1, #99	; 0x63
 80033f8:	d036      	beq.n	8003468 <_printf_i+0x90>
 80033fa:	d80a      	bhi.n	8003412 <_printf_i+0x3a>
 80033fc:	2900      	cmp	r1, #0
 80033fe:	f000 80b9 	beq.w	8003574 <_printf_i+0x19c>
 8003402:	2958      	cmp	r1, #88	; 0x58
 8003404:	f000 8083 	beq.w	800350e <_printf_i+0x136>
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003410:	e032      	b.n	8003478 <_printf_i+0xa0>
 8003412:	2964      	cmp	r1, #100	; 0x64
 8003414:	d001      	beq.n	800341a <_printf_i+0x42>
 8003416:	2969      	cmp	r1, #105	; 0x69
 8003418:	d1f6      	bne.n	8003408 <_printf_i+0x30>
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	0605      	lsls	r5, r0, #24
 8003420:	f103 0104 	add.w	r1, r3, #4
 8003424:	d52a      	bpl.n	800347c <_printf_i+0xa4>
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6011      	str	r1, [r2, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	da03      	bge.n	8003436 <_printf_i+0x5e>
 800342e:	222d      	movs	r2, #45	; 0x2d
 8003430:	425b      	negs	r3, r3
 8003432:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003436:	486f      	ldr	r0, [pc, #444]	; (80035f4 <_printf_i+0x21c>)
 8003438:	220a      	movs	r2, #10
 800343a:	e039      	b.n	80034b0 <_printf_i+0xd8>
 800343c:	2973      	cmp	r1, #115	; 0x73
 800343e:	f000 809d 	beq.w	800357c <_printf_i+0x1a4>
 8003442:	d808      	bhi.n	8003456 <_printf_i+0x7e>
 8003444:	296f      	cmp	r1, #111	; 0x6f
 8003446:	d020      	beq.n	800348a <_printf_i+0xb2>
 8003448:	2970      	cmp	r1, #112	; 0x70
 800344a:	d1dd      	bne.n	8003408 <_printf_i+0x30>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	e003      	b.n	800345e <_printf_i+0x86>
 8003456:	2975      	cmp	r1, #117	; 0x75
 8003458:	d017      	beq.n	800348a <_printf_i+0xb2>
 800345a:	2978      	cmp	r1, #120	; 0x78
 800345c:	d1d4      	bne.n	8003408 <_printf_i+0x30>
 800345e:	2378      	movs	r3, #120	; 0x78
 8003460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003464:	4864      	ldr	r0, [pc, #400]	; (80035f8 <_printf_i+0x220>)
 8003466:	e055      	b.n	8003514 <_printf_i+0x13c>
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	1d19      	adds	r1, r3, #4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003478:	2301      	movs	r3, #1
 800347a:	e08c      	b.n	8003596 <_printf_i+0x1be>
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6011      	str	r1, [r2, #0]
 8003480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003484:	bf18      	it	ne
 8003486:	b21b      	sxthne	r3, r3
 8003488:	e7cf      	b.n	800342a <_printf_i+0x52>
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	6825      	ldr	r5, [r4, #0]
 800348e:	1d18      	adds	r0, r3, #4
 8003490:	6010      	str	r0, [r2, #0]
 8003492:	0628      	lsls	r0, r5, #24
 8003494:	d501      	bpl.n	800349a <_printf_i+0xc2>
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e002      	b.n	80034a0 <_printf_i+0xc8>
 800349a:	0668      	lsls	r0, r5, #25
 800349c:	d5fb      	bpl.n	8003496 <_printf_i+0xbe>
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	4854      	ldr	r0, [pc, #336]	; (80035f4 <_printf_i+0x21c>)
 80034a2:	296f      	cmp	r1, #111	; 0x6f
 80034a4:	bf14      	ite	ne
 80034a6:	220a      	movne	r2, #10
 80034a8:	2208      	moveq	r2, #8
 80034aa:	2100      	movs	r1, #0
 80034ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034b0:	6865      	ldr	r5, [r4, #4]
 80034b2:	60a5      	str	r5, [r4, #8]
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	f2c0 8095 	blt.w	80035e4 <_printf_i+0x20c>
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	f021 0104 	bic.w	r1, r1, #4
 80034c0:	6021      	str	r1, [r4, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d13d      	bne.n	8003542 <_printf_i+0x16a>
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	f040 808e 	bne.w	80035e8 <_printf_i+0x210>
 80034cc:	4665      	mov	r5, ip
 80034ce:	2a08      	cmp	r2, #8
 80034d0:	d10b      	bne.n	80034ea <_printf_i+0x112>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07db      	lsls	r3, r3, #31
 80034d6:	d508      	bpl.n	80034ea <_printf_i+0x112>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	6862      	ldr	r2, [r4, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	bfde      	ittt	le
 80034e0:	2330      	movle	r3, #48	; 0x30
 80034e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034ea:	ebac 0305 	sub.w	r3, ip, r5
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	f8cd 8000 	str.w	r8, [sp]
 80034f4:	463b      	mov	r3, r7
 80034f6:	aa03      	add	r2, sp, #12
 80034f8:	4621      	mov	r1, r4
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7ff fef6 	bl	80032ec <_printf_common>
 8003500:	3001      	adds	r0, #1
 8003502:	d14d      	bne.n	80035a0 <_printf_i+0x1c8>
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	b005      	add	sp, #20
 800350a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800350e:	4839      	ldr	r0, [pc, #228]	; (80035f4 <_printf_i+0x21c>)
 8003510:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	1d1d      	adds	r5, r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6015      	str	r5, [r2, #0]
 800351e:	060a      	lsls	r2, r1, #24
 8003520:	d50b      	bpl.n	800353a <_printf_i+0x162>
 8003522:	07ca      	lsls	r2, r1, #31
 8003524:	bf44      	itt	mi
 8003526:	f041 0120 	orrmi.w	r1, r1, #32
 800352a:	6021      	strmi	r1, [r4, #0]
 800352c:	b91b      	cbnz	r3, 8003536 <_printf_i+0x15e>
 800352e:	6822      	ldr	r2, [r4, #0]
 8003530:	f022 0220 	bic.w	r2, r2, #32
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	2210      	movs	r2, #16
 8003538:	e7b7      	b.n	80034aa <_printf_i+0xd2>
 800353a:	064d      	lsls	r5, r1, #25
 800353c:	bf48      	it	mi
 800353e:	b29b      	uxthmi	r3, r3
 8003540:	e7ef      	b.n	8003522 <_printf_i+0x14a>
 8003542:	4665      	mov	r5, ip
 8003544:	fbb3 f1f2 	udiv	r1, r3, r2
 8003548:	fb02 3311 	mls	r3, r2, r1, r3
 800354c:	5cc3      	ldrb	r3, [r0, r3]
 800354e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003552:	460b      	mov	r3, r1
 8003554:	2900      	cmp	r1, #0
 8003556:	d1f5      	bne.n	8003544 <_printf_i+0x16c>
 8003558:	e7b9      	b.n	80034ce <_printf_i+0xf6>
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	6825      	ldr	r5, [r4, #0]
 800355e:	6961      	ldr	r1, [r4, #20]
 8003560:	1d18      	adds	r0, r3, #4
 8003562:	6010      	str	r0, [r2, #0]
 8003564:	0628      	lsls	r0, r5, #24
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	d501      	bpl.n	800356e <_printf_i+0x196>
 800356a:	6019      	str	r1, [r3, #0]
 800356c:	e002      	b.n	8003574 <_printf_i+0x19c>
 800356e:	066a      	lsls	r2, r5, #25
 8003570:	d5fb      	bpl.n	800356a <_printf_i+0x192>
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	6123      	str	r3, [r4, #16]
 8003578:	4665      	mov	r5, ip
 800357a:	e7b9      	b.n	80034f0 <_printf_i+0x118>
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	1d19      	adds	r1, r3, #4
 8003580:	6011      	str	r1, [r2, #0]
 8003582:	681d      	ldr	r5, [r3, #0]
 8003584:	6862      	ldr	r2, [r4, #4]
 8003586:	2100      	movs	r1, #0
 8003588:	4628      	mov	r0, r5
 800358a:	f7fc fe59 	bl	8000240 <memchr>
 800358e:	b108      	cbz	r0, 8003594 <_printf_i+0x1bc>
 8003590:	1b40      	subs	r0, r0, r5
 8003592:	6060      	str	r0, [r4, #4]
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	6123      	str	r3, [r4, #16]
 8003598:	2300      	movs	r3, #0
 800359a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800359e:	e7a7      	b.n	80034f0 <_printf_i+0x118>
 80035a0:	6923      	ldr	r3, [r4, #16]
 80035a2:	462a      	mov	r2, r5
 80035a4:	4639      	mov	r1, r7
 80035a6:	4630      	mov	r0, r6
 80035a8:	47c0      	blx	r8
 80035aa:	3001      	adds	r0, #1
 80035ac:	d0aa      	beq.n	8003504 <_printf_i+0x12c>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	079b      	lsls	r3, r3, #30
 80035b2:	d413      	bmi.n	80035dc <_printf_i+0x204>
 80035b4:	68e0      	ldr	r0, [r4, #12]
 80035b6:	9b03      	ldr	r3, [sp, #12]
 80035b8:	4298      	cmp	r0, r3
 80035ba:	bfb8      	it	lt
 80035bc:	4618      	movlt	r0, r3
 80035be:	e7a3      	b.n	8003508 <_printf_i+0x130>
 80035c0:	2301      	movs	r3, #1
 80035c2:	464a      	mov	r2, r9
 80035c4:	4639      	mov	r1, r7
 80035c6:	4630      	mov	r0, r6
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d09a      	beq.n	8003504 <_printf_i+0x12c>
 80035ce:	3501      	adds	r5, #1
 80035d0:	68e3      	ldr	r3, [r4, #12]
 80035d2:	9a03      	ldr	r2, [sp, #12]
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	42ab      	cmp	r3, r5
 80035d8:	dcf2      	bgt.n	80035c0 <_printf_i+0x1e8>
 80035da:	e7eb      	b.n	80035b4 <_printf_i+0x1dc>
 80035dc:	2500      	movs	r5, #0
 80035de:	f104 0919 	add.w	r9, r4, #25
 80035e2:	e7f5      	b.n	80035d0 <_printf_i+0x1f8>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ac      	bne.n	8003542 <_printf_i+0x16a>
 80035e8:	7803      	ldrb	r3, [r0, #0]
 80035ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f2:	e76c      	b.n	80034ce <_printf_i+0xf6>
 80035f4:	08003875 	.word	0x08003875
 80035f8:	08003886 	.word	0x08003886

080035fc <memcpy>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	1e43      	subs	r3, r0, #1
 8003600:	440a      	add	r2, r1
 8003602:	4291      	cmp	r1, r2
 8003604:	d100      	bne.n	8003608 <memcpy+0xc>
 8003606:	bd10      	pop	{r4, pc}
 8003608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800360c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003610:	e7f7      	b.n	8003602 <memcpy+0x6>

08003612 <memmove>:
 8003612:	4288      	cmp	r0, r1
 8003614:	b510      	push	{r4, lr}
 8003616:	eb01 0302 	add.w	r3, r1, r2
 800361a:	d807      	bhi.n	800362c <memmove+0x1a>
 800361c:	1e42      	subs	r2, r0, #1
 800361e:	4299      	cmp	r1, r3
 8003620:	d00a      	beq.n	8003638 <memmove+0x26>
 8003622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003626:	f802 4f01 	strb.w	r4, [r2, #1]!
 800362a:	e7f8      	b.n	800361e <memmove+0xc>
 800362c:	4283      	cmp	r3, r0
 800362e:	d9f5      	bls.n	800361c <memmove+0xa>
 8003630:	1881      	adds	r1, r0, r2
 8003632:	1ad2      	subs	r2, r2, r3
 8003634:	42d3      	cmn	r3, r2
 8003636:	d100      	bne.n	800363a <memmove+0x28>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800363e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003642:	e7f7      	b.n	8003634 <memmove+0x22>

08003644 <_free_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4605      	mov	r5, r0
 8003648:	2900      	cmp	r1, #0
 800364a:	d045      	beq.n	80036d8 <_free_r+0x94>
 800364c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003650:	1f0c      	subs	r4, r1, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bfb8      	it	lt
 8003656:	18e4      	addlt	r4, r4, r3
 8003658:	f000 f8d2 	bl	8003800 <__malloc_lock>
 800365c:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <_free_r+0x98>)
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	4610      	mov	r0, r2
 8003662:	b933      	cbnz	r3, 8003672 <_free_r+0x2e>
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	6014      	str	r4, [r2, #0]
 8003668:	4628      	mov	r0, r5
 800366a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800366e:	f000 b8c8 	b.w	8003802 <__malloc_unlock>
 8003672:	42a3      	cmp	r3, r4
 8003674:	d90c      	bls.n	8003690 <_free_r+0x4c>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	1862      	adds	r2, r4, r1
 800367a:	4293      	cmp	r3, r2
 800367c:	bf04      	itt	eq
 800367e:	681a      	ldreq	r2, [r3, #0]
 8003680:	685b      	ldreq	r3, [r3, #4]
 8003682:	6063      	str	r3, [r4, #4]
 8003684:	bf04      	itt	eq
 8003686:	1852      	addeq	r2, r2, r1
 8003688:	6022      	streq	r2, [r4, #0]
 800368a:	6004      	str	r4, [r0, #0]
 800368c:	e7ec      	b.n	8003668 <_free_r+0x24>
 800368e:	4613      	mov	r3, r2
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	b10a      	cbz	r2, 8003698 <_free_r+0x54>
 8003694:	42a2      	cmp	r2, r4
 8003696:	d9fa      	bls.n	800368e <_free_r+0x4a>
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	1858      	adds	r0, r3, r1
 800369c:	42a0      	cmp	r0, r4
 800369e:	d10b      	bne.n	80036b8 <_free_r+0x74>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	4401      	add	r1, r0
 80036a4:	1858      	adds	r0, r3, r1
 80036a6:	4282      	cmp	r2, r0
 80036a8:	6019      	str	r1, [r3, #0]
 80036aa:	d1dd      	bne.n	8003668 <_free_r+0x24>
 80036ac:	6810      	ldr	r0, [r2, #0]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	4401      	add	r1, r0
 80036b4:	6019      	str	r1, [r3, #0]
 80036b6:	e7d7      	b.n	8003668 <_free_r+0x24>
 80036b8:	d902      	bls.n	80036c0 <_free_r+0x7c>
 80036ba:	230c      	movs	r3, #12
 80036bc:	602b      	str	r3, [r5, #0]
 80036be:	e7d3      	b.n	8003668 <_free_r+0x24>
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	1821      	adds	r1, r4, r0
 80036c4:	428a      	cmp	r2, r1
 80036c6:	bf04      	itt	eq
 80036c8:	6811      	ldreq	r1, [r2, #0]
 80036ca:	6852      	ldreq	r2, [r2, #4]
 80036cc:	6062      	str	r2, [r4, #4]
 80036ce:	bf04      	itt	eq
 80036d0:	1809      	addeq	r1, r1, r0
 80036d2:	6021      	streq	r1, [r4, #0]
 80036d4:	605c      	str	r4, [r3, #4]
 80036d6:	e7c7      	b.n	8003668 <_free_r+0x24>
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	bf00      	nop
 80036dc:	20000090 	.word	0x20000090

080036e0 <_malloc_r>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	1ccd      	adds	r5, r1, #3
 80036e4:	f025 0503 	bic.w	r5, r5, #3
 80036e8:	3508      	adds	r5, #8
 80036ea:	2d0c      	cmp	r5, #12
 80036ec:	bf38      	it	cc
 80036ee:	250c      	movcc	r5, #12
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	4606      	mov	r6, r0
 80036f4:	db01      	blt.n	80036fa <_malloc_r+0x1a>
 80036f6:	42a9      	cmp	r1, r5
 80036f8:	d903      	bls.n	8003702 <_malloc_r+0x22>
 80036fa:	230c      	movs	r3, #12
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	2000      	movs	r0, #0
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	f000 f87d 	bl	8003800 <__malloc_lock>
 8003706:	4a21      	ldr	r2, [pc, #132]	; (800378c <_malloc_r+0xac>)
 8003708:	6814      	ldr	r4, [r2, #0]
 800370a:	4621      	mov	r1, r4
 800370c:	b991      	cbnz	r1, 8003734 <_malloc_r+0x54>
 800370e:	4c20      	ldr	r4, [pc, #128]	; (8003790 <_malloc_r+0xb0>)
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	b91b      	cbnz	r3, 800371c <_malloc_r+0x3c>
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f863 	bl	80037e0 <_sbrk_r>
 800371a:	6020      	str	r0, [r4, #0]
 800371c:	4629      	mov	r1, r5
 800371e:	4630      	mov	r0, r6
 8003720:	f000 f85e 	bl	80037e0 <_sbrk_r>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d124      	bne.n	8003772 <_malloc_r+0x92>
 8003728:	230c      	movs	r3, #12
 800372a:	6033      	str	r3, [r6, #0]
 800372c:	4630      	mov	r0, r6
 800372e:	f000 f868 	bl	8003802 <__malloc_unlock>
 8003732:	e7e4      	b.n	80036fe <_malloc_r+0x1e>
 8003734:	680b      	ldr	r3, [r1, #0]
 8003736:	1b5b      	subs	r3, r3, r5
 8003738:	d418      	bmi.n	800376c <_malloc_r+0x8c>
 800373a:	2b0b      	cmp	r3, #11
 800373c:	d90f      	bls.n	800375e <_malloc_r+0x7e>
 800373e:	600b      	str	r3, [r1, #0]
 8003740:	50cd      	str	r5, [r1, r3]
 8003742:	18cc      	adds	r4, r1, r3
 8003744:	4630      	mov	r0, r6
 8003746:	f000 f85c 	bl	8003802 <__malloc_unlock>
 800374a:	f104 000b 	add.w	r0, r4, #11
 800374e:	1d23      	adds	r3, r4, #4
 8003750:	f020 0007 	bic.w	r0, r0, #7
 8003754:	1ac3      	subs	r3, r0, r3
 8003756:	d0d3      	beq.n	8003700 <_malloc_r+0x20>
 8003758:	425a      	negs	r2, r3
 800375a:	50e2      	str	r2, [r4, r3]
 800375c:	e7d0      	b.n	8003700 <_malloc_r+0x20>
 800375e:	428c      	cmp	r4, r1
 8003760:	684b      	ldr	r3, [r1, #4]
 8003762:	bf16      	itet	ne
 8003764:	6063      	strne	r3, [r4, #4]
 8003766:	6013      	streq	r3, [r2, #0]
 8003768:	460c      	movne	r4, r1
 800376a:	e7eb      	b.n	8003744 <_malloc_r+0x64>
 800376c:	460c      	mov	r4, r1
 800376e:	6849      	ldr	r1, [r1, #4]
 8003770:	e7cc      	b.n	800370c <_malloc_r+0x2c>
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d005      	beq.n	8003788 <_malloc_r+0xa8>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4630      	mov	r0, r6
 8003780:	f000 f82e 	bl	80037e0 <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d0cf      	beq.n	8003728 <_malloc_r+0x48>
 8003788:	6025      	str	r5, [r4, #0]
 800378a:	e7db      	b.n	8003744 <_malloc_r+0x64>
 800378c:	20000090 	.word	0x20000090
 8003790:	20000094 	.word	0x20000094

08003794 <_realloc_r>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	4607      	mov	r7, r0
 8003798:	4614      	mov	r4, r2
 800379a:	460e      	mov	r6, r1
 800379c:	b921      	cbnz	r1, 80037a8 <_realloc_r+0x14>
 800379e:	4611      	mov	r1, r2
 80037a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037a4:	f7ff bf9c 	b.w	80036e0 <_malloc_r>
 80037a8:	b922      	cbnz	r2, 80037b4 <_realloc_r+0x20>
 80037aa:	f7ff ff4b 	bl	8003644 <_free_r>
 80037ae:	4625      	mov	r5, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b4:	f000 f826 	bl	8003804 <_malloc_usable_size_r>
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d20f      	bcs.n	80037dc <_realloc_r+0x48>
 80037bc:	4621      	mov	r1, r4
 80037be:	4638      	mov	r0, r7
 80037c0:	f7ff ff8e 	bl	80036e0 <_malloc_r>
 80037c4:	4605      	mov	r5, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0f2      	beq.n	80037b0 <_realloc_r+0x1c>
 80037ca:	4631      	mov	r1, r6
 80037cc:	4622      	mov	r2, r4
 80037ce:	f7ff ff15 	bl	80035fc <memcpy>
 80037d2:	4631      	mov	r1, r6
 80037d4:	4638      	mov	r0, r7
 80037d6:	f7ff ff35 	bl	8003644 <_free_r>
 80037da:	e7e9      	b.n	80037b0 <_realloc_r+0x1c>
 80037dc:	4635      	mov	r5, r6
 80037de:	e7e7      	b.n	80037b0 <_realloc_r+0x1c>

080037e0 <_sbrk_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4c06      	ldr	r4, [pc, #24]	; (80037fc <_sbrk_r+0x1c>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	4605      	mov	r5, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	f7fd f926 	bl	8000a3c <_sbrk>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_sbrk_r+0x1a>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_sbrk_r+0x1a>
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	2000015c 	.word	0x2000015c

08003800 <__malloc_lock>:
 8003800:	4770      	bx	lr

08003802 <__malloc_unlock>:
 8003802:	4770      	bx	lr

08003804 <_malloc_usable_size_r>:
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f18      	subs	r0, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfbc      	itt	lt
 800380e:	580b      	ldrlt	r3, [r1, r0]
 8003810:	18c0      	addlt	r0, r0, r3
 8003812:	4770      	bx	lr

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
