
F767ZIV1_Priority_inheritance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006044  08006044  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800604c  0800604c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004090  20000010  08006064  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a0  08006064  000240a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aee  00000000  00000000  0003451e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  000381c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000288d4  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da30  00000000  00000000  00061afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010159b  00000000  00000000  0006f52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170ac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  00170b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08005dbc 	.word	0x08005dbc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08005dbc 	.word	0x08005dbc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000002c 	.word	0x2000002c
 8000570:	20000080 	.word	0x20000080

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b098      	sub	sp, #96	; 0x60
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fc3c 	bl	8000df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f859 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f903 	bl	800078c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f8d1 	bl	800072c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of sharedFunctionMutex */
  osMutexDef(sharedFunctionMutex);
 800058a:	2300      	movs	r3, #0
 800058c:	65bb      	str	r3, [r7, #88]	; 0x58
 800058e:	2300      	movs	r3, #0
 8000590:	65fb      	str	r3, [r7, #92]	; 0x5c
  sharedFunctionMutexHandle = osMutexCreate(osMutex(sharedFunctionMutex));
 8000592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ffe5 	bl	8003566 <osMutexCreate>
 800059c:	4602      	mov	r2, r0
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <main+0xa4>)
 80005a0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of toggleRed */
  osThreadDef(toggleRed, toggleRedHook, osPriorityHigh, 0, 128);
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <main+0xa8>)
 80005a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleRedHandle = osThreadCreate(osThread(toggleRed), NULL);
 80005b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 ff86 	bl	80034ce <osThreadCreate>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <main+0xac>)
 80005c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of toggleGreen */
  osThreadDef(toggleGreen, toggleGreenHook, osPriorityNormal, 0, 128);
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <main+0xb0>)
 80005ca:	f107 0420 	add.w	r4, r7, #32
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleGreenHandle = osThreadCreate(osThread(toggleGreen), NULL);
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 ff73 	bl	80034ce <osThreadCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <main+0xb4>)
 80005ec:	601a      	str	r2, [r3, #0]

  /* definition and creation of toggleYellow */
  osThreadDef(toggleYellow, toggleYellowHook, osPriorityAboveNormal, 0, 128);
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <main+0xb8>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleYellowHandle = osThreadCreate(osThread(toggleYellow), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff62 	bl	80034ce <osThreadCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <main+0xbc>)
 800060e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f002 ff56 	bl	80034c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0xa0>
 8000616:	bf00      	nop
 8000618:	20003fcc 	.word	0x20003fcc
 800061c:	08005de0 	.word	0x08005de0
 8000620:	20004054 	.word	0x20004054
 8000624:	08005e08 	.word	0x08005e08
 8000628:	20004058 	.word	0x20004058
 800062c:	08005e34 	.word	0x08005e34
 8000630:	20004050 	.word	0x20004050

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0b8      	sub	sp, #224	; 0xe0
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fbb1 	bl	8005daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2290      	movs	r2, #144	; 0x90
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fba2 	bl	8005daa <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <SystemClock_Config+0xf0>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a2e      	ldr	r2, [pc, #184]	; (8000724 <SystemClock_Config+0xf0>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <SystemClock_Config+0xf0>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xf4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <SystemClock_Config+0xf4>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xf4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe8a 	bl	80013d0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006c2:	f000 fa73 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f91d 	bl	800192c <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f8:	f000 fa58 	bl	8000bac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb36 	bl	8001d7c <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000716:	f000 fa49 	bl	8000bac <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	37e0      	adds	r7, #224	; 0xe0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART3_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000770:	f002 f990 	bl	8002a94 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fa17 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20003fd0 	.word	0x20003fd0
 8000788:	40004800 	.word	0x40004800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a35      	ldr	r2, [pc, #212]	; (800087c <MX_GPIO_Init+0xf0>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_GPIO_Init+0xf0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0320 	and.w	r3, r3, #32
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0xf0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <MX_GPIO_Init+0xf0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a29      	ldr	r2, [pc, #164]	; (800087c <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_GPIO_Init+0xf0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a23      	ldr	r2, [pc, #140]	; (800087c <MX_GPIO_Init+0xf0>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EYellow_GPIO_Port, EYellow_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	481e      	ldr	r0, [pc, #120]	; (8000880 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fdae 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EBlue_Pin|ERed_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2109      	movs	r1, #9
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_GPIO_Init+0xf8>)
 8000812:	f000 fda9 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0xfc>)
 800081c:	f000 fda4 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EYellow_Pin */
  GPIO_InitStruct.Pin = EYellow_Pin;
 8000820:	2308      	movs	r3, #8
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EYellow_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0xf4>)
 8000838:	f000 fbec 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : EBlue_Pin ERed_Pin */
  GPIO_InitStruct.Pin = EBlue_Pin|ERed_Pin;
 800083c:	2309      	movs	r3, #9
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xf8>)
 8000854:	f000 fbde 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : EGreen_Pin */
  GPIO_InitStruct.Pin = EGreen_Pin;
 8000858:	2308      	movs	r3, #8
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EGreen_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_GPIO_Init+0xfc>)
 8000870:	f000 fbd0 	bl	8001014 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40021400 	.word	0x40021400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020000 	.word	0x40020000

0800088c <toggleRedHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_toggleRedHook */
void toggleRedHook(void const * argument)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b0aa      	sub	sp, #168	; 0xa8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint8_t tm1[50] = "RED: High: started and interrupted\n\r";
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <toggleRedHook+0xc4>)
 8000896:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800089a:	461d      	mov	r5, r3
 800089c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a8:	6020      	str	r0, [r4, #0]
 80008aa:	3404      	adds	r4, #4
 80008ac:	7021      	strb	r1, [r4, #0]
 80008ae:	f107 0399 	add.w	r3, r7, #153	; 0x99
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	731a      	strb	r2, [r3, #12]
	uint8_t tm2[50] = "RED: High: competing for CS\n\r";
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <toggleRedHook+0xc8>)
 80008be:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008c2:	461d      	mov	r5, r3
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008cc:	c407      	stmia	r4!, {r0, r1, r2}
 80008ce:	8023      	strh	r3, [r4, #0]
 80008d0:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
	uint8_t cm[50] =  "RED: High: acquired critical section\n\r";
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <toggleRedHook+0xcc>)
 80008e2:	f107 040c 	add.w	r4, r7, #12
 80008e6:	461d      	mov	r5, r3
 80008e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008f4:	6020      	str	r0, [r4, #0]
 80008f6:	3404      	adds	r4, #4
 80008f8:	8021      	strh	r1, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c0b      	lsrs	r3, r1, #16
 80008fe:	7023      	strb	r3, [r4, #0]
 8000900:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	f8c3 2007 	str.w	r2, [r3, #7]

	HAL_UART_Transmit(&huart3, tm1, sizeof(tm1), 100);
 800090e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	2232      	movs	r2, #50	; 0x32
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <toggleRedHook+0xd0>)
 8000918:	f002 f90a 	bl	8002b30 <HAL_UART_Transmit>
	/* Emulate task interruption */
	vTaskDelay(500);
 800091c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000920:	f003 feec 	bl	80046fc <vTaskDelay>
	/* Resume execution and compete for the Critical Section (CS) */
	HAL_UART_Transmit(&huart3, tm2, sizeof(tm2), 100);
 8000924:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2232      	movs	r2, #50	; 0x32
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <toggleRedHook+0xd0>)
 800092e:	f002 f8ff 	bl	8002b30 <HAL_UART_Transmit>
	shared_function(cm,sizeof(cm),ERed_GPIO_Port, ERed_Pin);
 8000932:	f107 000c 	add.w	r0, r7, #12
 8000936:	2308      	movs	r3, #8
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <toggleRedHook+0xd4>)
 800093a:	2132      	movs	r1, #50	; 0x32
 800093c:	f000 f8da 	bl	8000af4 <shared_function>

	/*A NULL handle will cause the calling task to be suspended */
	vTaskSuspend(NULL);
 8000940:	2000      	movs	r0, #0
 8000942:	f003 ff11 	bl	8004768 <vTaskSuspend>
}
 8000946:	bf00      	nop
 8000948:	37a8      	adds	r7, #168	; 0xa8
 800094a:	46bd      	mov	sp, r7
 800094c:	bdb0      	pop	{r4, r5, r7, pc}
 800094e:	bf00      	nop
 8000950:	08005e50 	.word	0x08005e50
 8000954:	08005e84 	.word	0x08005e84
 8000958:	08005eb8 	.word	0x08005eb8
 800095c:	20003fd0 	.word	0x20003fd0
 8000960:	40020800 	.word	0x40020800

08000964 <toggleYellowHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleYellowHook */
void toggleYellowHook(void const * argument)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b0aa      	sub	sp, #168	; 0xa8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint8_t tm1[50] = "YELLOW: AboveNormal: started and interrupted\n\r";
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <toggleYellowHook+0xb4>)
 800096e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000972:	461d      	mov	r5, r3
 8000974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000980:	c407      	stmia	r4!, {r0, r1, r2}
 8000982:	8023      	strh	r3, [r4, #0]
 8000984:	3402      	adds	r4, #2
 8000986:	0c1b      	lsrs	r3, r3, #16
 8000988:	7023      	strb	r3, [r4, #0]
 800098a:	f107 03a3 	add.w	r3, r7, #163	; 0xa3
 800098e:	2200      	movs	r2, #0
 8000990:	801a      	strh	r2, [r3, #0]
 8000992:	709a      	strb	r2, [r3, #2]
	uint8_t tm2[50] = "YELLOW: AboveNormal: competing for CS\n\r";
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <toggleYellowHook+0xb8>)
 8000996:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800099a:	461d      	mov	r5, r3
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80009ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	811a      	strh	r2, [r3, #8]
	uint8_t cm[50] =  "YELLOW: AboveNormal: acquired critical section\n\r";
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <toggleYellowHook+0xbc>)
 80009ba:	f107 040c 	add.w	r4, r7, #12
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	7023      	strb	r3, [r4, #0]
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/* Task starts execution and is interrupted */
	HAL_UART_Transmit(&huart3, tm1, sizeof(tm1), 100);
 80009d6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	2232      	movs	r2, #50	; 0x32
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <toggleYellowHook+0xc0>)
 80009e0:	f002 f8a6 	bl	8002b30 <HAL_UART_Transmit>

	/* Emulate task interruption */
	vTaskDelay(700);
 80009e4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80009e8:	f003 fe88 	bl	80046fc <vTaskDelay>

	HAL_UART_Transmit(&huart3, tm2, sizeof(tm2), 100);
 80009ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2232      	movs	r2, #50	; 0x32
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <toggleYellowHook+0xc0>)
 80009f6:	f002 f89b 	bl	8002b30 <HAL_UART_Transmit>
	/* Compete for the CS */
	shared_function(cm, sizeof(cm), EYellow_GPIO_Port, EYellow_Pin);
 80009fa:	f107 000c 	add.w	r0, r7, #12
 80009fe:	2308      	movs	r3, #8
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <toggleYellowHook+0xc4>)
 8000a02:	2132      	movs	r1, #50	; 0x32
 8000a04:	f000 f876 	bl	8000af4 <shared_function>

	/*A NULL handle will cause the calling task to be suspended */
	vTaskSuspend(NULL);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f003 fead 	bl	8004768 <vTaskSuspend>
}
 8000a0e:	bf00      	nop
 8000a10:	37a8      	adds	r7, #168	; 0xa8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bdb0      	pop	{r4, r5, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08005eec 	.word	0x08005eec
 8000a1c:	08005f20 	.word	0x08005f20
 8000a20:	08005f54 	.word	0x08005f54
 8000a24:	20003fd0 	.word	0x20003fd0
 8000a28:	40021400 	.word	0x40021400

08000a2c <toggleGreenHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleGreenHook */
void toggleGreenHook(void const * argument)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b0aa      	sub	sp, #168	; 0xa8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	uint8_t tm1[50] = "GREEN: Normal: started\n\r";
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <toggleGreenHook+0xb4>)
 8000a36:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a44:	c403      	stmia	r4!, {r0, r1}
 8000a46:	7022      	strb	r2, [r4, #0]
 8000a48:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	761a      	strb	r2, [r3, #24]
	uint8_t tm2[50] = "GREEN: Normal: competing for CS\n\r";
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <toggleGreenHook+0xb8>)
 8000a5e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	8023      	strh	r3, [r4, #0]
 8000a70:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
	uint8_t cm[50] =  "GREEN: Normal: acquired critical section\n\r";
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <toggleGreenHook+0xbc>)
 8000a80:	f107 040c 	add.w	r4, r7, #12
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	c403      	stmia	r4!, {r0, r1}
 8000a94:	8022      	strh	r2, [r4, #0]
 8000a96:	3402      	adds	r4, #2
 8000a98:	0c13      	lsrs	r3, r2, #16
 8000a9a:	7023      	strb	r3, [r4, #0]
 8000a9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f8c3 2003 	str.w	r2, [r3, #3]

	/* The task is not interrupted and immediately competes for the CS */
	HAL_UART_Transmit(&huart3, tm1, sizeof(tm1), 100);
 8000aa8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	2232      	movs	r2, #50	; 0x32
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <toggleGreenHook+0xc0>)
 8000ab2:	f002 f83d 	bl	8002b30 <HAL_UART_Transmit>

	/* Competing for the Critical Section (CS) */
	HAL_UART_Transmit(&huart3, tm2, sizeof(tm2), 100);
 8000ab6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	2232      	movs	r2, #50	; 0x32
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <toggleGreenHook+0xc0>)
 8000ac0:	f002 f836 	bl	8002b30 <HAL_UART_Transmit>
	shared_function(cm,sizeof(cm),EGreen_GPIO_Port, EGreen_Pin);
 8000ac4:	f107 000c 	add.w	r0, r7, #12
 8000ac8:	2308      	movs	r3, #8
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <toggleGreenHook+0xc4>)
 8000acc:	2132      	movs	r1, #50	; 0x32
 8000ace:	f000 f811 	bl	8000af4 <shared_function>

	/*A NULL handle will cause the calling task to be suspended */
	vTaskSuspend(NULL);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f003 fe48 	bl	8004768 <vTaskSuspend>
}
 8000ad8:	bf00      	nop
 8000ada:	37a8      	adds	r7, #168	; 0xa8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae0:	08005f88 	.word	0x08005f88
 8000ae4:	08005fbc 	.word	0x08005fbc
 8000ae8:	08005ff0 	.word	0x08005ff0
 8000aec:	20003fd0 	.word	0x20003fd0
 8000af0:	40020000 	.word	0x40020000

08000af4 <shared_function>:





void shared_function(uint8_t* msg, int n, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	807b      	strh	r3, [r7, #2]
	osMutexWait(sharedFunctionMutexHandle, osWaitForever);
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <shared_function+0x84>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fd44 	bl	8003598 <osMutexWait>

	TickType_t start = xTaskGetTickCount();  // 4s delay
 8000b10:	f003 ffcc 	bl	8004aac <xTaskGetTickCount>
 8000b14:	6138      	str	r0, [r7, #16]

	do {
			HAL_GPIO_TogglePin(EBlue_GPIO_Port, EBlue_Pin);
 8000b16:	2101      	movs	r1, #1
 8000b18:	4818      	ldr	r0, [pc, #96]	; (8000b7c <shared_function+0x88>)
 8000b1a:	f000 fc3e 	bl	800139a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 fc39 	bl	800139a <HAL_GPIO_TogglePin>
			for(int i=0; i<=630000; i++);   // Approximate delay of 10 Hz
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e002      	b.n	8000b34 <shared_function+0x40>
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <shared_function+0x8c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	ddf8      	ble.n	8000b2e <shared_function+0x3a>
			HAL_UART_Transmit(&huart3, msg, n, 100);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	68f9      	ldr	r1, [r7, #12]
 8000b44:	480f      	ldr	r0, [pc, #60]	; (8000b84 <shared_function+0x90>)
 8000b46:	f001 fff3 	bl	8002b30 <HAL_UART_Transmit>
	} while((xTaskGetTickCount() - start) <= 4000);
 8000b4a:	f003 ffaf 	bl	8004aac <xTaskGetTickCount>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b58:	d9dd      	bls.n	8000b16 <shared_function+0x22>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fc01 	bl	8001368 <HAL_GPIO_WritePin>

	osMutexRelease(sharedFunctionMutexHandle);
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <shared_function+0x84>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fd62 	bl	8003634 <osMutexRelease>
}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20003fcc 	.word	0x20003fcc
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	00099cf0 	.word	0x00099cf0
 8000b84:	20003fd0 	.word	0x20003fd0

08000b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9a:	f000 f939 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40010000 	.word	0x40010000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <Error_Handler+0x6>

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	210f      	movs	r1, #15
 8000bee:	f06f 0001 	mvn.w	r0, #1
 8000bf2:	f000 f9e5 	bl	8000fc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0x7c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d128      	bne.n	8000c78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c74:	f000 f9ce 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40004800 	.word	0x40004800
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020c00 	.word	0x40020c00

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2019      	movs	r0, #25
 8000ca2:	f000 f98d 	bl	8000fc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ca6:	2019      	movs	r0, #25
 8000ca8:	f000 f9a6 	bl	8000ff8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_InitTick+0x9c>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_InitTick+0x9c>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_InitTick+0x9c>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f822 	bl	8001d18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cd4:	f001 f80c 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8000cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_InitTick+0xa0>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_InitTick+0xa8>)
 8000cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_InitTick+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_InitTick+0xa4>)
 8000d0a:	f001 fc5d 	bl	80025c8 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_InitTick+0xa4>)
 8000d16:	f001 fc8d 	bl	8002634 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	2000405c 	.word	0x2000405c
 8000d34:	40010000 	.word	0x40010000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d6a:	f001 fc8d 	bl	8002688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000405c 	.word	0x2000405c

08000d78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <SystemInit+0x28>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <SystemInit+0x28>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SystemInit+0x28>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d92:	609a      	str	r2, [r3, #8]
#endif
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000daa:	e003      	b.n	8000db4 <LoopCopyDataInit>

08000dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000db2:	3104      	adds	r1, #4

08000db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dbc:	d3f6      	bcc.n	8000dac <CopyDataInit>
  ldr  r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dc0:	e002      	b.n	8000dc8 <LoopFillZerobss>

08000dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc4:	f842 3b04 	str.w	r3, [r2], #4

08000dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dcc:	d3f9      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ffd3 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f004 ffbb 	bl	8005d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fbcd 	bl	8000574 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000de0:	08006054 	.word	0x08006054
  ldr  r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000dec:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000df0:	200040a0 	.word	0x200040a0

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>

08000df6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f8d5 	bl	8000faa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff ff43 	bl	8000c8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e06:	f7ff fed5 	bl	8000bb4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	2000409c 	.word	0x2000409c

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000409c 	.word	0x2000409c

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <__NVIC_SetPriorityGrouping+0x40>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x40>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	05fa0000 	.word	0x05fa0000

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff4c 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd2:	f7ff ff61 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	6978      	ldr	r0, [r7, #20]
 8000fde:	f7ff ffb1 	bl	8000f44 <NVIC_EncodePriority>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff80 	bl	8000ef0 <__NVIC_SetPriority>
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff54 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e175      	b.n	8001320 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8164 	bne.w	800131a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d00b      	beq.n	8001072 <HAL_GPIO_Init+0x5e>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001066:	2b11      	cmp	r3, #17
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b12      	cmp	r3, #18
 8001070:	d130      	bne.n	80010d4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 0201 	and.w	r2, r3, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x100>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b12      	cmp	r3, #18
 8001112:	d123      	bne.n	800115c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	69b9      	ldr	r1, [r7, #24]
 8001158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0203 	and.w	r2, r3, #3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80be 	beq.w	800131a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a64      	ldr	r2, [pc, #400]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b62      	ldr	r3, [pc, #392]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011b6:	4a60      	ldr	r2, [pc, #384]	; (8001338 <HAL_GPIO_Init+0x324>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a57      	ldr	r2, [pc, #348]	; (800133c <HAL_GPIO_Init+0x328>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d037      	beq.n	8001252 <HAL_GPIO_Init+0x23e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a56      	ldr	r2, [pc, #344]	; (8001340 <HAL_GPIO_Init+0x32c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d031      	beq.n	800124e <HAL_GPIO_Init+0x23a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a55      	ldr	r2, [pc, #340]	; (8001344 <HAL_GPIO_Init+0x330>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x236>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_GPIO_Init+0x334>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x232>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a53      	ldr	r2, [pc, #332]	; (800134c <HAL_GPIO_Init+0x338>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x22e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x33c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x22a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x340>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x344>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x348>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x34c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x21a>
 800122a:	2309      	movs	r3, #9
 800122c:	e012      	b.n	8001254 <HAL_GPIO_Init+0x240>
 800122e:	230a      	movs	r3, #10
 8001230:	e010      	b.n	8001254 <HAL_GPIO_Init+0x240>
 8001232:	2308      	movs	r3, #8
 8001234:	e00e      	b.n	8001254 <HAL_GPIO_Init+0x240>
 8001236:	2307      	movs	r3, #7
 8001238:	e00c      	b.n	8001254 <HAL_GPIO_Init+0x240>
 800123a:	2306      	movs	r3, #6
 800123c:	e00a      	b.n	8001254 <HAL_GPIO_Init+0x240>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x240>
 8001242:	2304      	movs	r3, #4
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x240>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x240>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x240>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x240>
 8001252:	2300      	movs	r3, #0
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001264:	4934      	ldr	r1, [pc, #208]	; (8001338 <HAL_GPIO_Init+0x324>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_GPIO_Init+0x350>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001296:	4a33      	ldr	r2, [pc, #204]	; (8001364 <HAL_GPIO_Init+0x350>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <HAL_GPIO_Init+0x350>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c0:	4a28      	ldr	r2, [pc, #160]	; (8001364 <HAL_GPIO_Init+0x350>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_GPIO_Init+0x350>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <HAL_GPIO_Init+0x350>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_GPIO_Init+0x350>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <HAL_GPIO_Init+0x350>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	f67f ae86 	bls.w	8001034 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001328:	bf00      	nop
 800132a:	3724      	adds	r7, #36	; 0x24
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40021c00 	.word	0x40021c00
 800135c:	40022000 	.word	0x40022000
 8001360:	40022400 	.word	0x40022400
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e29b      	b.n	800191e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8087 	beq.w	8001502 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f4:	4b96      	ldr	r3, [pc, #600]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d00c      	beq.n	800141a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001400:	4b93      	ldr	r3, [pc, #588]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d112      	bne.n	8001432 <HAL_RCC_OscConfig+0x62>
 800140c:	4b90      	ldr	r3, [pc, #576]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001418:	d10b      	bne.n	8001432 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d06c      	beq.n	8001500 <HAL_RCC_OscConfig+0x130>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d168      	bne.n	8001500 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e275      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x7a>
 800143c:	4b84      	ldr	r3, [pc, #528]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a83      	ldr	r2, [pc, #524]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e02e      	b.n	80014a8 <HAL_RCC_OscConfig+0xd8>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x9c>
 8001452:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7e      	ldr	r2, [pc, #504]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7b      	ldr	r2, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xd8>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0xc0>
 8001476:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a75      	ldr	r2, [pc, #468]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a72      	ldr	r2, [pc, #456]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xd8>
 8001490:	4b6f      	ldr	r3, [pc, #444]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a6e      	ldr	r2, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6b      	ldr	r2, [pc, #428]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcc2 	bl	8000e38 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcbe 	bl	8000e38 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e229      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b61      	ldr	r3, [pc, #388]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcae 	bl	8000e38 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcaa 	bl	8000e38 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e215      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b57      	ldr	r3, [pc, #348]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x110>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d069      	beq.n	80015e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x190>
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x17a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1e9      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	493d      	ldr	r1, [pc, #244]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e040      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fc60 	bl	8000e38 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fc5c 	bl	8000e38 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1c7      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4929      	ldr	r1, [pc, #164]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
 80015ae:	e018      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc3c 	bl	8000e38 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc38 	bl	8000e38 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1a3      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d038      	beq.n	8001660 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fc19 	bl	8000e38 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fc15 	bl	8000e38 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e180      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x23a>
 8001628:	e01a      	b.n	8001660 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x280>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff fbff 	bl	8000e38 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff fbfb 	bl	8000e38 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d903      	bls.n	8001654 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e166      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
 8001650:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ee      	bne.n	800163e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a4 	beq.w	80017b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a88      	ldr	r2, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001692:	2301      	movs	r3, #1
 8001694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001696:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <HAL_RCC_OscConfig+0x4d4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016a2:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7f      	ldr	r2, [pc, #508]	; (80018a4 <HAL_RCC_OscConfig+0x4d4>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fbc3 	bl	8000e38 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7ff fbbf 	bl	8000e38 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	; 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e12a      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <HAL_RCC_OscConfig+0x4d4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x31a>
 80016dc:	4b70      	ldr	r3, [pc, #448]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	4a6f      	ldr	r2, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	; 0x70
 80016e8:	e02d      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x33c>
 80016f2:	4b6b      	ldr	r3, [pc, #428]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	4a6a      	ldr	r2, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
 800170a:	e01c      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x35e>
 8001714:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a61      	ldr	r2, [pc, #388]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb73 	bl	8000e38 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fb6f 	bl	8000e38 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0d8      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ee      	beq.n	8001756 <HAL_RCC_OscConfig+0x386>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff fb5d 	bl	8000e38 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fb59 	bl	8000e38 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0c2      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80ae 	beq.w	800191c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c0:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d06d      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d14b      	bne.n	800186c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80017da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb2a 	bl	8000e38 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb26 	bl	8000e38 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e091      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	071b      	lsls	r3, r3, #28
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff faf8 	bl	8000e38 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff faf4 	bl	8000e38 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e05f      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x47c>
 800186a:	e057      	b.n	800191c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fade 	bl	8000e38 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fada 	bl	8000e38 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e045      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x4b0>
 800189e:	e03d      	b.n	800191c <HAL_RCC_OscConfig+0x54c>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_RCC_OscConfig+0x558>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d030      	beq.n	8001918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d129      	bne.n	8001918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d122      	bne.n	8001918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d119      	bne.n	8001918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d10f      	bne.n	8001918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d107      	bne.n	8001918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0d0      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 020f 	bic.w	r2, r3, #15
 800195a:	4965      	ldr	r1, [pc, #404]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	494d      	ldr	r1, [pc, #308]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d040      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d115      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e073      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06b      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4936      	ldr	r1, [pc, #216]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff fa0a 	bl	8000e38 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff fa06 	bl	8000e38 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e053      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d210      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 020f 	bic.w	r2, r3, #15
 8001a66:	4922      	ldr	r1, [pc, #136]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e032      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4916      	ldr	r1, [pc, #88]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f821 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d0>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1d4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f8d4 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	0800602c 	.word	0x0800602c
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d007      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x32>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d008      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x38>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80b4 	bne.w	8001c98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b5e      	ldr	r3, [pc, #376]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b32:	60bb      	str	r3, [r7, #8]
      break;
 8001b34:	e0b3      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b38:	60bb      	str	r3, [r7, #8]
      break;
 8001b3a:	e0b0      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b44:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b46:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d04a      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	f04f 0400 	mov.w	r4, #0
 8001b5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	ea03 0501 	and.w	r5, r3, r1
 8001b68:	ea04 0602 	and.w	r6, r4, r2
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4632      	mov	r2, r6
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f04f 0400 	mov.w	r4, #0
 8001b78:	0154      	lsls	r4, r2, #5
 8001b7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b7e:	014b      	lsls	r3, r1, #5
 8001b80:	4619      	mov	r1, r3
 8001b82:	4622      	mov	r2, r4
 8001b84:	1b49      	subs	r1, r1, r5
 8001b86:	eb62 0206 	sbc.w	r2, r2, r6
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	0194      	lsls	r4, r2, #6
 8001b94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b98:	018b      	lsls	r3, r1, #6
 8001b9a:	1a5b      	subs	r3, r3, r1
 8001b9c:	eb64 0402 	sbc.w	r4, r4, r2
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	00e2      	lsls	r2, r4, #3
 8001baa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bae:	00d9      	lsls	r1, r3, #3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	195b      	adds	r3, r3, r5
 8001bb6:	eb44 0406 	adc.w	r4, r4, r6
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	02a2      	lsls	r2, r4, #10
 8001bc4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bc8:	0299      	lsls	r1, r3, #10
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4614      	mov	r4, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	f7fe fb30 	bl	8000240 <__aeabi_uldivmod>
 8001be0:	4603      	mov	r3, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e049      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	ea03 0501 	and.w	r5, r3, r1
 8001bfe:	ea04 0602 	and.w	r6, r4, r2
 8001c02:	4629      	mov	r1, r5
 8001c04:	4632      	mov	r2, r6
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	f04f 0400 	mov.w	r4, #0
 8001c0e:	0154      	lsls	r4, r2, #5
 8001c10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c14:	014b      	lsls	r3, r1, #5
 8001c16:	4619      	mov	r1, r3
 8001c18:	4622      	mov	r2, r4
 8001c1a:	1b49      	subs	r1, r1, r5
 8001c1c:	eb62 0206 	sbc.w	r2, r2, r6
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	0194      	lsls	r4, r2, #6
 8001c2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c2e:	018b      	lsls	r3, r1, #6
 8001c30:	1a5b      	subs	r3, r3, r1
 8001c32:	eb64 0402 	sbc.w	r4, r4, r2
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	00e2      	lsls	r2, r4, #3
 8001c40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c44:	00d9      	lsls	r1, r3, #3
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	195b      	adds	r3, r3, r5
 8001c4c:	eb44 0406 	adc.w	r4, r4, r6
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	02a2      	lsls	r2, r4, #10
 8001c5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c5e:	0299      	lsls	r1, r3, #10
 8001c60:	460b      	mov	r3, r1
 8001c62:	4614      	mov	r4, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	4621      	mov	r1, r4
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f04f 0400 	mov.w	r4, #0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4623      	mov	r3, r4
 8001c72:	f7fe fae5 	bl	8000240 <__aeabi_uldivmod>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	60bb      	str	r3, [r7, #8]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c9a:	60bb      	str	r3, [r7, #8]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	00f42400 	.word	0x00f42400

08001cb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff fff0 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0a9b      	lsrs	r3, r3, #10
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	0800603c 	.word	0x0800603c

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf4:	f7ff ffdc 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0b5b      	lsrs	r3, r3, #13
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	0800603c 	.word	0x0800603c

08001d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	220f      	movs	r2, #15
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_RCC_GetClockConfig+0x60>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d012      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001da4:	4b69      	ldr	r3, [pc, #420]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a68      	ldr	r2, [pc, #416]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001daa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dae:	6093      	str	r3, [r2, #8]
 8001db0:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	4964      	ldr	r1, [pc, #400]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	4959      	ldr	r1, [pc, #356]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df4:	d101      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d017      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	494a      	ldr	r1, [pc, #296]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e30:	d101      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 808b 	beq.w	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a39      	ldr	r2, [pc, #228]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e84:	f7fe ffd8 	bl	8000e38 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe ffd4 	bl	8000e38 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e38d      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d035      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d02e      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d114      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff9c 	bl	8000e38 <HAL_GetTick>
 8001f00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7fe ff98 	bl	8000e38 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e34f      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ee      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f32:	d111      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	4901      	ldr	r1, [pc, #4]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
 8001f54:	0ffffcff 	.word	0x0ffffcff
 8001f58:	4bb3      	ldr	r3, [pc, #716]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4ab2      	ldr	r2, [pc, #712]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f62:	6093      	str	r3, [r2, #8]
 8001f64:	4bb0      	ldr	r3, [pc, #704]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	49ad      	ldr	r1, [pc, #692]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f82:	4ba9      	ldr	r3, [pc, #676]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f88:	4aa7      	ldr	r2, [pc, #668]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f92:	4ba5      	ldr	r3, [pc, #660]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	49a2      	ldr	r1, [pc, #648]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb0:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbe:	499a      	ldr	r1, [pc, #616]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fd2:	4b95      	ldr	r3, [pc, #596]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe0:	4991      	ldr	r1, [pc, #580]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ff4:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002002:	4989      	ldr	r1, [pc, #548]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002016:	4b84      	ldr	r3, [pc, #528]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4980      	ldr	r1, [pc, #512]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002038:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4978      	ldr	r1, [pc, #480]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f023 020c 	bic.w	r2, r3, #12
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002068:	496f      	ldr	r1, [pc, #444]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4967      	ldr	r1, [pc, #412]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ac:	495e      	ldr	r1, [pc, #376]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	4956      	ldr	r1, [pc, #344]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	494d      	ldr	r1, [pc, #308]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	4945      	ldr	r1, [pc, #276]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	493c      	ldr	r1, [pc, #240]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002148:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002156:	4934      	ldr	r1, [pc, #208]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d011      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002178:	492b      	ldr	r1, [pc, #172]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002188:	d101      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	491b      	ldr	r1, [pc, #108]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021dc:	4912      	ldr	r1, [pc, #72]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800221a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	e002      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	4985      	ldr	r1, [pc, #532]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002240:	4b80      	ldr	r3, [pc, #512]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002246:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002250:	497c      	ldr	r1, [pc, #496]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002266:	f040 80d6 	bne.w	8002416 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800226a:	4b76      	ldr	r3, [pc, #472]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a75      	ldr	r2, [pc, #468]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002270:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002276:	f7fe fddf 	bl	8000e38 <HAL_GetTick>
 800227a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800227e:	f7fe fddb 	bl	8000e38 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e194      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002290:	4b6c      	ldr	r3, [pc, #432]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d021      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x570>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11d      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022b0:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022be:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c4:	0e1b      	lsrs	r3, r3, #24
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	019a      	lsls	r2, r3, #6
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	071b      	lsls	r3, r3, #28
 80022e4:	4957      	ldr	r1, [pc, #348]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02e      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002316:	d129      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002318:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800231a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232c:	0f1b      	lsrs	r3, r3, #28
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	019a      	lsls	r2, r3, #6
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	071b      	lsls	r3, r3, #28
 800234c:	493d      	ldr	r1, [pc, #244]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002354:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235a:	f023 021f 	bic.w	r2, r3, #31
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	4937      	ldr	r1, [pc, #220]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01d      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002378:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237e:	0e1b      	lsrs	r3, r3, #24
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	0f1b      	lsrs	r3, r3, #28
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	019a      	lsls	r2, r3, #6
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	071b      	lsls	r3, r3, #28
 80023ac:	4925      	ldr	r1, [pc, #148]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d011      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	019a      	lsls	r2, r3, #6
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	071b      	lsls	r3, r3, #28
 80023dc:	4919      	ldr	r1, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f0:	f7fe fd22 	bl	8000e38 <HAL_GetTick>
 80023f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023f8:	f7fe fd1e 	bl	8000e38 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0d7      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 80cd 	bne.w	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a08      	ldr	r2, [pc, #32]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800242a:	f7fe fd05 	bl	8000e38 <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002432:	f7fe fd01 	bl	8000e38 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d903      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0ba      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002444:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002448:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002454:	d0ed      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02e      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d12a      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800247e:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800248c:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	0f1b      	lsrs	r3, r3, #28
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	019a      	lsls	r2, r3, #6
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	071b      	lsls	r3, r3, #28
 80024b2:	4944      	ldr	r1, [pc, #272]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ba:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	493d      	ldr	r1, [pc, #244]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d022      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e8:	d11d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	0f1b      	lsrs	r3, r3, #28
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4929      	ldr	r1, [pc, #164]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d028      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	0e1b      	lsrs	r3, r3, #24
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	019a      	lsls	r2, r3, #6
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	431a      	orrs	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	071b      	lsls	r3, r3, #28
 8002566:	4917      	ldr	r1, [pc, #92]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	4911      	ldr	r1, [pc, #68]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fc52 	bl	8000e38 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002598:	f7fe fc4e 	bl	8000e38 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e007      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b6:	d1ef      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e01d      	b.n	8002616 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f815 	bl	800261e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 f986 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_TIM_Base_Start_IT+0x50>)
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d00b      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x42>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d007      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	00010007 	.word	0x00010007

08002688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0202 	mvn.w	r2, #2
 80026b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f905 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8f7 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f908 	bl	80028ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0204 	mvn.w	r2, #4
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8db 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8cd 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f8de 	bl	80028ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b08      	cmp	r3, #8
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0208 	mvn.w	r2, #8
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2204      	movs	r2, #4
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8b1 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8a3 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8b4 	bl	80028ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b10      	cmp	r3, #16
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0210 	mvn.w	r2, #16
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2208      	movs	r2, #8
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f887 	bl	80028da <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f879 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f88a 	bl	80028ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10e      	bne.n	800280c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0201 	mvn.w	r2, #1
 8002804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f9be 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b80      	cmp	r3, #128	; 0x80
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f91a 	bl	8002a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002846:	d10e      	bne.n	8002866 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b80      	cmp	r3, #128	; 0x80
 8002854:	d107      	bne.n	8002866 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f90d 	bl	8002a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d10e      	bne.n	8002892 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d107      	bne.n	8002892 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f838 	bl	8002902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d10e      	bne.n	80028be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d107      	bne.n	80028be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f06f 0220 	mvn.w	r2, #32
 80028b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8cd 	bl	8002a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <TIM_Base_SetConfig+0x114>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d00f      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <TIM_Base_SetConfig+0x118>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00b      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <TIM_Base_SetConfig+0x11c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <TIM_Base_SetConfig+0x120>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3a      	ldr	r2, [pc, #232]	; (8002a3c <TIM_Base_SetConfig+0x124>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <TIM_Base_SetConfig+0x114>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02b      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d027      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <TIM_Base_SetConfig+0x118>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d023      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <TIM_Base_SetConfig+0x11c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2a      	ldr	r2, [pc, #168]	; (8002a38 <TIM_Base_SetConfig+0x120>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01b      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <TIM_Base_SetConfig+0x124>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d017      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <TIM_Base_SetConfig+0x128>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <TIM_Base_SetConfig+0x12c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00f      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <TIM_Base_SetConfig+0x130>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <TIM_Base_SetConfig+0x134>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <TIM_Base_SetConfig+0x138>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <TIM_Base_SetConfig+0x13c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <TIM_Base_SetConfig+0x114>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0xf8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <TIM_Base_SetConfig+0x124>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40010400 	.word	0x40010400
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800
 8002a4c:	40001800 	.word	0x40001800
 8002a50:	40001c00 	.word	0x40001c00
 8002a54:	40002000 	.word	0x40002000

08002a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e040      	b.n	8002b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe f8a4 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	; 0x24
 8002ac0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8be 	bl	8002c54 <UART_SetConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e022      	b.n	8002b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb5c 	bl	80031a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fbe3 	bl	80032ec <UART_CheckIdleState>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d17f      	bne.n	8002c48 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Transmit+0x24>
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e078      	b.n	8002c4a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Transmit+0x36>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e071      	b.n	8002c4a <HAL_UART_Transmit+0x11a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2221      	movs	r2, #33	; 0x21
 8002b78:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b7a:	f7fe f95d 	bl	8000e38 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d108      	bne.n	8002bac <HAL_UART_Transmit+0x7c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e003      	b.n	8002bb4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002bbc:	e02c      	b.n	8002c18 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fbd4 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e038      	b.n	8002c4a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e007      	b.n	8002c06 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1cc      	bne.n	8002bbe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2140      	movs	r1, #64	; 0x40
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fba1 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e005      	b.n	8002c4a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4bb1      	ldr	r3, [pc, #708]	; (8002f48 <UART_SetConfig+0x2f4>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a9f      	ldr	r2, [pc, #636]	; (8002f4c <UART_SetConfig+0x2f8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d121      	bne.n	8002d18 <UART_SetConfig+0xc4>
 8002cd4:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d816      	bhi.n	8002d10 <UART_SetConfig+0xbc>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <UART_SetConfig+0x94>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002cff 	.word	0x08002cff
 8002cf4:	08002d0b 	.word	0x08002d0b
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e151      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e14e      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d04:	2304      	movs	r3, #4
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e14b      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e148      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d10:	2310      	movs	r3, #16
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	bf00      	nop
 8002d16:	e144      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a8d      	ldr	r2, [pc, #564]	; (8002f54 <UART_SetConfig+0x300>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d134      	bne.n	8002d8c <UART_SetConfig+0x138>
 8002d22:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d829      	bhi.n	8002d84 <UART_SetConfig+0x130>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <UART_SetConfig+0xe4>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	08002d85 	.word	0x08002d85
 8002d40:	08002d85 	.word	0x08002d85
 8002d44:	08002d85 	.word	0x08002d85
 8002d48:	08002d79 	.word	0x08002d79
 8002d4c:	08002d85 	.word	0x08002d85
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08002d85 	.word	0x08002d85
 8002d58:	08002d73 	.word	0x08002d73
 8002d5c:	08002d85 	.word	0x08002d85
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002d85 	.word	0x08002d85
 8002d68:	08002d7f 	.word	0x08002d7f
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e117      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d72:	2302      	movs	r3, #2
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e114      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e111      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	e10e      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d84:	2310      	movs	r3, #16
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	bf00      	nop
 8002d8a:	e10a      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <UART_SetConfig+0x304>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d120      	bne.n	8002dd8 <UART_SetConfig+0x184>
 8002d96:	4b6e      	ldr	r3, [pc, #440]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d00f      	beq.n	8002dc4 <UART_SetConfig+0x170>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d802      	bhi.n	8002dae <UART_SetConfig+0x15a>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <UART_SetConfig+0x164>
 8002dac:	e010      	b.n	8002dd0 <UART_SetConfig+0x17c>
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d005      	beq.n	8002dbe <UART_SetConfig+0x16a>
 8002db2:	2b30      	cmp	r3, #48	; 0x30
 8002db4:	d009      	beq.n	8002dca <UART_SetConfig+0x176>
 8002db6:	e00b      	b.n	8002dd0 <UART_SetConfig+0x17c>
 8002db8:	2300      	movs	r3, #0
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e0f1      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e0ee      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e0eb      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e0e8      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	bf00      	nop
 8002dd6:	e0e4      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5f      	ldr	r2, [pc, #380]	; (8002f5c <UART_SetConfig+0x308>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d120      	bne.n	8002e24 <UART_SetConfig+0x1d0>
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d00f      	beq.n	8002e10 <UART_SetConfig+0x1bc>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d802      	bhi.n	8002dfa <UART_SetConfig+0x1a6>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <UART_SetConfig+0x1b0>
 8002df8:	e010      	b.n	8002e1c <UART_SetConfig+0x1c8>
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d005      	beq.n	8002e0a <UART_SetConfig+0x1b6>
 8002dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8002e00:	d009      	beq.n	8002e16 <UART_SetConfig+0x1c2>
 8002e02:	e00b      	b.n	8002e1c <UART_SetConfig+0x1c8>
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e0cb      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e0c8      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e10:	2304      	movs	r3, #4
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e0c5      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e16:	2308      	movs	r3, #8
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e0c2      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	bf00      	nop
 8002e22:	e0be      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4d      	ldr	r2, [pc, #308]	; (8002f60 <UART_SetConfig+0x30c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d124      	bne.n	8002e78 <UART_SetConfig+0x224>
 8002e2e:	4b48      	ldr	r3, [pc, #288]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3c:	d012      	beq.n	8002e64 <UART_SetConfig+0x210>
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d802      	bhi.n	8002e4a <UART_SetConfig+0x1f6>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <UART_SetConfig+0x204>
 8002e48:	e012      	b.n	8002e70 <UART_SetConfig+0x21c>
 8002e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4e:	d006      	beq.n	8002e5e <UART_SetConfig+0x20a>
 8002e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e54:	d009      	beq.n	8002e6a <UART_SetConfig+0x216>
 8002e56:	e00b      	b.n	8002e70 <UART_SetConfig+0x21c>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e0a1      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	77fb      	strb	r3, [r7, #31]
 8002e62:	e09e      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e64:	2304      	movs	r3, #4
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e09b      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e098      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e70:	2310      	movs	r3, #16
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	bf00      	nop
 8002e76:	e094      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a39      	ldr	r2, [pc, #228]	; (8002f64 <UART_SetConfig+0x310>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d124      	bne.n	8002ecc <UART_SetConfig+0x278>
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d012      	beq.n	8002eb8 <UART_SetConfig+0x264>
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d802      	bhi.n	8002e9e <UART_SetConfig+0x24a>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <UART_SetConfig+0x258>
 8002e9c:	e012      	b.n	8002ec4 <UART_SetConfig+0x270>
 8002e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea2:	d006      	beq.n	8002eb2 <UART_SetConfig+0x25e>
 8002ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ea8:	d009      	beq.n	8002ebe <UART_SetConfig+0x26a>
 8002eaa:	e00b      	b.n	8002ec4 <UART_SetConfig+0x270>
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e077      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e074      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e071      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e06e      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	bf00      	nop
 8002eca:	e06a      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <UART_SetConfig+0x314>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d124      	bne.n	8002f20 <UART_SetConfig+0x2cc>
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d012      	beq.n	8002f0c <UART_SetConfig+0x2b8>
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d802      	bhi.n	8002ef2 <UART_SetConfig+0x29e>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <UART_SetConfig+0x2ac>
 8002ef0:	e012      	b.n	8002f18 <UART_SetConfig+0x2c4>
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	d006      	beq.n	8002f06 <UART_SetConfig+0x2b2>
 8002ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002efc:	d009      	beq.n	8002f12 <UART_SetConfig+0x2be>
 8002efe:	e00b      	b.n	8002f18 <UART_SetConfig+0x2c4>
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e04d      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e04a      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e047      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f12:	2308      	movs	r3, #8
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e044      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	bf00      	nop
 8002f1e:	e040      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <UART_SetConfig+0x318>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d139      	bne.n	8002f9e <UART_SetConfig+0x34a>
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <UART_SetConfig+0x2fc>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f38:	d027      	beq.n	8002f8a <UART_SetConfig+0x336>
 8002f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f3e:	d817      	bhi.n	8002f70 <UART_SetConfig+0x31c>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <UART_SetConfig+0x32a>
 8002f44:	e027      	b.n	8002f96 <UART_SetConfig+0x342>
 8002f46:	bf00      	nop
 8002f48:	efff69f3 	.word	0xefff69f3
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40004400 	.word	0x40004400
 8002f58:	40004800 	.word	0x40004800
 8002f5c:	40004c00 	.word	0x40004c00
 8002f60:	40005000 	.word	0x40005000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	40007800 	.word	0x40007800
 8002f6c:	40007c00 	.word	0x40007c00
 8002f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f74:	d006      	beq.n	8002f84 <UART_SetConfig+0x330>
 8002f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f7a:	d009      	beq.n	8002f90 <UART_SetConfig+0x33c>
 8002f7c:	e00b      	b.n	8002f96 <UART_SetConfig+0x342>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e00e      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f84:	2302      	movs	r3, #2
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e00b      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e008      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f90:	2308      	movs	r3, #8
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e005      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f96:	2310      	movs	r3, #16
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	bf00      	nop
 8002f9c:	e001      	b.n	8002fa2 <UART_SetConfig+0x34e>
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002faa:	d17f      	bne.n	80030ac <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d85c      	bhi.n	800306c <UART_SetConfig+0x418>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0x364>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002ffd 	.word	0x08002ffd
 8002fc0:	0800301d 	.word	0x0800301d
 8002fc4:	0800306d 	.word	0x0800306d
 8002fc8:	08003035 	.word	0x08003035
 8002fcc:	0800306d 	.word	0x0800306d
 8002fd0:	0800306d 	.word	0x0800306d
 8002fd4:	0800306d 	.word	0x0800306d
 8002fd8:	08003055 	.word	0x08003055
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7fe fe74 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	005a      	lsls	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	61bb      	str	r3, [r7, #24]
        break;
 8002ffa:	e03a      	b.n	8003072 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ffc:	f7fe fe78 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8003000:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	005a      	lsls	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	b29b      	uxth	r3, r3
 8003018:	61bb      	str	r3, [r7, #24]
        break;
 800301a:	e02a      	b.n	8003072 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	085a      	lsrs	r2, r3, #1
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <UART_SetConfig+0x54c>)
 8003024:	4413      	add	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6852      	ldr	r2, [r2, #4]
 800302a:	fbb3 f3f2 	udiv	r3, r3, r2
 800302e:	b29b      	uxth	r3, r3
 8003030:	61bb      	str	r3, [r7, #24]
        break;
 8003032:	e01e      	b.n	8003072 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003034:	f7fe fd66 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8003038:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	005a      	lsls	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	441a      	add	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	61bb      	str	r3, [r7, #24]
        break;
 8003052:	e00e      	b.n	8003072 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	b29b      	uxth	r3, r3
 8003068:	61bb      	str	r3, [r7, #24]
        break;
 800306a:	e002      	b.n	8003072 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
        break;
 8003070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d916      	bls.n	80030a6 <UART_SetConfig+0x452>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d212      	bcs.n	80030a6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b29a      	uxth	r2, r3
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	4313      	orrs	r3, r2
 800309a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	897a      	ldrh	r2, [r7, #10]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	e070      	b.n	8003188 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
 80030aa:	e06d      	b.n	8003188 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80030ac:	7ffb      	ldrb	r3, [r7, #31]
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d859      	bhi.n	8003166 <UART_SetConfig+0x512>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x464>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030fb 	.word	0x080030fb
 80030c0:	08003119 	.word	0x08003119
 80030c4:	08003167 	.word	0x08003167
 80030c8:	08003131 	.word	0x08003131
 80030cc:	08003167 	.word	0x08003167
 80030d0:	08003167 	.word	0x08003167
 80030d4:	08003167 	.word	0x08003167
 80030d8:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7fe fdf4 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 80030e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	085a      	lsrs	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	441a      	add	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	61bb      	str	r3, [r7, #24]
        break;
 80030f8:	e038      	b.n	800316c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030fa:	f7fe fdf9 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 80030fe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	085a      	lsrs	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	b29b      	uxth	r3, r3
 8003114:	61bb      	str	r3, [r7, #24]
        break;
 8003116:	e029      	b.n	800316c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	085a      	lsrs	r2, r3, #1
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <UART_SetConfig+0x550>)
 8003120:	4413      	add	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6852      	ldr	r2, [r2, #4]
 8003126:	fbb3 f3f2 	udiv	r3, r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	61bb      	str	r3, [r7, #24]
        break;
 800312e:	e01d      	b.n	800316c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003130:	f7fe fce8 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8003134:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	085a      	lsrs	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	441a      	add	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	b29b      	uxth	r3, r3
 800314a:	61bb      	str	r3, [r7, #24]
        break;
 800314c:	e00e      	b.n	800316c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	b29b      	uxth	r3, r3
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e002      	b.n	800316c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
        break;
 800316a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	d908      	bls.n	8003184 <UART_SetConfig+0x530>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d204      	bcs.n	8003184 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	e001      	b.n	8003188 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	01e84800 	.word	0x01e84800
 80031a4:	00f42400 	.word	0x00f42400

080031a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01a      	beq.n	80032be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d10a      	bne.n	80032be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  }
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032fa:	f7fd fd9d 	bl	8000e38 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	d10e      	bne.n	800332c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f82a 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e020      	b.n	800336e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d10e      	bne.n	8003358 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f814 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e00a      	b.n	800336e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003386:	e05d      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d059      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	f7fd fd52 	bl	8000e38 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11b      	bne.n	80033de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e042      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fa:	d123      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003404:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003414:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e00f      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	429a      	cmp	r2, r3
 8003460:	d092      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800347a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347e:	2b84      	cmp	r3, #132	; 0x84
 8003480:	d005      	beq.n	800348e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003482:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	3303      	adds	r3, #3
 800348c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800348e:	68fb      	ldr	r3, [r7, #12]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a2:	f3ef 8305 	mrs	r3, IPSR
 80034a6:	607b      	str	r3, [r7, #4]
  return(result);
 80034a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034c4:	f001 f9e4 	bl	8004890 <vTaskStartScheduler>
  
  return osOK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	bd80      	pop	{r7, pc}

080034ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d0:	b089      	sub	sp, #36	; 0x24
 80034d2:	af04      	add	r7, sp, #16
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <osThreadCreate+0x54>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685c      	ldr	r4, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681d      	ldr	r5, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691e      	ldr	r6, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ffb6 	bl	800346c <makeFreeRtosPriority>
 8003500:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800350a:	9202      	str	r2, [sp, #8]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	9100      	str	r1, [sp, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4632      	mov	r2, r6
 8003514:	4629      	mov	r1, r5
 8003516:	4620      	mov	r0, r4
 8003518:	f000 ff59 	bl	80043ce <xTaskCreateStatic>
 800351c:	4603      	mov	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e01c      	b.n	800355c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685c      	ldr	r4, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800352e:	b29e      	uxth	r6, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff98 	bl	800346c <makeFreeRtosPriority>
 800353c:	4602      	mov	r2, r0
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	9200      	str	r2, [sp, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	4632      	mov	r2, r6
 800354a:	4629      	mov	r1, r5
 800354c:	4620      	mov	r0, r4
 800354e:	f000 ff9e 	bl	800448e <xTaskCreate>
 8003552:	4603      	mov	r3, r0
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003566 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4619      	mov	r1, r3
 800357c:	2001      	movs	r0, #1
 800357e:	f000 fabc 	bl	8003afa <xQueueCreateMutexStatic>
 8003582:	4603      	mov	r3, r0
 8003584:	e003      	b.n	800358e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003586:	2001      	movs	r0, #1
 8003588:	f000 fa9f 	bl	8003aca <xQueueCreateMutex>
 800358c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <osMutexWait+0x18>
    return osErrorParameter;
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	e03a      	b.n	8003626 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e009      	b.n	80035d8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <osMutexWait+0x40>
      ticks = 1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80035d8:	f7ff ff60 	bl	800349c <inHandlerMode>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	461a      	mov	r2, r3
 80035e8:	2100      	movs	r1, #0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fd44 	bl	8004078 <xQueueReceiveFromISR>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d001      	beq.n	80035fa <osMutexWait+0x62>
      return osErrorOS;
 80035f6:	23ff      	movs	r3, #255	; 0xff
 80035f8:	e015      	b.n	8003626 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <osMutexWait+0x8c>
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <osMutexWait+0x98>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	e008      	b.n	8003624 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fc1f 	bl	8003e58 <xQueueSemaphoreTake>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <osMutexWait+0x8c>
    return osErrorOS;
 8003620:	23ff      	movs	r3, #255	; 0xff
 8003622:	e000      	b.n	8003626 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003644:	f7ff ff2a 	bl	800349c <inHandlerMode>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800364e:	f107 0308 	add.w	r3, r7, #8
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fb6d 	bl	8003d34 <xQueueGiveFromISR>
 800365a:	4603      	mov	r3, r0
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <osMutexRelease+0x30>
      return osErrorOS;
 8003660:	23ff      	movs	r3, #255	; 0xff
 8003662:	e017      	b.n	8003694 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d013      	beq.n	8003692 <osMutexRelease+0x5e>
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <osMutexRelease+0x68>)
 800366c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	e00a      	b.n	8003692 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800367c:	2300      	movs	r3, #0
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa54 	bl	8003b30 <xQueueGenericSend>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d001      	beq.n	8003692 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800368e:	23ff      	movs	r3, #255	; 0xff
 8003690:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295
 80036b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f103 0208 	add.w	r2, r3, #8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 0208 	add.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d103      	bne.n	8003762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e00c      	b.n	800377c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3308      	adds	r3, #8
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e002      	b.n	8003770 <vListInsert+0x2e>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	d2f6      	bcs.n	800376a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6852      	ldr	r2, [r2, #4]
 80037d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d103      	bne.n	80037e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	b672      	cpsid	i
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	b662      	cpsie	i
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	e7fe      	b.n	8003832 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003834:	f001 ff88 	bl	8005748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	3b01      	subs	r3, #1
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	441a      	add	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d114      	bne.n	80038b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01a      	beq.n	80038c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3310      	adds	r3, #16
 8003896:	4618      	mov	r0, r3
 8003898:	f001 fa54 	bl	8004d44 <xTaskRemoveFromEventList>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <xQueueGenericReset+0xd0>)
 80038a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	e009      	b.n	80038c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3310      	adds	r3, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fef1 	bl	80036a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3324      	adds	r3, #36	; 0x24
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff feec 	bl	80036a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038c8:	f001 ff70 	bl	80057ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038cc:	2301      	movs	r3, #1
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08e      	sub	sp, #56	; 0x38
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <xQueueGenericCreateStatic+0x2c>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	b672      	cpsid	i
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	b662      	cpsie	i
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	e7fe      	b.n	8003906 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <xQueueGenericCreateStatic+0x4a>
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	b672      	cpsid	i
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	b662      	cpsie	i
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	e7fe      	b.n	8003924 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <xQueueGenericCreateStatic+0x56>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <xQueueGenericCreateStatic+0x5a>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <xQueueGenericCreateStatic+0x5c>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <xQueueGenericCreateStatic+0x78>
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	b672      	cpsid	i
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	b662      	cpsie	i
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	e7fe      	b.n	8003952 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <xQueueGenericCreateStatic+0x84>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <xQueueGenericCreateStatic+0x88>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <xQueueGenericCreateStatic+0x8a>
 8003964:	2300      	movs	r3, #0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <xQueueGenericCreateStatic+0xa6>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	b672      	cpsid	i
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	b662      	cpsie	i
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e7fe      	b.n	8003980 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003982:	2348      	movs	r3, #72	; 0x48
 8003984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b48      	cmp	r3, #72	; 0x48
 800398a:	d00b      	beq.n	80039a4 <xQueueGenericCreateStatic+0xc8>
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	b672      	cpsid	i
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	b662      	cpsie	i
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e7fe      	b.n	80039a2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f846 	bl	8003a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3730      	adds	r7, #48	; 0x30
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b08a      	sub	sp, #40	; 0x28
 80039da:	af02      	add	r7, sp, #8
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <xQueueGenericCreate+0x2c>
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	b672      	cpsid	i
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	b662      	cpsie	i
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e7fe      	b.n	8003a00 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e004      	b.n	8003a18 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3348      	adds	r3, #72	; 0x48
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 ffb5 	bl	800598c <pvPortMalloc>
 8003a22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d011      	beq.n	8003a4e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3348      	adds	r3, #72	; 0x48
 8003a32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a3c:	79fa      	ldrb	r2, [r7, #7]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f805 	bl	8003a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e002      	b.n	8003a7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a86:	2101      	movs	r1, #1
 8003a88:	69b8      	ldr	r0, [r7, #24]
 8003a8a:	f7ff febd 	bl	8003808 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f837 	bl	8003b30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff77 	bl	80039d6 <xQueueGenericCreate>
 8003ae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ffd3 	bl	8003a96 <prvInitialiseMutex>

		return xNewQueue;
 8003af0:	68fb      	ldr	r3, [r7, #12]
	}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b088      	sub	sp, #32
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	4603      	mov	r3, r0
 8003b02:	6039      	str	r1, [r7, #0]
 8003b04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b06:	2301      	movs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	6939      	ldr	r1, [r7, #16]
 8003b18:	6978      	ldr	r0, [r7, #20]
 8003b1a:	f7ff fedf 	bl	80038dc <xQueueGenericCreateStatic>
 8003b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff ffb8 	bl	8003a96 <prvInitialiseMutex>

		return xNewQueue;
 8003b26:	68fb      	ldr	r3, [r7, #12]
	}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08e      	sub	sp, #56	; 0x38
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <xQueueGenericSend+0x34>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	b672      	cpsid	i
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	b662      	cpsie	i
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b62:	e7fe      	b.n	8003b62 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <xQueueGenericSend+0x42>
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <xQueueGenericSend+0x46>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xQueueGenericSend+0x48>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <xQueueGenericSend+0x64>
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	b672      	cpsid	i
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	b662      	cpsie	i
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	e7fe      	b.n	8003b92 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d103      	bne.n	8003ba2 <xQueueGenericSend+0x72>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <xQueueGenericSend+0x76>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <xQueueGenericSend+0x78>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <xQueueGenericSend+0x94>
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	b672      	cpsid	i
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	b662      	cpsie	i
 8003bc0:	623b      	str	r3, [r7, #32]
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc4:	f001 fa7c 	bl	80050c0 <xTaskGetSchedulerState>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xQueueGenericSend+0xa4>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueGenericSend+0xa8>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueGenericSend+0xaa>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <xQueueGenericSend+0xc6>
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	b672      	cpsid	i
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	b662      	cpsie	i
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf6:	f001 fda7 	bl	8005748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <xQueueGenericSend+0xdc>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d129      	bne.n	8003c60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c12:	f000 facc 	bl	80041ae <prvCopyDataToQueue>
 8003c16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	3324      	adds	r3, #36	; 0x24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f88d 	bl	8004d44 <xTaskRemoveFromEventList>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <xQueueGenericSend+0x200>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	e00a      	b.n	8003c58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <xQueueGenericSend+0x200>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c58:	f001 fda8 	bl	80057ac <vPortExitCritical>
				return pdPASS;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e063      	b.n	8003d28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c66:	f001 fda1 	bl	80057ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e05c      	b.n	8003d28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f8c7 	bl	8004e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c82:	f001 fd93 	bl	80057ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c86:	f000 fe65 	bl	8004954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c8a:	f001 fd5d 	bl	8005748 <vPortEnterCritical>
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d103      	bne.n	8003ca4 <xQueueGenericSend+0x174>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d103      	bne.n	8003cba <xQueueGenericSend+0x18a>
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cba:	f001 fd77 	bl	80057ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cbe:	1d3a      	adds	r2, r7, #4
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f8b6 	bl	8004e38 <xTaskCheckForTimeOut>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d124      	bne.n	8003d1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd4:	f000 fb63 	bl	800439e <prvIsQueueFull>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f806 	bl	8004cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cee:	f000 faee 	bl	80042ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cf2:	f000 fe3d 	bl	8004970 <xTaskResumeAll>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af7c 	bne.w	8003bf6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <xQueueGenericSend+0x200>)
 8003d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	e772      	b.n	8003bf6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d12:	f000 fadc 	bl	80042ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d16:	f000 fe2b 	bl	8004970 <xTaskResumeAll>
 8003d1a:	e76c      	b.n	8003bf6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d1e:	f000 fad6 	bl	80042ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d22:	f000 fe25 	bl	8004970 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3738      	adds	r7, #56	; 0x38
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08e      	sub	sp, #56	; 0x38
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <xQueueGiveFromISR+0x2c>
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	b672      	cpsid	i
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	b662      	cpsie	i
 8003d5c:	623b      	str	r3, [r7, #32]
 8003d5e:	e7fe      	b.n	8003d5e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <xQueueGiveFromISR+0x4c>
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	b672      	cpsid	i
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	b662      	cpsie	i
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e7fe      	b.n	8003d7e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <xQueueGiveFromISR+0x5c>
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <xQueueGiveFromISR+0x60>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <xQueueGiveFromISR+0x62>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <xQueueGiveFromISR+0x7e>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	b672      	cpsid	i
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	b662      	cpsie	i
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e7fe      	b.n	8003db0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003db2:	f001 fda9 	bl	8005908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003db6:	f3ef 8211 	mrs	r2, BASEPRI
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	b672      	cpsid	i
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	b662      	cpsie	i
 8003dce:	617a      	str	r2, [r7, #20]
 8003dd0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d22b      	bcs.n	8003e3e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d112      	bne.n	8003e28 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	3324      	adds	r3, #36	; 0x24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 ff98 	bl	8004d44 <xTaskRemoveFromEventList>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e007      	b.n	8003e38 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b25a      	sxtb	r2, r3
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3c:	e001      	b.n	8003e42 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3738      	adds	r7, #56	; 0x38
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08e      	sub	sp, #56	; 0x38
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10b      	bne.n	8003e8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	b672      	cpsid	i
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	b662      	cpsie	i
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	e7fe      	b.n	8003e8a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <xQueueSemaphoreTake+0x54>
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	b672      	cpsid	i
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	b662      	cpsie	i
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e7fe      	b.n	8003eaa <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eac:	f001 f908 	bl	80050c0 <xTaskGetSchedulerState>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <xQueueSemaphoreTake+0x64>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <xQueueSemaphoreTake+0x68>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <xQueueSemaphoreTake+0x6a>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <xQueueSemaphoreTake+0x86>
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	b672      	cpsid	i
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	b662      	cpsie	i
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	e7fe      	b.n	8003edc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ede:	f001 fc33 	bl	8005748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d024      	beq.n	8003f38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003efe:	f001 faa1 	bl	8005444 <pvTaskIncrementMutexHeldCount>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00f      	beq.n	8003f30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	3310      	adds	r3, #16
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 ff15 	bl	8004d44 <xTaskRemoveFromEventList>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f20:	4b54      	ldr	r3, [pc, #336]	; (8004074 <xQueueSemaphoreTake+0x21c>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f30:	f001 fc3c 	bl	80057ac <vPortExitCritical>
				return pdPASS;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e098      	b.n	800406a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d112      	bne.n	8003f64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <xQueueSemaphoreTake+0x104>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	b672      	cpsid	i
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	b662      	cpsie	i
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e7fe      	b.n	8003f5a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f5c:	f001 fc26 	bl	80057ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e082      	b.n	800406a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 ff4c 	bl	8004e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f78:	f001 fc18 	bl	80057ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f7c:	f000 fcea 	bl	8004954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f80:	f001 fbe2 	bl	8005748 <vPortEnterCritical>
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f8a:	b25b      	sxtb	r3, r3
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d103      	bne.n	8003f9a <xQueueSemaphoreTake+0x142>
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa6:	d103      	bne.n	8003fb0 <xQueueSemaphoreTake+0x158>
 8003fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb0:	f001 fbfc 	bl	80057ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fb4:	463a      	mov	r2, r7
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 ff3b 	bl	8004e38 <xTaskCheckForTimeOut>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d132      	bne.n	800402e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fca:	f000 f9d2 	bl	8004372 <prvIsQueueEmpty>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d026      	beq.n	8004022 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003fdc:	f001 fbb4 	bl	8005748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f889 	bl	80050fc <xTaskPriorityInherit>
 8003fea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003fec:	f001 fbde 	bl	80057ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	3324      	adds	r3, #36	; 0x24
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fe7d 	bl	8004cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004000:	f000 f965 	bl	80042ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004004:	f000 fcb4 	bl	8004970 <xTaskResumeAll>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	f47f af67 	bne.w	8003ede <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <xQueueSemaphoreTake+0x21c>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	e75d      	b.n	8003ede <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004024:	f000 f953 	bl	80042ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004028:	f000 fca2 	bl	8004970 <xTaskResumeAll>
 800402c:	e757      	b.n	8003ede <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800402e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004030:	f000 f94d 	bl	80042ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004034:	f000 fc9c 	bl	8004970 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800403a:	f000 f99a 	bl	8004372 <prvIsQueueEmpty>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	f43f af4c 	beq.w	8003ede <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00d      	beq.n	8004068 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800404c:	f001 fb7c 	bl	8005748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004052:	f000 f894 	bl	800417e <prvGetDisinheritPriorityAfterTimeout>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f954 	bl	800530c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004064:	f001 fba2 	bl	80057ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800406a:	4618      	mov	r0, r3
 800406c:	3738      	adds	r7, #56	; 0x38
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08e      	sub	sp, #56	; 0x38
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <xQueueReceiveFromISR+0x2e>
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	b672      	cpsid	i
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	b662      	cpsie	i
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	e7fe      	b.n	80040a4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <xQueueReceiveFromISR+0x3c>
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <xQueueReceiveFromISR+0x40>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <xQueueReceiveFromISR+0x42>
 80040b8:	2300      	movs	r3, #0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <xQueueReceiveFromISR+0x5e>
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	b672      	cpsid	i
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	b662      	cpsie	i
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e7fe      	b.n	80040d4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040d6:	f001 fc17 	bl	8005908 <vPortValidateInterruptPriority>
	__asm volatile
 80040da:	f3ef 8211 	mrs	r2, BASEPRI
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	b672      	cpsid	i
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	b662      	cpsie	i
 80040f2:	61ba      	str	r2, [r7, #24]
 80040f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80040f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02f      	beq.n	8004166 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004114:	f000 f8b5 	bl	8004282 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	1e5a      	subs	r2, r3, #1
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d112      	bne.n	8004150 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	3310      	adds	r3, #16
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fe04 	bl	8004d44 <xTaskRemoveFromEventList>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e007      	b.n	8004160 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	3301      	adds	r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	b25a      	sxtb	r2, r3
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004160:	2301      	movs	r3, #1
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
 8004164:	e001      	b.n	800416a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8004166:	2300      	movs	r3, #0
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004176:	4618      	mov	r0, r3
 8004178:	3738      	adds	r7, #56	; 0x38
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1c3 0307 	rsb	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e001      	b.n	80041a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80041a0:	68fb      	ldr	r3, [r7, #12]
	}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b086      	sub	sp, #24
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d14d      	bne.n	8004270 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f80f 	bl	80051fc <xTaskPriorityDisinherit>
 80041de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	e043      	b.n	8004270 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d119      	bne.n	8004222 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6858      	ldr	r0, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	461a      	mov	r2, r3
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	f001 fdcb 	bl	8005d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	441a      	add	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d32b      	bcc.n	8004270 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	e026      	b.n	8004270 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68d8      	ldr	r0, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	461a      	mov	r2, r3
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	f001 fdb1 	bl	8005d94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	425b      	negs	r3, r3
 800423c:	441a      	add	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d207      	bcs.n	800425e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	425b      	negs	r3, r3
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d105      	bne.n	8004270 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3b01      	subs	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004278:	697b      	ldr	r3, [r7, #20]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d018      	beq.n	80042c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d303      	bcc.n	80042b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68d9      	ldr	r1, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	461a      	mov	r2, r3
 80042c0:	6838      	ldr	r0, [r7, #0]
 80042c2:	f001 fd67 	bl	8005d94 <memcpy>
	}
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042d6:	f001 fa37 	bl	8005748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e2:	e011      	b.n	8004308 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3324      	adds	r3, #36	; 0x24
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd27 	bl	8004d44 <xTaskRemoveFromEventList>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042fc:	f000 fe00 	bl	8004f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	3b01      	subs	r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	dce9      	bgt.n	80042e4 <prvUnlockQueue+0x16>
 8004310:	e000      	b.n	8004314 <prvUnlockQueue+0x46>
					break;
 8004312:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	22ff      	movs	r2, #255	; 0xff
 8004318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800431c:	f001 fa46 	bl	80057ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004320:	f001 fa12 	bl	8005748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800432a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800432c:	e011      	b.n	8004352 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d012      	beq.n	800435c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3310      	adds	r3, #16
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fd02 	bl	8004d44 <xTaskRemoveFromEventList>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004346:	f000 fddb 	bl	8004f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800434a:	7bbb      	ldrb	r3, [r7, #14]
 800434c:	3b01      	subs	r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004356:	2b00      	cmp	r3, #0
 8004358:	dce9      	bgt.n	800432e <prvUnlockQueue+0x60>
 800435a:	e000      	b.n	800435e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800435c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	22ff      	movs	r2, #255	; 0xff
 8004362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004366:	f001 fa21 	bl	80057ac <vPortExitCritical>
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800437a:	f001 f9e5 	bl	8005748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e001      	b.n	8004390 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004390:	f001 fa0c 	bl	80057ac <vPortExitCritical>

	return xReturn;
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043a6:	f001 f9cf 	bl	8005748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d102      	bne.n	80043bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e001      	b.n	80043c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043c0:	f001 f9f4 	bl	80057ac <vPortExitCritical>

	return xReturn;
 80043c4:	68fb      	ldr	r3, [r7, #12]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b08e      	sub	sp, #56	; 0x38
 80043d2:	af04      	add	r7, sp, #16
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <xTaskCreateStatic+0x2c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	b672      	cpsid	i
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	b662      	cpsie	i
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	e7fe      	b.n	80043f8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <xTaskCreateStatic+0x4a>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	b672      	cpsid	i
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	b662      	cpsie	i
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e7fe      	b.n	8004416 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004418:	2354      	movs	r3, #84	; 0x54
 800441a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b54      	cmp	r3, #84	; 0x54
 8004420:	d00b      	beq.n	800443a <xTaskCreateStatic+0x6c>
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	b672      	cpsid	i
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	b662      	cpsie	i
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e7fe      	b.n	8004438 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800443a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01e      	beq.n	8004480 <xTaskCreateStatic+0xb2>
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004450:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800445a:	2300      	movs	r3, #0
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9302      	str	r3, [sp, #8]
 8004462:	f107 0314 	add.w	r3, r7, #20
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f850 	bl	8004518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800447a:	f000 f8d5 	bl	8004628 <prvAddNewTaskToReadyList>
 800447e:	e001      	b.n	8004484 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004484:	697b      	ldr	r3, [r7, #20]
	}
 8004486:	4618      	mov	r0, r3
 8004488:	3728      	adds	r7, #40	; 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800448e:	b580      	push	{r7, lr}
 8004490:	b08c      	sub	sp, #48	; 0x30
 8004492:	af04      	add	r7, sp, #16
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 fa72 	bl	800598c <pvPortMalloc>
 80044a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044b0:	2054      	movs	r0, #84	; 0x54
 80044b2:	f001 fa6b 	bl	800598c <pvPortMalloc>
 80044b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
 80044c4:	e005      	b.n	80044d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	f001 fb28 	bl	8005b1c <vPortFree>
 80044cc:	e001      	b.n	80044d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f80e 	bl	8004518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044fc:	69f8      	ldr	r0, [r7, #28]
 80044fe:	f000 f893 	bl	8004628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e002      	b.n	800450e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800450e:	69bb      	ldr	r3, [r7, #24]
	}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004530:	440b      	add	r3, r1
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f023 0307 	bic.w	r3, r3, #7
 800453e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <prvInitialiseNewTask+0x4a>
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	b672      	cpsid	i
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	b662      	cpsie	i
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e7fe      	b.n	8004560 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01f      	beq.n	80045a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e012      	b.n	8004594 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	7819      	ldrb	r1, [r3, #0]
 8004576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	3334      	adds	r3, #52	; 0x34
 800457e:	460a      	mov	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	4413      	add	r3, r2
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3301      	adds	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	d9e9      	bls.n	800456e <prvInitialiseNewTask+0x56>
 800459a:	e000      	b.n	800459e <prvInitialiseNewTask+0x86>
			{
				break;
 800459c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a6:	e003      	b.n	80045b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d901      	bls.n	80045ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045b6:	2306      	movs	r3, #6
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2200      	movs	r2, #0
 80045ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff f885 	bl	80036e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	3318      	adds	r3, #24
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff f880 	bl	80036e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	f1c3 0207 	rsb	r2, r3, #7
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	69b8      	ldr	r0, [r7, #24]
 800460a:	f000 ff95 	bl	8005538 <pxPortInitialiseStack>
 800460e:	4602      	mov	r2, r0
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004620:	bf00      	nop
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004630:	f001 f88a 	bl	8005748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <prvAddNewTaskToReadyList+0xb8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a29      	ldr	r2, [pc, #164]	; (80046e0 <prvAddNewTaskToReadyList+0xb8>)
 800463c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004646:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <prvAddNewTaskToReadyList+0xb8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d110      	bne.n	8004676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004654:	f000 fc78 	bl	8004f48 <prvInitialiseTaskLists>
 8004658:	e00d      	b.n	8004676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <prvAddNewTaskToReadyList+0xc0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	429a      	cmp	r2, r3
 800466e:	d802      	bhi.n	8004676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004670:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004676:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <prvAddNewTaskToReadyList+0xc4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <prvAddNewTaskToReadyList+0xc4>)
 800467e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	2201      	movs	r2, #1
 8004686:	409a      	lsls	r2, r3
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <prvAddNewTaskToReadyList+0xc8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <prvAddNewTaskToReadyList+0xc8>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <prvAddNewTaskToReadyList+0xcc>)
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7ff f826 	bl	80036fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046ae:	f001 f87d 	bl	80057ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <prvAddNewTaskToReadyList+0xc0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00e      	beq.n	80046d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <prvAddNewTaskToReadyList+0xbc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d207      	bcs.n	80046d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <prvAddNewTaskToReadyList+0xd0>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000380 	.word	0x20000380
 80046e4:	20000280 	.word	0x20000280
 80046e8:	2000038c 	.word	0x2000038c
 80046ec:	2000039c 	.word	0x2000039c
 80046f0:	20000388 	.word	0x20000388
 80046f4:	20000284 	.word	0x20000284
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <vTaskDelay+0x64>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <vTaskDelay+0x32>
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	b672      	cpsid	i
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	b662      	cpsie	i
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	e7fe      	b.n	800472c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800472e:	f000 f911 	bl	8004954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004732:	2100      	movs	r1, #0
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fe99 	bl	800546c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800473a:	f000 f919 	bl	8004970 <xTaskResumeAll>
 800473e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <vTaskDelay+0x68>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200003a8 	.word	0x200003a8
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004770:	f000 ffea 	bl	8005748 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <vTaskSuspend+0x18>
 800477a:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <vTaskSuspend+0x108>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	e000      	b.n	8004782 <vTaskSuspend+0x1a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff f813 	bl	80037b4 <uxListRemove>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4936      	ldr	r1, [pc, #216]	; (8004874 <vTaskSuspend+0x10c>)
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <vTaskSuspend+0x58>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	2201      	movs	r2, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43da      	mvns	r2, r3
 80047b6:	4b30      	ldr	r3, [pc, #192]	; (8004878 <vTaskSuspend+0x110>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4013      	ands	r3, r2
 80047bc:	4a2e      	ldr	r2, [pc, #184]	; (8004878 <vTaskSuspend+0x110>)
 80047be:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3318      	adds	r3, #24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fff1 	bl	80037b4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4828      	ldr	r0, [pc, #160]	; (800487c <vTaskSuspend+0x114>)
 80047da:	f7fe ff8e 	bl	80036fa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d103      	bne.n	80047f2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80047f2:	f000 ffdb 	bl	80057ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <vTaskSuspend+0x118>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80047fe:	f000 ffa3 	bl	8005748 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004802:	f000 fc3d 	bl	8005080 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004806:	f000 ffd1 	bl	80057ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <vTaskSuspend+0x108>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d128      	bne.n	8004866 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <vTaskSuspend+0x118>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d018      	beq.n	800484e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <vTaskSuspend+0x11c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <vTaskSuspend+0xd4>
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	b672      	cpsid	i
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	b662      	cpsie	i
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	e7fe      	b.n	800483a <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <vTaskSuspend+0x120>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800484c:	e00b      	b.n	8004866 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <vTaskSuspend+0x114>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <vTaskSuspend+0x124>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d103      	bne.n	8004862 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <vTaskSuspend+0x108>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
	}
 8004860:	e001      	b.n	8004866 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8004862:	f000 f9ed 	bl	8004c40 <vTaskSwitchContext>
	}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000280 	.word	0x20000280
 8004874:	20000284 	.word	0x20000284
 8004878:	20000388 	.word	0x20000388
 800487c:	2000036c 	.word	0x2000036c
 8004880:	2000038c 	.word	0x2000038c
 8004884:	200003a8 	.word	0x200003a8
 8004888:	e000ed04 	.word	0xe000ed04
 800488c:	20000380 	.word	0x20000380

08004890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800489e:	463a      	mov	r2, r7
 80048a0:	1d39      	adds	r1, r7, #4
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fe4a 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	9202      	str	r2, [sp, #8]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	2300      	movs	r3, #0
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	460a      	mov	r2, r1
 80048be:	491f      	ldr	r1, [pc, #124]	; (800493c <vTaskStartScheduler+0xac>)
 80048c0:	481f      	ldr	r0, [pc, #124]	; (8004940 <vTaskStartScheduler+0xb0>)
 80048c2:	f7ff fd84 	bl	80043ce <xTaskCreateStatic>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <vTaskStartScheduler+0xb4>)
 80048ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <vTaskStartScheduler+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048d4:	2301      	movs	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e001      	b.n	80048de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d117      	bne.n	8004914 <vTaskStartScheduler+0x84>
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	b672      	cpsid	i
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	b662      	cpsie	i
 80048f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <vTaskStartScheduler+0xb8>)
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <vTaskStartScheduler+0xbc>)
 8004904:	2201      	movs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <vTaskStartScheduler+0xc0>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800490e:	f000 fe9f 	bl	8005650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004912:	e00f      	b.n	8004934 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d10b      	bne.n	8004934 <vTaskStartScheduler+0xa4>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	b672      	cpsid	i
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	b662      	cpsie	i
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e7fe      	b.n	8004932 <vTaskStartScheduler+0xa2>
}
 8004934:	bf00      	nop
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	08006024 	.word	0x08006024
 8004940:	08004f19 	.word	0x08004f19
 8004944:	200003a4 	.word	0x200003a4
 8004948:	200003a0 	.word	0x200003a0
 800494c:	2000038c 	.word	0x2000038c
 8004950:	20000384 	.word	0x20000384

08004954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004958:	4b04      	ldr	r3, [pc, #16]	; (800496c <vTaskSuspendAll+0x18>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	4a03      	ldr	r2, [pc, #12]	; (800496c <vTaskSuspendAll+0x18>)
 8004960:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	200003a8 	.word	0x200003a8

08004970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800497e:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <xTaskResumeAll+0x118>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <xTaskResumeAll+0x2e>
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	b672      	cpsid	i
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	b662      	cpsie	i
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	e7fe      	b.n	800499c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800499e:	f000 fed3 	bl	8005748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049a2:	4b39      	ldr	r3, [pc, #228]	; (8004a88 <xTaskResumeAll+0x118>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4a37      	ldr	r2, [pc, #220]	; (8004a88 <xTaskResumeAll+0x118>)
 80049aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ac:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <xTaskResumeAll+0x118>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d161      	bne.n	8004a78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <xTaskResumeAll+0x11c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05d      	beq.n	8004a78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049bc:	e02e      	b.n	8004a1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049be:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <xTaskResumeAll+0x120>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3318      	adds	r3, #24
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fef2 	bl	80037b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe feed 	bl	80037b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <xTaskResumeAll+0x124>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <xTaskResumeAll+0x124>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <xTaskResumeAll+0x128>)
 80049fa:	441a      	add	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7fe fe79 	bl	80036fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <xTaskResumeAll+0x12c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <xTaskResumeAll+0x130>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <xTaskResumeAll+0x120>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1cc      	bne.n	80049be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a2a:	f000 fb29 	bl	8005080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <xTaskResumeAll+0x134>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a3a:	f000 f847 	bl	8004acc <xTaskIncrementTick>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <xTaskResumeAll+0x130>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f1      	bne.n	8004a3a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004a56:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <xTaskResumeAll+0x134>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <xTaskResumeAll+0x130>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <xTaskResumeAll+0x138>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a78:	f000 fe98 	bl	80057ac <vPortExitCritical>

	return xAlreadyYielded;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200003a8 	.word	0x200003a8
 8004a8c:	20000380 	.word	0x20000380
 8004a90:	20000340 	.word	0x20000340
 8004a94:	20000388 	.word	0x20000388
 8004a98:	20000284 	.word	0x20000284
 8004a9c:	20000280 	.word	0x20000280
 8004aa0:	20000394 	.word	0x20000394
 8004aa4:	20000390 	.word	0x20000390
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <xTaskGetTickCount+0x1c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ab8:	687b      	ldr	r3, [r7, #4]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000384 	.word	0x20000384

08004acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <xTaskIncrementTick+0x148>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 8089 	bne.w	8004bf2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ae0:	4b4d      	ldr	r3, [pc, #308]	; (8004c18 <xTaskIncrementTick+0x14c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ae8:	4a4b      	ldr	r2, [pc, #300]	; (8004c18 <xTaskIncrementTick+0x14c>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d121      	bne.n	8004b38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004af4:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <xTaskIncrementTick+0x150>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <xTaskIncrementTick+0x4a>
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	b672      	cpsid	i
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	b662      	cpsie	i
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	e7fe      	b.n	8004b14 <xTaskIncrementTick+0x48>
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <xTaskIncrementTick+0x150>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <xTaskIncrementTick+0x154>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <xTaskIncrementTick+0x150>)
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4a3e      	ldr	r2, [pc, #248]	; (8004c20 <xTaskIncrementTick+0x154>)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	; (8004c24 <xTaskIncrementTick+0x158>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	4a3c      	ldr	r2, [pc, #240]	; (8004c24 <xTaskIncrementTick+0x158>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	f000 faa4 	bl	8005080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b38:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <xTaskIncrementTick+0x15c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d348      	bcc.n	8004bd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <xTaskIncrementTick+0x150>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b4c:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <xTaskIncrementTick+0x15c>)
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	601a      	str	r2, [r3, #0]
					break;
 8004b54:	e03e      	b.n	8004bd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b56:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <xTaskIncrementTick+0x150>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d203      	bcs.n	8004b76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b6e:	4a2e      	ldr	r2, [pc, #184]	; (8004c28 <xTaskIncrementTick+0x15c>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b74:	e02e      	b.n	8004bd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fe1a 	bl	80037b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	3318      	adds	r3, #24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fe11 	bl	80037b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <xTaskIncrementTick+0x160>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <xTaskIncrementTick+0x160>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <xTaskIncrementTick+0x164>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe fd9d 	bl	80036fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <xTaskIncrementTick+0x168>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d3b9      	bcc.n	8004b42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd2:	e7b6      	b.n	8004b42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bd4:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <xTaskIncrementTick+0x168>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	4915      	ldr	r1, [pc, #84]	; (8004c30 <xTaskIncrementTick+0x164>)
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d907      	bls.n	8004bfc <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e004      	b.n	8004bfc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <xTaskIncrementTick+0x16c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a0f      	ldr	r2, [pc, #60]	; (8004c38 <xTaskIncrementTick+0x16c>)
 8004bfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <xTaskIncrementTick+0x170>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c08:	697b      	ldr	r3, [r7, #20]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200003a8 	.word	0x200003a8
 8004c18:	20000384 	.word	0x20000384
 8004c1c:	20000338 	.word	0x20000338
 8004c20:	2000033c 	.word	0x2000033c
 8004c24:	20000398 	.word	0x20000398
 8004c28:	200003a0 	.word	0x200003a0
 8004c2c:	20000388 	.word	0x20000388
 8004c30:	20000284 	.word	0x20000284
 8004c34:	20000280 	.word	0x20000280
 8004c38:	20000390 	.word	0x20000390
 8004c3c:	20000394 	.word	0x20000394

08004c40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c46:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <vTaskSwitchContext+0xa4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <vTaskSwitchContext+0xa8>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c54:	e040      	b.n	8004cd8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <vTaskSwitchContext+0xa8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <vTaskSwitchContext+0xac>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	f1c3 031f 	rsb	r3, r3, #31
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	491f      	ldr	r1, [pc, #124]	; (8004cf0 <vTaskSwitchContext+0xb0>)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	b672      	cpsid	i
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	b662      	cpsie	i
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	e7fe      	b.n	8004c9c <vTaskSwitchContext+0x5c>
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <vTaskSwitchContext+0xb0>)
 8004caa:	4413      	add	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d104      	bne.n	8004cce <vTaskSwitchContext+0x8e>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <vTaskSwitchContext+0xb4>)
 8004cd6:	6013      	str	r3, [r2, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	200003a8 	.word	0x200003a8
 8004ce8:	20000394 	.word	0x20000394
 8004cec:	20000388 	.word	0x20000388
 8004cf0:	20000284 	.word	0x20000284
 8004cf4:	20000280 	.word	0x20000280

08004cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <vTaskPlaceOnEventList+0x28>
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	b672      	cpsid	i
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	b662      	cpsie	i
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e7fe      	b.n	8004d1e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vTaskPlaceOnEventList+0x48>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3318      	adds	r3, #24
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fe fd0a 	bl	8003742 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d2e:	2101      	movs	r1, #1
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f000 fb9b 	bl	800546c <prvAddCurrentTaskToDelayedList>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000280 	.word	0x20000280

08004d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <xTaskRemoveFromEventList+0x2e>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	b672      	cpsid	i
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	b662      	cpsie	i
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e7fe      	b.n	8004d70 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3318      	adds	r3, #24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fd1c 	bl	80037b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <xTaskRemoveFromEventList+0xb0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11c      	bne.n	8004dbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fd13 	bl	80037b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	2201      	movs	r2, #1
 8004d94:	409a      	lsls	r2, r3
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <xTaskRemoveFromEventList+0xb4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <xTaskRemoveFromEventList+0xb4>)
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <xTaskRemoveFromEventList+0xb8>)
 8004dae:	441a      	add	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7fe fc9f 	bl	80036fa <vListInsertEnd>
 8004dbc:	e005      	b.n	8004dca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	480e      	ldr	r0, [pc, #56]	; (8004e00 <xTaskRemoveFromEventList+0xbc>)
 8004dc6:	f7fe fc98 	bl	80036fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <xTaskRemoveFromEventList+0xc0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d905      	bls.n	8004de4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <xTaskRemoveFromEventList+0xc4>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e001      	b.n	8004de8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004de8:	697b      	ldr	r3, [r7, #20]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200003a8 	.word	0x200003a8
 8004df8:	20000388 	.word	0x20000388
 8004dfc:	20000284 	.word	0x20000284
 8004e00:	20000340 	.word	0x20000340
 8004e04:	20000280 	.word	0x20000280
 8004e08:	20000394 	.word	0x20000394

08004e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <vTaskInternalSetTimeOutState+0x24>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <vTaskInternalSetTimeOutState+0x28>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	605a      	str	r2, [r3, #4]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	20000398 	.word	0x20000398
 8004e34:	20000384 	.word	0x20000384

08004e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <xTaskCheckForTimeOut+0x28>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	b672      	cpsid	i
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	b662      	cpsie	i
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e7fe      	b.n	8004e5e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <xTaskCheckForTimeOut+0x46>
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e7fe      	b.n	8004e7c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8004e7e:	f000 fc63 	bl	8005748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e82:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <xTaskCheckForTimeOut+0xc0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d102      	bne.n	8004ea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	e023      	b.n	8004eea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <xTaskCheckForTimeOut+0xc4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d007      	beq.n	8004ebe <xTaskCheckForTimeOut+0x86>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e015      	b.n	8004eea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d20b      	bcs.n	8004ee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff99 	bl	8004e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e004      	b.n	8004eea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eea:	f000 fc5f 	bl	80057ac <vPortExitCritical>

	return xReturn;
 8004eee:	69fb      	ldr	r3, [r7, #28]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000384 	.word	0x20000384
 8004efc:	20000398 	.word	0x20000398

08004f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <vTaskMissedYield+0x14>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20000394 	.word	0x20000394

08004f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f20:	f000 f852 	bl	8004fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <prvIdleTask+0x28>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d9f9      	bls.n	8004f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <prvIdleTask+0x2c>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f3c:	e7f0      	b.n	8004f20 <prvIdleTask+0x8>
 8004f3e:	bf00      	nop
 8004f40:	20000284 	.word	0x20000284
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	e00c      	b.n	8004f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <prvInitialiseTaskLists+0x60>)
 8004f60:	4413      	add	r3, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fb9c 	bl	80036a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d9ef      	bls.n	8004f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f74:	480d      	ldr	r0, [pc, #52]	; (8004fac <prvInitialiseTaskLists+0x64>)
 8004f76:	f7fe fb93 	bl	80036a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f7a:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <prvInitialiseTaskLists+0x68>)
 8004f7c:	f7fe fb90 	bl	80036a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f80:	480c      	ldr	r0, [pc, #48]	; (8004fb4 <prvInitialiseTaskLists+0x6c>)
 8004f82:	f7fe fb8d 	bl	80036a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f86:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <prvInitialiseTaskLists+0x70>)
 8004f88:	f7fe fb8a 	bl	80036a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f8c:	480b      	ldr	r0, [pc, #44]	; (8004fbc <prvInitialiseTaskLists+0x74>)
 8004f8e:	f7fe fb87 	bl	80036a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <prvInitialiseTaskLists+0x78>)
 8004f94:	4a05      	ldr	r2, [pc, #20]	; (8004fac <prvInitialiseTaskLists+0x64>)
 8004f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <prvInitialiseTaskLists+0x7c>)
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <prvInitialiseTaskLists+0x68>)
 8004f9c:	601a      	str	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000284 	.word	0x20000284
 8004fac:	20000310 	.word	0x20000310
 8004fb0:	20000324 	.word	0x20000324
 8004fb4:	20000340 	.word	0x20000340
 8004fb8:	20000354 	.word	0x20000354
 8004fbc:	2000036c 	.word	0x2000036c
 8004fc0:	20000338 	.word	0x20000338
 8004fc4:	2000033c 	.word	0x2000033c

08004fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fce:	e019      	b.n	8005004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fd0:	f000 fbba 	bl	8005748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <prvCheckTasksWaitingTermination+0x4c>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe fbe7 	bl	80037b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvCheckTasksWaitingTermination+0x50>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <prvCheckTasksWaitingTermination+0x50>)
 8004fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8004ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ffa:	f000 fbd7 	bl	80057ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f80e 	bl	8005020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <prvCheckTasksWaitingTermination+0x54>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e1      	bne.n	8004fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000354 	.word	0x20000354
 8005018:	20000380 	.word	0x20000380
 800501c:	20000368 	.word	0x20000368

08005020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fd70 	bl	8005b1c <vPortFree>
				vPortFree( pxTCB );
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fd6d 	bl	8005b1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005042:	e019      	b.n	8005078 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800504a:	2b01      	cmp	r3, #1
 800504c:	d103      	bne.n	8005056 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fd64 	bl	8005b1c <vPortFree>
	}
 8005054:	e010      	b.n	8005078 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505c:	2b02      	cmp	r3, #2
 800505e:	d00b      	beq.n	8005078 <prvDeleteTCB+0x58>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	b672      	cpsid	i
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	b662      	cpsie	i
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e7fe      	b.n	8005076 <prvDeleteTCB+0x56>
	}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <prvResetNextTaskUnblockTime+0x38>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <prvResetNextTaskUnblockTime+0x3c>)
 8005092:	f04f 32ff 	mov.w	r2, #4294967295
 8005096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005098:	e008      	b.n	80050ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <prvResetNextTaskUnblockTime+0x38>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a04      	ldr	r2, [pc, #16]	; (80050bc <prvResetNextTaskUnblockTime+0x3c>)
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20000338 	.word	0x20000338
 80050bc:	200003a0 	.word	0x200003a0

080050c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <xTaskGetSchedulerState+0x34>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050ce:	2301      	movs	r3, #1
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	e008      	b.n	80050e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <xTaskGetSchedulerState+0x38>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050dc:	2302      	movs	r3, #2
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	e001      	b.n	80050e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050e6:	687b      	ldr	r3, [r7, #4]
	}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	2000038c 	.word	0x2000038c
 80050f8:	200003a8 	.word	0x200003a8

080050fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d069      	beq.n	80051e6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005116:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <xTaskPriorityInherit+0xf4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d259      	bcs.n	80051d4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db06      	blt.n	8005136 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <xTaskPriorityInherit+0xf4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f1c3 0207 	rsb	r2, r3, #7
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6959      	ldr	r1, [r3, #20]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4a2b      	ldr	r2, [pc, #172]	; (80051f4 <xTaskPriorityInherit+0xf8>)
 8005148:	4413      	add	r3, r2
 800514a:	4299      	cmp	r1, r3
 800514c:	d13a      	bne.n	80051c4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fb2e 	bl	80037b4 <uxListRemove>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d115      	bne.n	800518a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005162:	4924      	ldr	r1, [pc, #144]	; (80051f4 <xTaskPriorityInherit+0xf8>)
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xTaskPriorityInherit+0x8e>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	2201      	movs	r2, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43da      	mvns	r2, r3
 8005180:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <xTaskPriorityInherit+0xfc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4013      	ands	r3, r2
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <xTaskPriorityInherit+0xfc>)
 8005188:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <xTaskPriorityInherit+0xf4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	2201      	movs	r2, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <xTaskPriorityInherit+0xfc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <xTaskPriorityInherit+0xfc>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <xTaskPriorityInherit+0xf8>)
 80051b4:	441a      	add	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe fa9c 	bl	80036fa <vListInsertEnd>
 80051c2:	e004      	b.n	80051ce <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <xTaskPriorityInherit+0xf4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e008      	b.n	80051e6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <xTaskPriorityInherit+0xf4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	429a      	cmp	r2, r3
 80051e0:	d201      	bcs.n	80051e6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051e6:	68fb      	ldr	r3, [r7, #12]
	}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000280 	.word	0x20000280
 80051f4:	20000284 	.word	0x20000284
 80051f8:	20000388 	.word	0x20000388

080051fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d070      	beq.n	80052f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005212:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <xTaskPriorityDisinherit+0x104>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	429a      	cmp	r2, r3
 800521a:	d00b      	beq.n	8005234 <xTaskPriorityDisinherit+0x38>
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	b672      	cpsid	i
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	b662      	cpsie	i
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e7fe      	b.n	8005232 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <xTaskPriorityDisinherit+0x58>
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	b672      	cpsid	i
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	b662      	cpsie	i
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	e7fe      	b.n	8005252 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	429a      	cmp	r2, r3
 8005268:	d044      	beq.n	80052f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	2b00      	cmp	r3, #0
 8005270:	d140      	bne.n	80052f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fa9c 	bl	80037b4 <uxListRemove>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d115      	bne.n	80052ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	491f      	ldr	r1, [pc, #124]	; (8005304 <xTaskPriorityDisinherit+0x108>)
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xTaskPriorityDisinherit+0xb2>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	2201      	movs	r2, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43da      	mvns	r2, r3
 80052a4:	4b18      	ldr	r3, [pc, #96]	; (8005308 <xTaskPriorityDisinherit+0x10c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4013      	ands	r3, r2
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <xTaskPriorityDisinherit+0x10c>)
 80052ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	f1c3 0207 	rsb	r2, r3, #7
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	2201      	movs	r2, #1
 80052c8:	409a      	lsls	r2, r3
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <xTaskPriorityDisinherit+0x10c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <xTaskPriorityDisinherit+0x10c>)
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4a08      	ldr	r2, [pc, #32]	; (8005304 <xTaskPriorityDisinherit+0x108>)
 80052e2:	441a      	add	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f7fe fa05 	bl	80036fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052f4:	697b      	ldr	r3, [r7, #20]
	}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000280 	.word	0x20000280
 8005304:	20000284 	.word	0x20000284
 8005308:	20000388 	.word	0x20000388

0800530c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800531a:	2301      	movs	r3, #1
 800531c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8085 	beq.w	8005430 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	b672      	cpsid	i
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	b662      	cpsie	i
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e7fe      	b.n	8005344 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d902      	bls.n	8005356 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	e002      	b.n	800535c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	429a      	cmp	r2, r3
 8005364:	d064      	beq.n	8005430 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	429a      	cmp	r2, r3
 800536e:	d15f      	bne.n	8005430 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005370:	4b31      	ldr	r3, [pc, #196]	; (8005438 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	429a      	cmp	r2, r3
 8005378:	d10b      	bne.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	b672      	cpsid	i
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	b662      	cpsie	i
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	e7fe      	b.n	8005390 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db04      	blt.n	80053b0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f1c3 0207 	rsb	r2, r3, #7
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	6959      	ldr	r1, [r3, #20]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80053c0:	4413      	add	r3, r2
 80053c2:	4299      	cmp	r1, r3
 80053c4:	d134      	bne.n	8005430 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe f9f2 	bl	80037b4 <uxListRemove>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d115      	bne.n	8005402 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053da:	4918      	ldr	r1, [pc, #96]	; (800543c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	2201      	movs	r2, #1
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43da      	mvns	r2, r3
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4013      	ands	r3, r2
 80053fe:	4a10      	ldr	r2, [pc, #64]	; (8005440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005400:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	2201      	movs	r2, #1
 8005408:	409a      	lsls	r2, r3
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4313      	orrs	r3, r2
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a06      	ldr	r2, [pc, #24]	; (800543c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005422:	441a      	add	r2, r3
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe f965 	bl	80036fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005430:	bf00      	nop
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000280 	.word	0x20000280
 800543c:	20000284 	.word	0x20000284
 8005440:	20000388 	.word	0x20000388

08005444 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005448:	4b07      	ldr	r3, [pc, #28]	; (8005468 <pvTaskIncrementMutexHeldCount+0x24>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <pvTaskIncrementMutexHeldCount+0x24>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005456:	3201      	adds	r2, #1
 8005458:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800545a:	4b03      	ldr	r3, [pc, #12]	; (8005468 <pvTaskIncrementMutexHeldCount+0x24>)
 800545c:	681b      	ldr	r3, [r3, #0]
	}
 800545e:	4618      	mov	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20000280 	.word	0x20000280

0800546c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800547c:	4b28      	ldr	r3, [pc, #160]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3304      	adds	r3, #4
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe f996 	bl	80037b4 <uxListRemove>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	2201      	movs	r2, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43da      	mvns	r2, r3
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4013      	ands	r3, r2
 80054a2:	4a20      	ldr	r2, [pc, #128]	; (8005524 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d10a      	bne.n	80054c4 <prvAddCurrentTaskToDelayedList+0x58>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b4:	4b1a      	ldr	r3, [pc, #104]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	481a      	ldr	r0, [pc, #104]	; (8005528 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054be:	f7fe f91c 	bl	80036fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054c2:	e026      	b.n	8005512 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054cc:	4b14      	ldr	r3, [pc, #80]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d209      	bcs.n	80054f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <prvAddCurrentTaskToDelayedList+0xc0>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fe f92a 	bl	8003742 <vListInsert>
}
 80054ee:	e010      	b.n	8005512 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <prvAddCurrentTaskToDelayedList+0xc4>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f7fe f920 	bl	8003742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	d202      	bcs.n	8005512 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6013      	str	r3, [r2, #0]
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000384 	.word	0x20000384
 8005520:	20000280 	.word	0x20000280
 8005524:	20000388 	.word	0x20000388
 8005528:	2000036c 	.word	0x2000036c
 800552c:	2000033c 	.word	0x2000033c
 8005530:	20000338 	.word	0x20000338
 8005534:	200003a0 	.word	0x200003a0

08005538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b04      	subs	r3, #4
 8005548:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3b04      	subs	r3, #4
 8005556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3b04      	subs	r3, #4
 8005566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005568:	4a0c      	ldr	r2, [pc, #48]	; (800559c <pxPortInitialiseStack+0x64>)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b14      	subs	r3, #20
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f06f 0202 	mvn.w	r2, #2
 8005586:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b20      	subs	r3, #32
 800558c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	080055a1 	.word	0x080055a1

080055a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <prvTaskExitError+0x58>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d00b      	beq.n	80055cc <prvTaskExitError+0x2c>
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	b672      	cpsid	i
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	b662      	cpsie	i
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e7fe      	b.n	80055ca <prvTaskExitError+0x2a>
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	b672      	cpsid	i
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	b662      	cpsie	i
 80055e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055e2:	bf00      	nop
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0fc      	beq.n	80055e4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	2000000c 	.word	0x2000000c
 80055fc:	00000000 	.word	0x00000000

08005600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <pxCurrentTCBConst2>)
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	f380 8809 	msr	PSP, r0
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	4770      	bx	lr
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst2>:
 8005620:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005628:	4808      	ldr	r0, [pc, #32]	; (800564c <prvPortStartFirstTask+0x24>)
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	6800      	ldr	r0, [r0, #0]
 800562e:	f380 8808 	msr	MSP, r0
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8814 	msr	CONTROL, r0
 800563a:	b662      	cpsie	i
 800563c:	b661      	cpsie	f
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	df00      	svc	0
 8005648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800564a:	bf00      	nop
 800564c:	e000ed08 	.word	0xe000ed08

08005650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005656:	4b36      	ldr	r3, [pc, #216]	; (8005730 <xPortStartScheduler+0xe0>)
 8005658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	22ff      	movs	r2, #255	; 0xff
 8005666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <xPortStartScheduler+0xe4>)
 800567c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <xPortStartScheduler+0xe8>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005684:	e009      	b.n	800569a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005686:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <xPortStartScheduler+0xe8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3b01      	subs	r3, #1
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <xPortStartScheduler+0xe8>)
 800568e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d0ef      	beq.n	8005686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <xPortStartScheduler+0xe8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1c3 0307 	rsb	r3, r3, #7
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d00b      	beq.n	80056ca <xPortStartScheduler+0x7a>
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	b672      	cpsid	i
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	b662      	cpsie	i
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	e7fe      	b.n	80056c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056ca:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <xPortStartScheduler+0xe8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <xPortStartScheduler+0xe8>)
 80056d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056d4:	4b18      	ldr	r3, [pc, #96]	; (8005738 <xPortStartScheduler+0xe8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <xPortStartScheduler+0xe8>)
 80056de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056e8:	4b14      	ldr	r3, [pc, #80]	; (800573c <xPortStartScheduler+0xec>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a13      	ldr	r2, [pc, #76]	; (800573c <xPortStartScheduler+0xec>)
 80056ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056f4:	4b11      	ldr	r3, [pc, #68]	; (800573c <xPortStartScheduler+0xec>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a10      	ldr	r2, [pc, #64]	; (800573c <xPortStartScheduler+0xec>)
 80056fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005700:	f000 f8d4 	bl	80058ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <xPortStartScheduler+0xf0>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800570a:	f000 f8f3 	bl	80058f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <xPortStartScheduler+0xf4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <xPortStartScheduler+0xf4>)
 8005714:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005718:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800571a:	f7ff ff85 	bl	8005628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800571e:	f7ff fa8f 	bl	8004c40 <vTaskSwitchContext>
	prvTaskExitError();
 8005722:	f7ff ff3d 	bl	80055a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	e000e400 	.word	0xe000e400
 8005734:	200003ac 	.word	0x200003ac
 8005738:	200003b0 	.word	0x200003b0
 800573c:	e000ed20 	.word	0xe000ed20
 8005740:	2000000c 	.word	0x2000000c
 8005744:	e000ef34 	.word	0xe000ef34

08005748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	b672      	cpsid	i
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	b662      	cpsie	i
 8005762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <vPortEnterCritical+0x5c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <vPortEnterCritical+0x5c>)
 800576c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800576e:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <vPortEnterCritical+0x5c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d110      	bne.n	8005798 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <vPortEnterCritical+0x60>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <vPortEnterCritical+0x50>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	b672      	cpsid	i
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	b662      	cpsie	i
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	e7fe      	b.n	8005796 <vPortEnterCritical+0x4e>
	}
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	2000000c 	.word	0x2000000c
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <vPortExitCritical+0x26>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	b672      	cpsid	i
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	b662      	cpsie	i
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	e7fe      	b.n	80057d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <vPortExitCritical+0x50>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <vPortExitCritical+0x50>)
 80057da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <vPortExitCritical+0x50>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <vPortExitCritical+0x42>
 80057e4:	2300      	movs	r3, #0
 80057e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	2000000c 	.word	0x2000000c

08005800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005800:	f3ef 8009 	mrs	r0, PSP
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <pxCurrentTCBConst>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	f01e 0f10 	tst.w	lr, #16
 8005810:	bf08      	it	eq
 8005812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	6010      	str	r0, [r2, #0]
 800581c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005824:	b672      	cpsid	i
 8005826:	f380 8811 	msr	BASEPRI, r0
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	b662      	cpsie	i
 8005834:	f7ff fa04 	bl	8004c40 <vTaskSwitchContext>
 8005838:	f04f 0000 	mov.w	r0, #0
 800583c:	f380 8811 	msr	BASEPRI, r0
 8005840:	bc09      	pop	{r0, r3}
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f01e 0f10 	tst.w	lr, #16
 800584e:	bf08      	it	eq
 8005850:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005854:	f380 8809 	msr	PSP, r0
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop

08005860 <pxCurrentTCBConst>:
 8005860:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	b672      	cpsid	i
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	b662      	cpsie	i
 8005882:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005884:	f7ff f922 	bl	8004acc <xTaskIncrementTick>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <SysTick_Handler+0x40>)
 8005890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	2300      	movs	r3, #0
 8005898:	603b      	str	r3, [r7, #0]
	__asm volatile
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <vPortSetupTimerInterrupt+0x34>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <vPortSetupTimerInterrupt+0x38>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <vPortSetupTimerInterrupt+0x3c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <vPortSetupTimerInterrupt+0x40>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <vPortSetupTimerInterrupt+0x44>)
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <vPortSetupTimerInterrupt+0x34>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e010 	.word	0xe000e010
 80058e4:	e000e018 	.word	0xe000e018
 80058e8:	20000000 	.word	0x20000000
 80058ec:	10624dd3 	.word	0x10624dd3
 80058f0:	e000e014 	.word	0xe000e014

080058f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005904 <vPortEnableVFP+0x10>
 80058f8:	6801      	ldr	r1, [r0, #0]
 80058fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058fe:	6001      	str	r1, [r0, #0]
 8005900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005902:	bf00      	nop
 8005904:	e000ed88 	.word	0xe000ed88

08005908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800590e:	f3ef 8305 	mrs	r3, IPSR
 8005912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d915      	bls.n	8005946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <vPortValidateInterruptPriority+0x74>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <vPortValidateInterruptPriority+0x78>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	7afa      	ldrb	r2, [r7, #11]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20b      	bcs.n	8005946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	b672      	cpsid	i
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	b662      	cpsie	i
 8005942:	607b      	str	r3, [r7, #4]
 8005944:	e7fe      	b.n	8005944 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <vPortValidateInterruptPriority+0x7c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800594e:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <vPortValidateInterruptPriority+0x80>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d90b      	bls.n	800596e <vPortValidateInterruptPriority+0x66>
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	b672      	cpsid	i
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	b662      	cpsie	i
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	e7fe      	b.n	800596c <vPortValidateInterruptPriority+0x64>
	}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000e3f0 	.word	0xe000e3f0
 8005980:	200003ac 	.word	0x200003ac
 8005984:	e000ed0c 	.word	0xe000ed0c
 8005988:	200003b0 	.word	0x200003b0

0800598c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005998:	f7fe ffdc 	bl	8004954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800599c:	4b5a      	ldr	r3, [pc, #360]	; (8005b08 <pvPortMalloc+0x17c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059a4:	f000 f916 	bl	8005bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059a8:	4b58      	ldr	r3, [pc, #352]	; (8005b0c <pvPortMalloc+0x180>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 8090 	bne.w	8005ad6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01e      	beq.n	80059fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80059bc:	2208      	movs	r2, #8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d015      	beq.n	80059fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	3308      	adds	r3, #8
 80059d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <pvPortMalloc+0x6e>
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	b672      	cpsid	i
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	b662      	cpsie	i
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	e7fe      	b.n	80059f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d06a      	beq.n	8005ad6 <pvPortMalloc+0x14a>
 8005a00:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <pvPortMalloc+0x184>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d865      	bhi.n	8005ad6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a0a:	4b42      	ldr	r3, [pc, #264]	; (8005b14 <pvPortMalloc+0x188>)
 8005a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a0e:	4b41      	ldr	r3, [pc, #260]	; (8005b14 <pvPortMalloc+0x188>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a14:	e004      	b.n	8005a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d903      	bls.n	8005a32 <pvPortMalloc+0xa6>
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f1      	bne.n	8005a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a32:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <pvPortMalloc+0x17c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d04c      	beq.n	8005ad6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2208      	movs	r2, #8
 8005a42:	4413      	add	r3, r2
 8005a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	1ad2      	subs	r2, r2, r3
 8005a56:	2308      	movs	r3, #8
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d920      	bls.n	8005aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4413      	add	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <pvPortMalloc+0xfc>
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	b672      	cpsid	i
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	b662      	cpsie	i
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e7fe      	b.n	8005a86 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a9a:	69b8      	ldr	r0, [r7, #24]
 8005a9c:	f000 f8fc 	bl	8005c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005aa0:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <pvPortMalloc+0x184>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <pvPortMalloc+0x184>)
 8005aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005aae:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <pvPortMalloc+0x184>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <pvPortMalloc+0x18c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d203      	bcs.n	8005ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pvPortMalloc+0x184>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <pvPortMalloc+0x18c>)
 8005ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <pvPortMalloc+0x180>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ad6:	f7fe ff4b 	bl	8004970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <pvPortMalloc+0x170>
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	b672      	cpsid	i
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	b662      	cpsie	i
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e7fe      	b.n	8005afa <pvPortMalloc+0x16e>
	return pvReturn;
 8005afc:	69fb      	ldr	r3, [r7, #28]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3728      	adds	r7, #40	; 0x28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20003fbc 	.word	0x20003fbc
 8005b0c:	20003fc8 	.word	0x20003fc8
 8005b10:	20003fc0 	.word	0x20003fc0
 8005b14:	20003fb4 	.word	0x20003fb4
 8005b18:	20003fc4 	.word	0x20003fc4

08005b1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d04a      	beq.n	8005bc4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b2e:	2308      	movs	r3, #8
 8005b30:	425b      	negs	r3, r3
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <vPortFree+0xb0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <vPortFree+0x46>
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	b672      	cpsid	i
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	b662      	cpsie	i
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e7fe      	b.n	8005b60 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <vPortFree+0x66>
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	b672      	cpsid	i
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	b662      	cpsie	i
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	e7fe      	b.n	8005b80 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <vPortFree+0xb0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d019      	beq.n	8005bc4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d115      	bne.n	8005bc4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <vPortFree+0xb0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ba8:	f7fe fed4 	bl	8004954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <vPortFree+0xb4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <vPortFree+0xb4>)
 8005bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bba:	6938      	ldr	r0, [r7, #16]
 8005bbc:	f000 f86c 	bl	8005c98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005bc0:	f7fe fed6 	bl	8004970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bc4:	bf00      	nop
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20003fc8 	.word	0x20003fc8
 8005bd0:	20003fc0 	.word	0x20003fc0

08005bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <prvHeapInit+0xac>)
 8005be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00c      	beq.n	8005c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3307      	adds	r3, #7
 8005bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <prvHeapInit+0xac>)
 8005c04:	4413      	add	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <prvHeapInit+0xb0>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <prvHeapInit+0xb0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <prvHeapInit+0xb4>)
 8005c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <prvHeapInit+0xb4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <prvHeapInit+0xb4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <prvHeapInit+0xb4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <prvHeapInit+0xb8>)
 8005c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <prvHeapInit+0xbc>)
 8005c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <prvHeapInit+0xc0>)
 8005c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	200003b4 	.word	0x200003b4
 8005c84:	20003fb4 	.word	0x20003fb4
 8005c88:	20003fbc 	.word	0x20003fbc
 8005c8c:	20003fc4 	.word	0x20003fc4
 8005c90:	20003fc0 	.word	0x20003fc0
 8005c94:	20003fc8 	.word	0x20003fc8

08005c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <prvInsertBlockIntoFreeList+0xac>)
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e002      	b.n	8005cac <prvInsertBlockIntoFreeList+0x14>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d8f7      	bhi.n	8005ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d108      	bne.n	8005cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d118      	bne.n	8005d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d00d      	beq.n	8005d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e008      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e003      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d002      	beq.n	8005d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20003fb4 	.word	0x20003fb4
 8005d48:	20003fbc 	.word	0x20003fbc

08005d4c <__libc_init_array>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4e0d      	ldr	r6, [pc, #52]	; (8005d84 <__libc_init_array+0x38>)
 8005d50:	4c0d      	ldr	r4, [pc, #52]	; (8005d88 <__libc_init_array+0x3c>)
 8005d52:	1ba4      	subs	r4, r4, r6
 8005d54:	10a4      	asrs	r4, r4, #2
 8005d56:	2500      	movs	r5, #0
 8005d58:	42a5      	cmp	r5, r4
 8005d5a:	d109      	bne.n	8005d70 <__libc_init_array+0x24>
 8005d5c:	4e0b      	ldr	r6, [pc, #44]	; (8005d8c <__libc_init_array+0x40>)
 8005d5e:	4c0c      	ldr	r4, [pc, #48]	; (8005d90 <__libc_init_array+0x44>)
 8005d60:	f000 f82c 	bl	8005dbc <_init>
 8005d64:	1ba4      	subs	r4, r4, r6
 8005d66:	10a4      	asrs	r4, r4, #2
 8005d68:	2500      	movs	r5, #0
 8005d6a:	42a5      	cmp	r5, r4
 8005d6c:	d105      	bne.n	8005d7a <__libc_init_array+0x2e>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d74:	4798      	blx	r3
 8005d76:	3501      	adds	r5, #1
 8005d78:	e7ee      	b.n	8005d58 <__libc_init_array+0xc>
 8005d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d7e:	4798      	blx	r3
 8005d80:	3501      	adds	r5, #1
 8005d82:	e7f2      	b.n	8005d6a <__libc_init_array+0x1e>
 8005d84:	0800604c 	.word	0x0800604c
 8005d88:	0800604c 	.word	0x0800604c
 8005d8c:	0800604c 	.word	0x0800604c
 8005d90:	08006050 	.word	0x08006050

08005d94 <memcpy>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	1e43      	subs	r3, r0, #1
 8005d98:	440a      	add	r2, r1
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	d100      	bne.n	8005da0 <memcpy+0xc>
 8005d9e:	bd10      	pop	{r4, pc}
 8005da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da8:	e7f7      	b.n	8005d9a <memcpy+0x6>

08005daa <memset>:
 8005daa:	4402      	add	r2, r0
 8005dac:	4603      	mov	r3, r0
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d100      	bne.n	8005db4 <memset+0xa>
 8005db2:	4770      	bx	lr
 8005db4:	f803 1b01 	strb.w	r1, [r3], #1
 8005db8:	e7f9      	b.n	8005dae <memset+0x4>
	...

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
