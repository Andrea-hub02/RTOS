
F767ZIV2_Gatekeeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e44  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006190  08006190  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006198  08006198  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080061a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a38  20000010  080061b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a48  080061b0  00024a48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bce  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d41  00000000  00000000  00038c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003b950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003565  00000000  00000000  0003dec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f397  00000000  00000000  0004142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102809  00000000  00000000  000507c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  00153048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	0800602c 	.word	0x0800602c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	0800602c 	.word	0x0800602c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b972 	b.w	800054c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	4688      	mov	r8, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14b      	bne.n	8000326 <__udivmoddi4+0xa6>
 800028e:	428a      	cmp	r2, r1
 8000290:	4615      	mov	r5, r2
 8000292:	d967      	bls.n	8000364 <__udivmoddi4+0xe4>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0720 	rsb	r7, r2, #32
 800029e:	fa01 f302 	lsl.w	r3, r1, r2
 80002a2:	fa20 f707 	lsr.w	r7, r0, r7
 80002a6:	4095      	lsls	r5, r2
 80002a8:	ea47 0803 	orr.w	r8, r7, r3
 80002ac:	4094      	lsls	r4, r2
 80002ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b8:	fa1f fc85 	uxth.w	ip, r5
 80002bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c4:	fb07 f10c 	mul.w	r1, r7, ip
 80002c8:	4299      	cmp	r1, r3
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x60>
 80002cc:	18eb      	adds	r3, r5, r3
 80002ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80002d2:	f080 811b 	bcs.w	800050c <__udivmoddi4+0x28c>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 8118 	bls.w	800050c <__udivmoddi4+0x28c>
 80002dc:	3f02      	subs	r7, #2
 80002de:	442b      	add	r3, r5
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f4:	45a4      	cmp	ip, r4
 80002f6:	d909      	bls.n	800030c <__udivmoddi4+0x8c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	f080 8107 	bcs.w	8000510 <__udivmoddi4+0x290>
 8000302:	45a4      	cmp	ip, r4
 8000304:	f240 8104 	bls.w	8000510 <__udivmoddi4+0x290>
 8000308:	3802      	subs	r0, #2
 800030a:	442c      	add	r4, r5
 800030c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000310:	eba4 040c 	sub.w	r4, r4, ip
 8000314:	2700      	movs	r7, #0
 8000316:	b11e      	cbz	r6, 8000320 <__udivmoddi4+0xa0>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c6 4300 	strd	r4, r3, [r6]
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0xbe>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80eb 	beq.w	8000506 <__udivmoddi4+0x286>
 8000330:	2700      	movs	r7, #0
 8000332:	e9c6 0100 	strd	r0, r1, [r6]
 8000336:	4638      	mov	r0, r7
 8000338:	4639      	mov	r1, r7
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f783 	clz	r7, r3
 8000342:	2f00      	cmp	r7, #0
 8000344:	d147      	bne.n	80003d6 <__udivmoddi4+0x156>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0xd0>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80fa 	bhi.w	8000544 <__udivmoddi4+0x2c4>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0303 	sbc.w	r3, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	4698      	mov	r8, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d0e0      	beq.n	8000320 <__udivmoddi4+0xa0>
 800035e:	e9c6 4800 	strd	r4, r8, [r6]
 8000362:	e7dd      	b.n	8000320 <__udivmoddi4+0xa0>
 8000364:	b902      	cbnz	r2, 8000368 <__udivmoddi4+0xe8>
 8000366:	deff      	udf	#255	; 0xff
 8000368:	fab2 f282 	clz	r2, r2
 800036c:	2a00      	cmp	r2, #0
 800036e:	f040 808f 	bne.w	8000490 <__udivmoddi4+0x210>
 8000372:	1b49      	subs	r1, r1, r5
 8000374:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000378:	fa1f f885 	uxth.w	r8, r5
 800037c:	2701      	movs	r7, #1
 800037e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fb0e 111c 	mls	r1, lr, ip, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb08 f10c 	mul.w	r1, r8, ip
 8000390:	4299      	cmp	r1, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000394:	18eb      	adds	r3, r5, r3
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4299      	cmp	r1, r3
 800039e:	f200 80cd 	bhi.w	800053c <__udivmoddi4+0x2bc>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80003b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x14c>
 80003bc:	192c      	adds	r4, r5, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x14a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80b6 	bhi.w	8000536 <__udivmoddi4+0x2b6>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e79f      	b.n	8000316 <__udivmoddi4+0x96>
 80003d6:	f1c7 0c20 	rsb	ip, r7, #32
 80003da:	40bb      	lsls	r3, r7
 80003dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e4:	fa01 f407 	lsl.w	r4, r1, r7
 80003e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80003f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f4:	4325      	orrs	r5, r4
 80003f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003fa:	0c2c      	lsrs	r4, r5, #16
 80003fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000400:	fa1f fa8e 	uxth.w	sl, lr
 8000404:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000408:	fb09 f40a 	mul.w	r4, r9, sl
 800040c:	429c      	cmp	r4, r3
 800040e:	fa02 f207 	lsl.w	r2, r2, r7
 8000412:	fa00 f107 	lsl.w	r1, r0, r7
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1e 0303 	adds.w	r3, lr, r3
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	f080 8087 	bcs.w	8000532 <__udivmoddi4+0x2b2>
 8000424:	429c      	cmp	r4, r3
 8000426:	f240 8084 	bls.w	8000532 <__udivmoddi4+0x2b2>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4473      	add	r3, lr
 8000430:	1b1b      	subs	r3, r3, r4
 8000432:	b2ad      	uxth	r5, r5
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000440:	fb00 fa0a 	mul.w	sl, r0, sl
 8000444:	45a2      	cmp	sl, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1e 0404 	adds.w	r4, lr, r4
 800044c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000450:	d26b      	bcs.n	800052a <__udivmoddi4+0x2aa>
 8000452:	45a2      	cmp	sl, r4
 8000454:	d969      	bls.n	800052a <__udivmoddi4+0x2aa>
 8000456:	3802      	subs	r0, #2
 8000458:	4474      	add	r4, lr
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	eba4 040a 	sub.w	r4, r4, sl
 8000466:	454c      	cmp	r4, r9
 8000468:	46c2      	mov	sl, r8
 800046a:	464b      	mov	r3, r9
 800046c:	d354      	bcc.n	8000518 <__udivmoddi4+0x298>
 800046e:	d051      	beq.n	8000514 <__udivmoddi4+0x294>
 8000470:	2e00      	cmp	r6, #0
 8000472:	d069      	beq.n	8000548 <__udivmoddi4+0x2c8>
 8000474:	ebb1 050a 	subs.w	r5, r1, sl
 8000478:	eb64 0403 	sbc.w	r4, r4, r3
 800047c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000480:	40fd      	lsrs	r5, r7
 8000482:	40fc      	lsrs	r4, r7
 8000484:	ea4c 0505 	orr.w	r5, ip, r5
 8000488:	e9c6 5400 	strd	r5, r4, [r6]
 800048c:	2700      	movs	r7, #0
 800048e:	e747      	b.n	8000320 <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f703 	lsr.w	r7, r0, r3
 8000498:	4095      	lsls	r5, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	fa21 f303 	lsr.w	r3, r1, r3
 80004a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a6:	4338      	orrs	r0, r7
 80004a8:	0c01      	lsrs	r1, r0, #16
 80004aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ae:	fa1f f885 	uxth.w	r8, r5
 80004b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb07 f308 	mul.w	r3, r7, r8
 80004be:	428b      	cmp	r3, r1
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x256>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004cc:	d22f      	bcs.n	800052e <__udivmoddi4+0x2ae>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d92d      	bls.n	800052e <__udivmoddi4+0x2ae>
 80004d2:	3f02      	subs	r7, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1acb      	subs	r3, r1, r3
 80004d8:	b281      	uxth	r1, r0
 80004da:	fbb3 f0fe 	udiv	r0, r3, lr
 80004de:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e6:	fb00 f308 	mul.w	r3, r0, r8
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x27e>
 80004ee:	1869      	adds	r1, r5, r1
 80004f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f4:	d217      	bcs.n	8000526 <__udivmoddi4+0x2a6>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d915      	bls.n	8000526 <__udivmoddi4+0x2a6>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4429      	add	r1, r5
 80004fe:	1ac9      	subs	r1, r1, r3
 8000500:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000504:	e73b      	b.n	800037e <__udivmoddi4+0xfe>
 8000506:	4637      	mov	r7, r6
 8000508:	4630      	mov	r0, r6
 800050a:	e709      	b.n	8000320 <__udivmoddi4+0xa0>
 800050c:	4607      	mov	r7, r0
 800050e:	e6e7      	b.n	80002e0 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fb      	b.n	800030c <__udivmoddi4+0x8c>
 8000514:	4541      	cmp	r1, r8
 8000516:	d2ab      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 8000518:	ebb8 0a02 	subs.w	sl, r8, r2
 800051c:	eb69 020e 	sbc.w	r2, r9, lr
 8000520:	3801      	subs	r0, #1
 8000522:	4613      	mov	r3, r2
 8000524:	e7a4      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000526:	4660      	mov	r0, ip
 8000528:	e7e9      	b.n	80004fe <__udivmoddi4+0x27e>
 800052a:	4618      	mov	r0, r3
 800052c:	e795      	b.n	800045a <__udivmoddi4+0x1da>
 800052e:	4667      	mov	r7, ip
 8000530:	e7d1      	b.n	80004d6 <__udivmoddi4+0x256>
 8000532:	4681      	mov	r9, r0
 8000534:	e77c      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000536:	3802      	subs	r0, #2
 8000538:	442c      	add	r4, r5
 800053a:	e747      	b.n	80003cc <__udivmoddi4+0x14c>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	442b      	add	r3, r5
 8000542:	e72f      	b.n	80003a4 <__udivmoddi4+0x124>
 8000544:	4638      	mov	r0, r7
 8000546:	e708      	b.n	800035a <__udivmoddi4+0xda>
 8000548:	4637      	mov	r7, r6
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0xa0>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fab1 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f840 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8ea 	bl	8000734 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000560:	f000 f8b8 	bl	80006d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000564:	f002 fdda 	bl	800311c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msgQueue */
  msgQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &msgQueue_attributes);
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <main+0x60>)
 800056a:	2102      	movs	r1, #2
 800056c:	2010      	movs	r0, #16
 800056e:	f002 fee5 	bl	800333c <osMessageQueueNew>
 8000572:	4602      	mov	r2, r0
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x64>)
 8000576:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of writerOne */
  writerOneHandle = osThreadNew(writerOneHook, NULL, &writerOne_attributes);
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <main+0x68>)
 800057a:	2100      	movs	r1, #0
 800057c:	480f      	ldr	r0, [pc, #60]	; (80005bc <main+0x6c>)
 800057e:	f002 fe37 	bl	80031f0 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <main+0x70>)
 8000586:	601a      	str	r2, [r3, #0]

  /* creation of writerTwo */
  writerTwoHandle = osThreadNew(writerTwoHook, NULL, &writerTwo_attributes);
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <main+0x74>)
 800058a:	2100      	movs	r1, #0
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <main+0x78>)
 800058e:	f002 fe2f 	bl	80031f0 <osThreadNew>
 8000592:	4602      	mov	r2, r0
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <main+0x7c>)
 8000596:	601a      	str	r2, [r3, #0]

  /* creation of gateKeeper */
  gateKeeperHandle = osThreadNew(gateKeeperHook, NULL, &gateKeeper_attributes);
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <main+0x80>)
 800059a:	2100      	movs	r1, #0
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <main+0x84>)
 800059e:	f002 fe27 	bl	80031f0 <osThreadNew>
 80005a2:	4602      	mov	r2, r0
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0x88>)
 80005a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a8:	f002 fdec 	bl	8003184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x5c>
 80005ae:	bf00      	nop
 80005b0:	08006160 	.word	0x08006160
 80005b4:	200049b4 	.word	0x200049b4
 80005b8:	080060f4 	.word	0x080060f4
 80005bc:	0800077d 	.word	0x0800077d
 80005c0:	200049bc 	.word	0x200049bc
 80005c4:	08006118 	.word	0x08006118
 80005c8:	080007ad 	.word	0x080007ad
 80005cc:	200049b8 	.word	0x200049b8
 80005d0:	0800613c 	.word	0x0800613c
 80005d4:	080007dd 	.word	0x080007dd
 80005d8:	200049c0 	.word	0x200049c0

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0b8      	sub	sp, #224	; 0xe0
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005e6:	2234      	movs	r2, #52	; 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fd15 	bl	800601a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2290      	movs	r2, #144	; 0x90
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f005 fd06 	bl	800601a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <SystemClock_Config+0xf0>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <SystemClock_Config+0xf0>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <SystemClock_Config+0xf0>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <SystemClock_Config+0xf4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062e:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <SystemClock_Config+0xf4>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xf4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2310      	movs	r3, #16
 8000650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fd06 	bl	8001070 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800066a:	f000 f901 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff99 	bl	80015cc <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006a0:	f000 f8e6 	bl	8000870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f9b2 	bl	8001a1c <HAL_RCCEx_PeriphCLKConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006be:	f000 f8d7 	bl	8000870 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	37e0      	adds	r7, #224	; 0xe0
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_USART3_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART3_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART3_UART_Init+0x58>)
 8000718:	f002 f80c 	bl	8002734 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f8a5 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20004934 	.word	0x20004934
 8000730:	40004800 	.word	0x40004800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_GPIO_Init+0x44>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <MX_GPIO_Init+0x44>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_GPIO_Init+0x44>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_GPIO_Init+0x44>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <MX_GPIO_Init+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_GPIO_Init+0x44>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <writerOneHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_writerOneHook */
void writerOneHook(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	MSG_Type msg;

	for(;;){
		msg.msg_code = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	733b      	strb	r3, [r7, #12]
		msg.task_id  = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	737b      	strb	r3, [r7, #13]
		osMessageQueuePut(msgQueueHandle, &msg, 0U, 0U);
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <writerOneHook+0x2c>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	f107 010c 	add.w	r1, r7, #12
 8000794:	2300      	movs	r3, #0
 8000796:	2200      	movs	r2, #0
 8000798:	f002 fe56 	bl	8003448 <osMessageQueuePut>
		HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f000 f9b8 	bl	8000b14 <HAL_Delay>
		msg.msg_code = 1;
 80007a4:	e7ee      	b.n	8000784 <writerOneHook+0x8>
 80007a6:	bf00      	nop
 80007a8:	200049b4 	.word	0x200049b4

080007ac <writerTwoHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_writerTwoHook */
void writerTwoHook(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	MSG_Type msg;

	for(;;){
		msg.msg_code = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	733b      	strb	r3, [r7, #12]
		msg.task_id  = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	737b      	strb	r3, [r7, #13]
		osMessageQueuePut(msgQueueHandle, &msg, 0U, 0U);
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <writerTwoHook+0x2c>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	f002 fe3e 	bl	8003448 <osMessageQueuePut>
		HAL_Delay(2000);
 80007cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007d0:	f000 f9a0 	bl	8000b14 <HAL_Delay>
		msg.msg_code = 2;
 80007d4:	e7ee      	b.n	80007b4 <writerTwoHook+0x8>
 80007d6:	bf00      	nop
 80007d8:	200049b4 	.word	0x200049b4

080007dc <gateKeeperHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gateKeeperHook */
void gateKeeperHook(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	MSG_Type msg;
	osStatus_t status;
	const uint8_t * const w1_msg = "Writer 1 : -----------------------------------\r\n";
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <gateKeeperHook+0x60>)
 80007e6:	617b      	str	r3, [r7, #20]
	const uint8_t * const w2_msg = "Writer 2 : ooooooooooooooooooooooooooooooooooo\r\n";
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <gateKeeperHook+0x64>)
 80007ea:	613b      	str	r3, [r7, #16]

	for(;;) {
		status = osMessageQueueGet(msgQueueHandle, &msg, NULL, 0U);   // wait for message
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <gateKeeperHook+0x68>)
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	f107 0108 	add.w	r1, r7, #8
 80007f4:	2300      	movs	r3, #0
 80007f6:	2200      	movs	r2, #0
 80007f8:	f002 fe9a 	bl	8003530 <osMessageQueueGet>
 80007fc:	60f8      	str	r0, [r7, #12]
		if (status == osOK) {
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1f3      	bne.n	80007ec <gateKeeperHook+0x10>
			switch(msg.msg_code){
 8000804:	7a3b      	ldrb	r3, [r7, #8]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d002      	beq.n	8000810 <gateKeeperHook+0x34>
 800080a:	2b02      	cmp	r3, #2
 800080c:	d00a      	beq.n	8000824 <gateKeeperHook+0x48>
 800080e:	e013      	b.n	8000838 <gateKeeperHook+0x5c>
				case 1 : HAL_UART_Transmit(&huart3, w1_msg, strlen(w1_msg), 100);
 8000810:	6978      	ldr	r0, [r7, #20]
 8000812:	f7ff fd15 	bl	8000240 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	6979      	ldr	r1, [r7, #20]
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <gateKeeperHook+0x6c>)
 8000820:	f001 ffd6 	bl	80027d0 <HAL_UART_Transmit>
				case 2 : HAL_UART_Transmit(&huart3, w2_msg, strlen(w2_msg), 100);
 8000824:	6938      	ldr	r0, [r7, #16]
 8000826:	f7ff fd0b 	bl	8000240 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	6939      	ldr	r1, [r7, #16]
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <gateKeeperHook+0x6c>)
 8000834:	f001 ffcc 	bl	80027d0 <HAL_UART_Transmit>
		status = osMessageQueueGet(msgQueueHandle, &msg, NULL, 0U);   // wait for message
 8000838:	e7d8      	b.n	80007ec <gateKeeperHook+0x10>
 800083a:	bf00      	nop
 800083c:	08006074 	.word	0x08006074
 8000840:	080060a8 	.word	0x080060a8
 8000844:	200049b4 	.word	0x200049b4
 8000848:	20004934 	.word	0x20004934

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 f939 	bl	8000ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010000 	.word	0x40010000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	e7fe      	b.n	8000876 <Error_Handler+0x6>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 fa07 	bl	8000cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x7c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d128      	bne.n	800093c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x80>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <HAL_UART_MspInit+0x80>)
 80008f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_UART_MspInit+0x80>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x80>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x80>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x80>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800091a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800092c:	2307      	movs	r3, #7
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x84>)
 8000938:	f000 f9f0 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40004800 	.word	0x40004800
 8000948:	40023800 	.word	0x40023800
 800094c:	40020c00 	.word	0x40020c00

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2019      	movs	r0, #25
 8000966:	f000 f9af 	bl	8000cc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800096a:	2019      	movs	r0, #25
 800096c:	f000 f9c8 	bl	8000d00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_InitTick+0x9c>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_InitTick+0x9c>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6453      	str	r3, [r2, #68]	; 0x44
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_InitTick+0x9c>)
 800097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f810 	bl	80019b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000998:	f000 fffa 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 800099c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_InitTick+0xa0>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	0c9b      	lsrs	r3, r3, #18
 80009a8:	3b01      	subs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_InitTick+0xa4>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_InitTick+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_InitTick+0xa4>)
 80009b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_InitTick+0xa4>)
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_InitTick+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_InitTick+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <HAL_InitTick+0xa4>)
 80009ce:	f001 fc4b 	bl	8002268 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_InitTick+0xa4>)
 80009da:	f001 fc7b 	bl	80022d4 <HAL_TIM_Base_Start_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	200049c4 	.word	0x200049c4
 80009f8:	40010000 	.word	0x40010000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a2e:	f001 fc7b 	bl	8002328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200049c4 	.word	0x200049c4

08000a3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <SystemInit+0x28>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <SystemInit+0x28>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0x28>)
 8000a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a56:	609a      	str	r2, [r3, #8]
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a6e:	e003      	b.n	8000a78 <LoopCopyDataInit>

08000a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a76:	3104      	adds	r1, #4

08000a78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a80:	d3f6      	bcc.n	8000a70 <CopyDataInit>
  ldr  r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a84:	e002      	b.n	8000a8c <LoopFillZerobss>

08000a86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a88:	f842 3b04 	str.w	r3, [r2], #4

08000a8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a90:	d3f9      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd3 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f005 fa91 	bl	8005fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd59 	bl	8000550 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000aa4:	080061a0 	.word	0x080061a0
  ldr  r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aac:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ab0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ab4:	20004a48 	.word	0x20004a48

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>

08000aba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f8f7 	bl	8000cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff ff43 	bl	8000950 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff fed5 	bl	8000878 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20004a04 	.word	0x20004a04

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20004a04 	.word	0x20004a04

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_Delay+0x40>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	05fa0000 	.word	0x05fa0000

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff4c 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cda:	f7ff ff61 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff ffb1 	bl	8000c4c <NVIC_EncodePriority>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff80 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff54 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e175      	b.n	8001028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8164 	bne.w	8001022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d00b      	beq.n	8000d7a <HAL_GPIO_Init+0x5e>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6e:	2b11      	cmp	r3, #17
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x100>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80be 	beq.w	8001022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b65      	ldr	r3, [pc, #404]	; (800103c <HAL_GPIO_Init+0x320>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a64      	ldr	r2, [pc, #400]	; (800103c <HAL_GPIO_Init+0x320>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_GPIO_Init+0x320>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ebe:	4a60      	ldr	r2, [pc, #384]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_GPIO_Init+0x328>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d037      	beq.n	8000f5a <HAL_GPIO_Init+0x23e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d031      	beq.n	8000f56 <HAL_GPIO_Init+0x23a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a55      	ldr	r2, [pc, #340]	; (800104c <HAL_GPIO_Init+0x330>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02b      	beq.n	8000f52 <HAL_GPIO_Init+0x236>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a54      	ldr	r2, [pc, #336]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x232>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <HAL_GPIO_Init+0x338>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x22e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x33c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x22a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a51      	ldr	r2, [pc, #324]	; (800105c <HAL_GPIO_Init+0x340>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x344>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x348>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f32:	2309      	movs	r3, #9
 8000f34:	e012      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f36:	230a      	movs	r3, #10
 8000f38:	e010      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e00e      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f6c:	4934      	ldr	r1, [pc, #208]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	; (800106c <HAL_GPIO_Init+0x350>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9e:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc8:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_GPIO_Init+0x350>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_GPIO_Init+0x350>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_GPIO_Init+0x350>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f ae86 	bls.w	8000d3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40022000 	.word	0x40022000
 8001068:	40022400 	.word	0x40022400
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e29b      	b.n	80015be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8087 	beq.w	80011a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001094:	4b96      	ldr	r3, [pc, #600]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b04      	cmp	r3, #4
 800109e:	d00c      	beq.n	80010ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a0:	4b93      	ldr	r3, [pc, #588]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d112      	bne.n	80010d2 <HAL_RCC_OscConfig+0x62>
 80010ac:	4b90      	ldr	r3, [pc, #576]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b8:	d10b      	bne.n	80010d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ba:	4b8d      	ldr	r3, [pc, #564]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d06c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x130>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d168      	bne.n	80011a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e275      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x7a>
 80010dc:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a83      	ldr	r2, [pc, #524]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e02e      	b.n	8001148 <HAL_RCC_OscConfig+0xd8>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x9c>
 80010f2:	4b7f      	ldr	r3, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7e      	ldr	r2, [pc, #504]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80010f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b7c      	ldr	r3, [pc, #496]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7b      	ldr	r2, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xd8>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0xc0>
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a72      	ldr	r2, [pc, #456]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xd8>
 8001130:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a6e      	ldr	r2, [pc, #440]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6b      	ldr	r2, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fcd4 	bl	8000afc <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcd0 	bl	8000afc <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e229      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b61      	ldr	r3, [pc, #388]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fcc0 	bl	8000afc <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcbc 	bl	8000afc <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e215      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x110>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d069      	beq.n	8001282 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x190>
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x17a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1e9      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	493d      	ldr	r1, [pc, #244]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e040      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc72 	bl	8000afc <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc6e 	bl	8000afc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1c7      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4929      	ldr	r1, [pc, #164]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
 800124e:	e018      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc4e 	bl	8000afc <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc4a 	bl	8000afc <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1a3      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d038      	beq.n	8001300 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d019      	beq.n	80012ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 8001298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129a:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff fc2b 	bl	8000afc <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fc27 	bl	8000afc <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e180      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x23a>
 80012c8:	e01a      	b.n	8001300 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80012cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_RCC_OscConfig+0x280>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc11 	bl	8000afc <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff fc0d 	bl	8000afc <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d903      	bls.n	80012f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e166      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
 80012f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b92      	ldr	r3, [pc, #584]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80012f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ee      	bne.n	80012de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a4 	beq.w	8001456 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b89      	ldr	r3, [pc, #548]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a88      	ldr	r2, [pc, #544]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b86      	ldr	r3, [pc, #536]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x4d4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001342:	4b80      	ldr	r3, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x4d4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7f      	ldr	r2, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x4d4>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fbd5 	bl	8000afc <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fbd1 	bl	8000afc <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b64      	cmp	r3, #100	; 0x64
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e12a      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001368:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x4d4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x31a>
 800137c:	4b70      	ldr	r3, [pc, #448]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a6f      	ldr	r2, [pc, #444]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e02d      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x33c>
 8001392:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
 800139e:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a67      	ldr	r2, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	e01c      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x35e>
 80013b4:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a61      	ldr	r2, [pc, #388]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a5e      	ldr	r2, [pc, #376]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
 80013ce:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6713      	str	r3, [r2, #112]	; 0x70
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb85 	bl	8000afc <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb81 	bl	8000afc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0d8      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ee      	beq.n	80013f6 <HAL_RCC_OscConfig+0x386>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff fb6f 	bl	8000afc <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fb6b 	bl	8000afc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0c2      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4b41      	ldr	r3, [pc, #260]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a3c      	ldr	r2, [pc, #240]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80ae 	beq.w	80015bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d06d      	beq.n	8001548 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d14b      	bne.n	800150c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800147a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb3c 	bl	8000afc <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fb38 	bl	8000afc <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e091      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	3b01      	subs	r3, #1
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	071b      	lsls	r3, r3, #28
 80014d2:	491b      	ldr	r1, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a18      	ldr	r2, [pc, #96]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb0a 	bl	8000afc <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fb06 	bl	8000afc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e05f      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x47c>
 800150a:	e057      	b.n	80015bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff faf0 	bl	8000afc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff faec 	bl	8000afc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e045      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x4b0>
 800153e:	e03d      	b.n	80015bc <HAL_RCC_OscConfig+0x54c>
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HAL_RCC_OscConfig+0x558>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d030      	beq.n	80015b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d129      	bne.n	80015b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d122      	bne.n	80015b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800157e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001580:	4293      	cmp	r3, r2
 8001582:	d119      	bne.n	80015b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	3b01      	subs	r3, #1
 8001592:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d10f      	bne.n	80015b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0d0      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d910      	bls.n	8001614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b67      	ldr	r3, [pc, #412]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 020f 	bic.w	r2, r3, #15
 80015fa:	4965      	ldr	r1, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d040      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d115      	bne.n	80016ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e073      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06b      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 0203 	bic.w	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4936      	ldr	r1, [pc, #216]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c0:	f7ff fa1c 	bl	8000afc <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	e00a      	b.n	80016de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff fa18 	bl	8000afc <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e053      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 020c 	and.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1eb      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d210      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 020f 	bic.w	r2, r3, #15
 8001706:	4922      	ldr	r1, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4601      	mov	r1, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1cc>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	fa21 f303 	lsr.w	r3, r1, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1d0>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1d4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f8e6 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08006178 	.word	0x08006178
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d007      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x32>
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d008      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x38>
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80b4 	bne.w	8001938 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017d2:	60bb      	str	r3, [r7, #8]
      break;
 80017d4:	e0b3      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017d8:	60bb      	str	r3, [r7, #8]
      break;
 80017da:	e0b0      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017dc:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017e6:	4b58      	ldr	r3, [pc, #352]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d04a      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	4b55      	ldr	r3, [pc, #340]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	f04f 0400 	mov.w	r4, #0
 80017fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	ea03 0501 	and.w	r5, r3, r1
 8001808:	ea04 0602 	and.w	r6, r4, r2
 800180c:	4629      	mov	r1, r5
 800180e:	4632      	mov	r2, r6
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	f04f 0400 	mov.w	r4, #0
 8001818:	0154      	lsls	r4, r2, #5
 800181a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800181e:	014b      	lsls	r3, r1, #5
 8001820:	4619      	mov	r1, r3
 8001822:	4622      	mov	r2, r4
 8001824:	1b49      	subs	r1, r1, r5
 8001826:	eb62 0206 	sbc.w	r2, r2, r6
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	f04f 0400 	mov.w	r4, #0
 8001832:	0194      	lsls	r4, r2, #6
 8001834:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001838:	018b      	lsls	r3, r1, #6
 800183a:	1a5b      	subs	r3, r3, r1
 800183c:	eb64 0402 	sbc.w	r4, r4, r2
 8001840:	f04f 0100 	mov.w	r1, #0
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	00e2      	lsls	r2, r4, #3
 800184a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800184e:	00d9      	lsls	r1, r3, #3
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	195b      	adds	r3, r3, r5
 8001856:	eb44 0406 	adc.w	r4, r4, r6
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	02a2      	lsls	r2, r4, #10
 8001864:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001868:	0299      	lsls	r1, r3, #10
 800186a:	460b      	mov	r3, r1
 800186c:	4614      	mov	r4, r2
 800186e:	4618      	mov	r0, r3
 8001870:	4621      	mov	r1, r4
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f04f 0400 	mov.w	r4, #0
 8001878:	461a      	mov	r2, r3
 800187a:	4623      	mov	r3, r4
 800187c:	f7fe fce8 	bl	8000250 <__aeabi_uldivmod>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e049      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	ea03 0501 	and.w	r5, r3, r1
 800189e:	ea04 0602 	and.w	r6, r4, r2
 80018a2:	4629      	mov	r1, r5
 80018a4:	4632      	mov	r2, r6
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	f04f 0400 	mov.w	r4, #0
 80018ae:	0154      	lsls	r4, r2, #5
 80018b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018b4:	014b      	lsls	r3, r1, #5
 80018b6:	4619      	mov	r1, r3
 80018b8:	4622      	mov	r2, r4
 80018ba:	1b49      	subs	r1, r1, r5
 80018bc:	eb62 0206 	sbc.w	r2, r2, r6
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	0194      	lsls	r4, r2, #6
 80018ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018ce:	018b      	lsls	r3, r1, #6
 80018d0:	1a5b      	subs	r3, r3, r1
 80018d2:	eb64 0402 	sbc.w	r4, r4, r2
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018e4:	00d9      	lsls	r1, r3, #3
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	195b      	adds	r3, r3, r5
 80018ec:	eb44 0406 	adc.w	r4, r4, r6
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	02a2      	lsls	r2, r4, #10
 80018fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018fe:	0299      	lsls	r1, r3, #10
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	461a      	mov	r2, r3
 8001910:	4623      	mov	r3, r4
 8001912:	f7fe fc9d 	bl	8000250 <__aeabi_uldivmod>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	3301      	adds	r3, #1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	60bb      	str	r3, [r7, #8]
      break;
 8001936:	e002      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800193a:	60bb      	str	r3, [r7, #8]
      break;
 800193c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193e:	68bb      	ldr	r3, [r7, #8]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400

08001950 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_GetHCLKFreq+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff0 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001970:	4601      	mov	r1, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0a9b      	lsrs	r3, r3, #10
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	08006188 	.word	0x08006188

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff ffdc 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001998:	4601      	mov	r1, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0b5b      	lsrs	r3, r3, #13
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08006188 	.word	0x08006188

080019b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	220f      	movs	r2, #15
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_RCC_GetClockConfig+0x60>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 020f 	and.w	r2, r3, #15
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a44:	4b69      	ldr	r3, [pc, #420]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a68      	ldr	r2, [pc, #416]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a4e:	6093      	str	r3, [r2, #8]
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	4964      	ldr	r1, [pc, #400]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	4959      	ldr	r1, [pc, #356]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a94:	d101      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d017      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	494a      	ldr	r1, [pc, #296]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 808b 	beq.w	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	4a39      	ldr	r2, [pc, #228]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b24:	f7fe ffea 	bl	8000afc <HAL_GetTick>
 8001b28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7fe ffe6 	bl	8000afc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e38d      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d035      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d02e      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d114      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ffae 	bl	8000afc <HAL_GetTick>
 8001ba0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f7fe ffaa 	bl	8000afc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e34f      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ee      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bd2:	d111      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001be2:	400b      	ands	r3, r1
 8001be4:	4901      	ldr	r1, [pc, #4]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	0ffffcff 	.word	0x0ffffcff
 8001bf8:	4bb3      	ldr	r3, [pc, #716]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4ab2      	ldr	r2, [pc, #712]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c02:	6093      	str	r3, [r2, #8]
 8001c04:	4bb0      	ldr	r3, [pc, #704]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c10:	49ad      	ldr	r1, [pc, #692]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c28:	4aa7      	ldr	r2, [pc, #668]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c32:	4ba5      	ldr	r3, [pc, #660]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	49a2      	ldr	r1, [pc, #648]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00a      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c50:	4b9d      	ldr	r3, [pc, #628]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c5e:	499a      	ldr	r1, [pc, #616]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c72:	4b95      	ldr	r3, [pc, #596]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c80:	4991      	ldr	r1, [pc, #580]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca2:	4989      	ldr	r1, [pc, #548]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001cb6:	4b84      	ldr	r3, [pc, #528]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4980      	ldr	r1, [pc, #512]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd8:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4978      	ldr	r1, [pc, #480]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	f023 020c 	bic.w	r2, r3, #12
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	496f      	ldr	r1, [pc, #444]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00a      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4967      	ldr	r1, [pc, #412]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d3e:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4c:	495e      	ldr	r1, [pc, #376]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	4956      	ldr	r1, [pc, #344]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d82:	4b51      	ldr	r3, [pc, #324]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001da4:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	4945      	ldr	r1, [pc, #276]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd4:	493c      	ldr	r1, [pc, #240]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001de8:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001df6:	4934      	ldr	r1, [pc, #208]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d011      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e18:	492b      	ldr	r1, [pc, #172]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e28:	d101      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e58:	491b      	ldr	r1, [pc, #108]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7c:	4912      	ldr	r1, [pc, #72]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ea0:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00f      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec4:	e002      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	4985      	ldr	r1, [pc, #532]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	497c      	ldr	r1, [pc, #496]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f06:	f040 80d6 	bne.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f16:	f7fe fdf1 	bl	8000afc <HAL_GetTick>
 8001f1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f1e:	f7fe fded 	bl	8000afc <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e194      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f30:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d021      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d11d      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f5e:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f64:	0e1b      	lsrs	r3, r3, #24
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	019a      	lsls	r2, r3, #6
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	061b      	lsls	r3, r3, #24
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	071b      	lsls	r3, r3, #28
 8001f84:	4957      	ldr	r1, [pc, #348]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02e      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb6:	d129      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fcc:	0f1b      	lsrs	r3, r3, #28
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	019a      	lsls	r2, r3, #6
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	071b      	lsls	r3, r3, #28
 8001fec:	493d      	ldr	r1, [pc, #244]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffa:	f023 021f 	bic.w	r2, r3, #31
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	3b01      	subs	r3, #1
 8002004:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01d      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800201a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201e:	0e1b      	lsrs	r3, r3, #24
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202c:	0f1b      	lsrs	r3, r3, #28
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	019a      	lsls	r2, r3, #6
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	071b      	lsls	r3, r3, #28
 800204c:	4925      	ldr	r1, [pc, #148]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d011      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	019a      	lsls	r2, r3, #6
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	061b      	lsls	r3, r3, #24
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	071b      	lsls	r3, r3, #28
 800207c:	4919      	ldr	r1, [pc, #100]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800208a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800208e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002090:	f7fe fd34 	bl	8000afc <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002098:	f7fe fd30 	bl	8000afc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0d7      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	f040 80cd 	bne.w	8002258 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ca:	f7fe fd17 	bl	8000afc <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020d2:	f7fe fd13 	bl	8000afc <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d903      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0ba      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80020e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020e8:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f4:	d0ed      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002112:	2b00      	cmp	r3, #0
 8002114:	d02e      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d12a      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800211e:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800212c:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	0f1b      	lsrs	r3, r3, #28
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	019a      	lsls	r2, r3, #6
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	061b      	lsls	r3, r3, #24
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	4944      	ldr	r1, [pc, #272]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800215a:	4b42      	ldr	r3, [pc, #264]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800215c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002160:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	493d      	ldr	r1, [pc, #244]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d022      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002188:	d11d      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	0e1b      	lsrs	r3, r3, #24
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002198:	4b32      	ldr	r3, [pc, #200]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	0f1b      	lsrs	r3, r3, #28
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	019a      	lsls	r2, r3, #6
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	061b      	lsls	r3, r3, #24
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	071b      	lsls	r3, r3, #28
 80021be:	4929      	ldr	r1, [pc, #164]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	0e1b      	lsrs	r3, r3, #24
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	019a      	lsls	r2, r3, #6
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	071b      	lsls	r3, r3, #28
 8002206:	4917      	ldr	r1, [pc, #92]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	4911      	ldr	r1, [pc, #68]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7fe fc64 	bl	8000afc <HAL_GetTick>
 8002234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002238:	f7fe fc60 	bl	8000afc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e007      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002256:	d1ef      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e01d      	b.n	80022b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f815 	bl	80022be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 f986 	bl	80025b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_TIM_Base_Start_IT+0x50>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d00b      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0x42>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d007      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	00010007 	.word	0x00010007

08002328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d122      	bne.n	8002384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11b      	bne.n	8002384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0202 	mvn.w	r2, #2
 8002354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f905 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8f7 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f908 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0204 	mvn.w	r2, #4
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8db 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8cd 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8de 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0208 	mvn.w	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8b1 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8a3 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f8b4 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b10      	cmp	r3, #16
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b10      	cmp	r3, #16
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0210 	mvn.w	r2, #16
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2208      	movs	r2, #8
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f887 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f879 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f88a 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0201 	mvn.w	r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe f9d0 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b80      	cmp	r3, #128	; 0x80
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f91a 	bl	800270c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e6:	d10e      	bne.n	8002506 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b80      	cmp	r3, #128	; 0x80
 80024f4:	d107      	bne.n	8002506 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f90d 	bl	8002720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d10e      	bne.n	8002532 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d107      	bne.n	8002532 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800252a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f838 	bl	80025a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d10e      	bne.n	800255e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b20      	cmp	r3, #32
 800254c:	d107      	bne.n	800255e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0220 	mvn.w	r2, #32
 8002556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8cd 	bl	80026f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a40      	ldr	r2, [pc, #256]	; (80026cc <TIM_Base_SetConfig+0x114>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d00f      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3d      	ldr	r2, [pc, #244]	; (80026d0 <TIM_Base_SetConfig+0x118>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00b      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <TIM_Base_SetConfig+0x11c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d007      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <TIM_Base_SetConfig+0x120>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <TIM_Base_SetConfig+0x40>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <TIM_Base_SetConfig+0x124>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2f      	ldr	r2, [pc, #188]	; (80026cc <TIM_Base_SetConfig+0x114>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002618:	d027      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <TIM_Base_SetConfig+0x118>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d023      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <TIM_Base_SetConfig+0x11c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a2a      	ldr	r2, [pc, #168]	; (80026d8 <TIM_Base_SetConfig+0x120>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01b      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a29      	ldr	r2, [pc, #164]	; (80026dc <TIM_Base_SetConfig+0x124>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d017      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <TIM_Base_SetConfig+0x128>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <TIM_Base_SetConfig+0x12c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <TIM_Base_SetConfig+0x130>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <TIM_Base_SetConfig+0x134>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <TIM_Base_SetConfig+0x138>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <TIM_Base_SetConfig+0x13c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <TIM_Base_SetConfig+0x114>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <TIM_Base_SetConfig+0xf8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <TIM_Base_SetConfig+0x124>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	615a      	str	r2, [r3, #20]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40000c00 	.word	0x40000c00
 80026dc:	40010400 	.word	0x40010400
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40014400 	.word	0x40014400
 80026e8:	40014800 	.word	0x40014800
 80026ec:	40001800 	.word	0x40001800
 80026f0:	40001c00 	.word	0x40001c00
 80026f4:	40002000 	.word	0x40002000

080026f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e040      	b.n	80027c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f8b6 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8be 	bl	80028f4 <UART_SetConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fb5c 	bl	8002e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fbe3 	bl	8002f8c <UART_CheckIdleState>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d17f      	bne.n	80028e8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_UART_Transmit+0x24>
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e078      	b.n	80028ea <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_UART_Transmit+0x36>
 8002802:	2302      	movs	r3, #2
 8002804:	e071      	b.n	80028ea <HAL_UART_Transmit+0x11a>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	; 0x21
 8002818:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800281a:	f7fe f96f 	bl	8000afc <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d108      	bne.n	800284c <HAL_UART_Transmit+0x7c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	e003      	b.n	8002854 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800285c:	e02c      	b.n	80028b8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fbd4 	bl	8003016 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e038      	b.n	80028ea <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3302      	adds	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e007      	b.n	80028a6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1cc      	bne.n	800285e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fba1 	bl	8003016 <UART_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e005      	b.n	80028ea <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4bb1      	ldr	r3, [pc, #708]	; (8002be8 <UART_SetConfig+0x2f4>)
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	6939      	ldr	r1, [r7, #16]
 800292c:	430b      	orrs	r3, r1
 800292e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a9f      	ldr	r2, [pc, #636]	; (8002bec <UART_SetConfig+0x2f8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d121      	bne.n	80029b8 <UART_SetConfig+0xc4>
 8002974:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b03      	cmp	r3, #3
 8002980:	d816      	bhi.n	80029b0 <UART_SetConfig+0xbc>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <UART_SetConfig+0x94>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	08002999 	.word	0x08002999
 800298c:	080029a5 	.word	0x080029a5
 8002990:	0800299f 	.word	0x0800299f
 8002994:	080029ab 	.word	0x080029ab
 8002998:	2301      	movs	r3, #1
 800299a:	77fb      	strb	r3, [r7, #31]
 800299c:	e151      	b.n	8002c42 <UART_SetConfig+0x34e>
 800299e:	2302      	movs	r3, #2
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e14e      	b.n	8002c42 <UART_SetConfig+0x34e>
 80029a4:	2304      	movs	r3, #4
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e14b      	b.n	8002c42 <UART_SetConfig+0x34e>
 80029aa:	2308      	movs	r3, #8
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e148      	b.n	8002c42 <UART_SetConfig+0x34e>
 80029b0:	2310      	movs	r3, #16
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	bf00      	nop
 80029b6:	e144      	b.n	8002c42 <UART_SetConfig+0x34e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a8d      	ldr	r2, [pc, #564]	; (8002bf4 <UART_SetConfig+0x300>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d134      	bne.n	8002a2c <UART_SetConfig+0x138>
 80029c2:	4b8b      	ldr	r3, [pc, #556]	; (8002bf0 <UART_SetConfig+0x2fc>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d829      	bhi.n	8002a24 <UART_SetConfig+0x130>
 80029d0:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <UART_SetConfig+0xe4>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	08002a0d 	.word	0x08002a0d
 80029dc:	08002a25 	.word	0x08002a25
 80029e0:	08002a25 	.word	0x08002a25
 80029e4:	08002a25 	.word	0x08002a25
 80029e8:	08002a19 	.word	0x08002a19
 80029ec:	08002a25 	.word	0x08002a25
 80029f0:	08002a25 	.word	0x08002a25
 80029f4:	08002a25 	.word	0x08002a25
 80029f8:	08002a13 	.word	0x08002a13
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	08002a25 	.word	0x08002a25
 8002a04:	08002a25 	.word	0x08002a25
 8002a08:	08002a1f 	.word	0x08002a1f
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e117      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e114      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e111      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e10e      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a24:	2310      	movs	r3, #16
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	bf00      	nop
 8002a2a:	e10a      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a71      	ldr	r2, [pc, #452]	; (8002bf8 <UART_SetConfig+0x304>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d120      	bne.n	8002a78 <UART_SetConfig+0x184>
 8002a36:	4b6e      	ldr	r3, [pc, #440]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d00f      	beq.n	8002a64 <UART_SetConfig+0x170>
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d802      	bhi.n	8002a4e <UART_SetConfig+0x15a>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0x164>
 8002a4c:	e010      	b.n	8002a70 <UART_SetConfig+0x17c>
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d005      	beq.n	8002a5e <UART_SetConfig+0x16a>
 8002a52:	2b30      	cmp	r3, #48	; 0x30
 8002a54:	d009      	beq.n	8002a6a <UART_SetConfig+0x176>
 8002a56:	e00b      	b.n	8002a70 <UART_SetConfig+0x17c>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e0f1      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	e0ee      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a64:	2304      	movs	r3, #4
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e0eb      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e0e8      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a70:	2310      	movs	r3, #16
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	bf00      	nop
 8002a76:	e0e4      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a5f      	ldr	r2, [pc, #380]	; (8002bfc <UART_SetConfig+0x308>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d120      	bne.n	8002ac4 <UART_SetConfig+0x1d0>
 8002a82:	4b5b      	ldr	r3, [pc, #364]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d00f      	beq.n	8002ab0 <UART_SetConfig+0x1bc>
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d802      	bhi.n	8002a9a <UART_SetConfig+0x1a6>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0x1b0>
 8002a98:	e010      	b.n	8002abc <UART_SetConfig+0x1c8>
 8002a9a:	2b80      	cmp	r3, #128	; 0x80
 8002a9c:	d005      	beq.n	8002aaa <UART_SetConfig+0x1b6>
 8002a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002aa0:	d009      	beq.n	8002ab6 <UART_SetConfig+0x1c2>
 8002aa2:	e00b      	b.n	8002abc <UART_SetConfig+0x1c8>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e0cb      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e0c8      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e0c5      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e0c2      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002abc:	2310      	movs	r3, #16
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	bf00      	nop
 8002ac2:	e0be      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <UART_SetConfig+0x30c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d124      	bne.n	8002b18 <UART_SetConfig+0x224>
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002adc:	d012      	beq.n	8002b04 <UART_SetConfig+0x210>
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d802      	bhi.n	8002aea <UART_SetConfig+0x1f6>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <UART_SetConfig+0x204>
 8002ae8:	e012      	b.n	8002b10 <UART_SetConfig+0x21c>
 8002aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aee:	d006      	beq.n	8002afe <UART_SetConfig+0x20a>
 8002af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af4:	d009      	beq.n	8002b0a <UART_SetConfig+0x216>
 8002af6:	e00b      	b.n	8002b10 <UART_SetConfig+0x21c>
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	e0a1      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e09e      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b04:	2304      	movs	r3, #4
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e09b      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	e098      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b10:	2310      	movs	r3, #16
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	bf00      	nop
 8002b16:	e094      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <UART_SetConfig+0x310>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d124      	bne.n	8002b6c <UART_SetConfig+0x278>
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b30:	d012      	beq.n	8002b58 <UART_SetConfig+0x264>
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d802      	bhi.n	8002b3e <UART_SetConfig+0x24a>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <UART_SetConfig+0x258>
 8002b3c:	e012      	b.n	8002b64 <UART_SetConfig+0x270>
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b42:	d006      	beq.n	8002b52 <UART_SetConfig+0x25e>
 8002b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b48:	d009      	beq.n	8002b5e <UART_SetConfig+0x26a>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x270>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e077      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e074      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e071      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e06e      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b64:	2310      	movs	r3, #16
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	bf00      	nop
 8002b6a:	e06a      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <UART_SetConfig+0x314>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d124      	bne.n	8002bc0 <UART_SetConfig+0x2cc>
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d012      	beq.n	8002bac <UART_SetConfig+0x2b8>
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d802      	bhi.n	8002b92 <UART_SetConfig+0x29e>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <UART_SetConfig+0x2ac>
 8002b90:	e012      	b.n	8002bb8 <UART_SetConfig+0x2c4>
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b96:	d006      	beq.n	8002ba6 <UART_SetConfig+0x2b2>
 8002b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b9c:	d009      	beq.n	8002bb2 <UART_SetConfig+0x2be>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x2c4>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e04d      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e04a      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e047      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e044      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	bf00      	nop
 8002bbe:	e040      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <UART_SetConfig+0x318>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d139      	bne.n	8002c3e <UART_SetConfig+0x34a>
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <UART_SetConfig+0x2fc>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd8:	d027      	beq.n	8002c2a <UART_SetConfig+0x336>
 8002bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bde:	d817      	bhi.n	8002c10 <UART_SetConfig+0x31c>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01c      	beq.n	8002c1e <UART_SetConfig+0x32a>
 8002be4:	e027      	b.n	8002c36 <UART_SetConfig+0x342>
 8002be6:	bf00      	nop
 8002be8:	efff69f3 	.word	0xefff69f3
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40004400 	.word	0x40004400
 8002bf8:	40004800 	.word	0x40004800
 8002bfc:	40004c00 	.word	0x40004c00
 8002c00:	40005000 	.word	0x40005000
 8002c04:	40011400 	.word	0x40011400
 8002c08:	40007800 	.word	0x40007800
 8002c0c:	40007c00 	.word	0x40007c00
 8002c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c14:	d006      	beq.n	8002c24 <UART_SetConfig+0x330>
 8002c16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c1a:	d009      	beq.n	8002c30 <UART_SetConfig+0x33c>
 8002c1c:	e00b      	b.n	8002c36 <UART_SetConfig+0x342>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e00e      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002c24:	2302      	movs	r3, #2
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e00b      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e008      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002c30:	2308      	movs	r3, #8
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	e005      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002c36:	2310      	movs	r3, #16
 8002c38:	77fb      	strb	r3, [r7, #31]
 8002c3a:	bf00      	nop
 8002c3c:	e001      	b.n	8002c42 <UART_SetConfig+0x34e>
 8002c3e:	2310      	movs	r3, #16
 8002c40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4a:	d17f      	bne.n	8002d4c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002c4c:	7ffb      	ldrb	r3, [r7, #31]
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d85c      	bhi.n	8002d0c <UART_SetConfig+0x418>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <UART_SetConfig+0x364>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c9d 	.word	0x08002c9d
 8002c60:	08002cbd 	.word	0x08002cbd
 8002c64:	08002d0d 	.word	0x08002d0d
 8002c68:	08002cd5 	.word	0x08002cd5
 8002c6c:	08002d0d 	.word	0x08002d0d
 8002c70:	08002d0d 	.word	0x08002d0d
 8002c74:	08002d0d 	.word	0x08002d0d
 8002c78:	08002cf5 	.word	0x08002cf5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7fe fe74 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	005a      	lsls	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	441a      	add	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	61bb      	str	r3, [r7, #24]
        break;
 8002c9a:	e03a      	b.n	8002d12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7fe fe78 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	005a      	lsls	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	61bb      	str	r3, [r7, #24]
        break;
 8002cba:	e02a      	b.n	8002d12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	085a      	lsrs	r2, r3, #1
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <UART_SetConfig+0x54c>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6852      	ldr	r2, [r2, #4]
 8002cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	61bb      	str	r3, [r7, #24]
        break;
 8002cd2:	e01e      	b.n	8002d12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd4:	f7fe fd66 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002cd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	005a      	lsls	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
        break;
 8002cf2:	e00e      	b.n	8002d12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	61bb      	str	r3, [r7, #24]
        break;
 8002d0a:	e002      	b.n	8002d12 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	75fb      	strb	r3, [r7, #23]
        break;
 8002d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d916      	bls.n	8002d46 <UART_SetConfig+0x452>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1e:	d212      	bcs.n	8002d46 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	897a      	ldrh	r2, [r7, #10]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	e070      	b.n	8002e28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
 8002d4a:	e06d      	b.n	8002e28 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002d4c:	7ffb      	ldrb	r3, [r7, #31]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d859      	bhi.n	8002e06 <UART_SetConfig+0x512>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x464>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d9b 	.word	0x08002d9b
 8002d60:	08002db9 	.word	0x08002db9
 8002d64:	08002e07 	.word	0x08002e07
 8002d68:	08002dd1 	.word	0x08002dd1
 8002d6c:	08002e07 	.word	0x08002e07
 8002d70:	08002e07 	.word	0x08002e07
 8002d74:	08002e07 	.word	0x08002e07
 8002d78:	08002def 	.word	0x08002def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7fe fdf4 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8002d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	085a      	lsrs	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	441a      	add	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	61bb      	str	r3, [r7, #24]
        break;
 8002d98:	e038      	b.n	8002e0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d9a:	f7fe fdf9 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8002d9e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	085a      	lsrs	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	441a      	add	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	61bb      	str	r3, [r7, #24]
        break;
 8002db6:	e029      	b.n	8002e0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	085a      	lsrs	r2, r3, #1
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <UART_SetConfig+0x550>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6852      	ldr	r2, [r2, #4]
 8002dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	61bb      	str	r3, [r7, #24]
        break;
 8002dce:	e01d      	b.n	8002e0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd0:	f7fe fce8 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	085a      	lsrs	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	441a      	add	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	61bb      	str	r3, [r7, #24]
        break;
 8002dec:	e00e      	b.n	8002e0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	61bb      	str	r3, [r7, #24]
        break;
 8002e04:	e002      	b.n	8002e0c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
        break;
 8002e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d908      	bls.n	8002e24 <UART_SetConfig+0x530>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e18:	d204      	bcs.n	8002e24 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	e001      	b.n	8002e28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	01e84800 	.word	0x01e84800
 8002e44:	00f42400 	.word	0x00f42400

08002e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01a      	beq.n	8002f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f46:	d10a      	bne.n	8002f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f9a:	f7fd fdaf 	bl	8000afc <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d10e      	bne.n	8002fcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f82a 	bl	8003016 <UART_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e020      	b.n	800300e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d10e      	bne.n	8002ff8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f814 	bl	8003016 <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e00a      	b.n	800300e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	e05d      	b.n	80030e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d059      	beq.n	80030e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fd fd64 	bl	8000afc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <UART_WaitOnFlagUntilTimeout+0x30>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11b      	bne.n	800307e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003054:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e042      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02b      	beq.n	80030e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309a:	d123      	bne.n	80030e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e00f      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d092      	beq.n	8003028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003122:	f3ef 8305 	mrs	r3, IPSR
 8003126:	60bb      	str	r3, [r7, #8]
  return(result);
 8003128:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	607b      	str	r3, [r7, #4]
  return(result);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800313a:	f3ef 8311 	mrs	r3, BASEPRI
 800313e:	603b      	str	r3, [r7, #0]
  return(result);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <osKernelInitialize+0x3a>
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <osKernelInitialize+0x64>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d103      	bne.n	8003156 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800314e:	f06f 0305 	mvn.w	r3, #5
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e00c      	b.n	8003170 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <osKernelInitialize+0x64>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <osKernelInitialize+0x64>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e002      	b.n	8003170 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003170:	68fb      	ldr	r3, [r7, #12]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	2000002c 	.word	0x2000002c

08003184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800318a:	f3ef 8305 	mrs	r3, IPSR
 800318e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003190:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10f      	bne.n	80031b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003196:	f3ef 8310 	mrs	r3, PRIMASK
 800319a:	607b      	str	r3, [r7, #4]
  return(result);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031a2:	f3ef 8311 	mrs	r3, BASEPRI
 80031a6:	603b      	str	r3, [r7, #0]
  return(result);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <osKernelStart+0x3a>
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <osKernelStart+0x68>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d103      	bne.n	80031be <osKernelStart+0x3a>
    stat = osErrorISR;
 80031b6:	f06f 0305 	mvn.w	r3, #5
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e010      	b.n	80031e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <osKernelStart+0x68>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d109      	bne.n	80031da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031c6:	f7ff ffa1 	bl	800310c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <osKernelStart+0x68>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031d0:	f001 fa6a 	bl	80046a8 <vTaskStartScheduler>
      stat = osOK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e002      	b.n	80031e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031e0:	68fb      	ldr	r3, [r7, #12]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000002c 	.word	0x2000002c

080031f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b090      	sub	sp, #64	; 0x40
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003200:	f3ef 8305 	mrs	r3, IPSR
 8003204:	61fb      	str	r3, [r7, #28]
  return(result);
 8003206:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003208:	2b00      	cmp	r3, #0
 800320a:	f040 808f 	bne.w	800332c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320e:	f3ef 8310 	mrs	r3, PRIMASK
 8003212:	61bb      	str	r3, [r7, #24]
  return(result);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800321a:	f3ef 8311 	mrs	r3, BASEPRI
 800321e:	617b      	str	r3, [r7, #20]
  return(result);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <osThreadNew+0x3e>
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <osThreadNew+0x148>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d07e      	beq.n	800332c <osThreadNew+0x13c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d07b      	beq.n	800332c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003238:	2318      	movs	r3, #24
 800323a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d045      	beq.n	80032d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <osThreadNew+0x6a>
        name = attr->name;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <osThreadNew+0x90>
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	2b38      	cmp	r3, #56	; 0x38
 8003272:	d805      	bhi.n	8003280 <osThreadNew+0x90>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <osThreadNew+0x94>
        return (NULL);
 8003280:	2300      	movs	r3, #0
 8003282:	e054      	b.n	800332e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <osThreadNew+0xca>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b5b      	cmp	r3, #91	; 0x5b
 80032a2:	d90a      	bls.n	80032ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <osThreadNew+0xca>
        mem = 1;
 80032b4:	2301      	movs	r3, #1
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	e010      	b.n	80032dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <osThreadNew+0xec>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d108      	bne.n	80032dc <osThreadNew+0xec>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <osThreadNew+0xec>
          mem = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	e001      	b.n	80032dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d110      	bne.n	8003304 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032ea:	9202      	str	r2, [sp, #8]
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f001 f82f 	bl	800435c <xTaskCreateStatic>
 80032fe:	4603      	mov	r3, r0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e013      	b.n	800332c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d110      	bne.n	800332c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	b29a      	uxth	r2, r3
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f001 f87d 	bl	800441c <xTaskCreate>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <osThreadNew+0x13c>
          hTask = NULL;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800332c:	693b      	ldr	r3, [r7, #16]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3730      	adds	r7, #48	; 0x30
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000002c 	.word	0x2000002c

0800333c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800334c:	f3ef 8305 	mrs	r3, IPSR
 8003350:	61bb      	str	r3, [r7, #24]
  return(result);
 8003352:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003354:	2b00      	cmp	r3, #0
 8003356:	d170      	bne.n	800343a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003358:	f3ef 8310 	mrs	r3, PRIMASK
 800335c:	617b      	str	r3, [r7, #20]
  return(result);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003364:	f3ef 8311 	mrs	r3, BASEPRI
 8003368:	613b      	str	r3, [r7, #16]
  return(result);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <osMessageQueueNew+0x3c>
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <osMessageQueueNew+0x108>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d060      	beq.n	800343a <osMessageQueueNew+0xfe>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d05d      	beq.n	800343a <osMessageQueueNew+0xfe>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05a      	beq.n	800343a <osMessageQueueNew+0xfe>
    mem = -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
 8003388:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d029      	beq.n	80033e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <osMessageQueueNew+0x82>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b4f      	cmp	r3, #79	; 0x4f
 800339e:	d90e      	bls.n	80033be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d302      	bcc.n	80033be <osMessageQueueNew+0x82>
        mem = 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	e014      	b.n	80033e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d110      	bne.n	80033e8 <osMessageQueueNew+0xac>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <osMessageQueueNew+0xac>
          mem = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	e001      	b.n	80033e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10c      	bne.n	8003408 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	2300      	movs	r3, #0
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	460b      	mov	r3, r1
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fa5a 	bl	80038b8 <xQueueGenericCreateStatic>
 8003404:	6278      	str	r0, [r7, #36]	; 0x24
 8003406:	e008      	b.n	800341a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800340e:	2200      	movs	r2, #0
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 facd 	bl	80039b2 <xQueueGenericCreate>
 8003418:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <osMessageQueueNew+0xf2>
        name = attr->name;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e001      	b.n	8003432 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003432:	69f9      	ldr	r1, [r7, #28]
 8003434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003436:	f000 ff35 	bl	80042a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800343c:	4618      	mov	r0, r3
 800343e:	3728      	adds	r7, #40	; 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000002c 	.word	0x2000002c

08003448 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003460:	f3ef 8305 	mrs	r3, IPSR
 8003464:	61fb      	str	r3, [r7, #28]
  return(result);
 8003466:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346c:	f3ef 8310 	mrs	r3, PRIMASK
 8003470:	61bb      	str	r3, [r7, #24]
  return(result);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003478:	f3ef 8311 	mrs	r3, BASEPRI
 800347c:	617b      	str	r3, [r7, #20]
  return(result);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02c      	beq.n	80034de <osMessageQueuePut+0x96>
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <osMessageQueuePut+0xe0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d128      	bne.n	80034de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <osMessageQueuePut+0x56>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <osMessageQueuePut+0x56>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800349e:	f06f 0303 	mvn.w	r3, #3
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034a4:	e039      	b.n	800351a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034aa:	f107 0210 	add.w	r2, r7, #16
 80034ae:	2300      	movs	r3, #0
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6a38      	ldr	r0, [r7, #32]
 80034b4:	f000 fbe4 	bl	8003c80 <xQueueGenericSendFromISR>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d003      	beq.n	80034c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80034be:	f06f 0302 	mvn.w	r3, #2
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034c4:	e029      	b.n	800351a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d026      	beq.n	800351a <osMessageQueuePut+0xd2>
 80034cc:	4b17      	ldr	r3, [pc, #92]	; (800352c <osMessageQueuePut+0xe4>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034dc:	e01d      	b.n	800351a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <osMessageQueuePut+0xa2>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80034ea:	f06f 0303 	mvn.w	r3, #3
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e014      	b.n	800351c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80034f2:	2300      	movs	r3, #0
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	6a38      	ldr	r0, [r7, #32]
 80034fa:	f000 fabf 	bl	8003a7c <xQueueGenericSend>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d00b      	beq.n	800351c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800350a:	f06f 0301 	mvn.w	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	e004      	b.n	800351c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003512:	f06f 0302 	mvn.w	r3, #2
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	e000      	b.n	800351c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800351a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800351e:	4618      	mov	r0, r3
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000002c 	.word	0x2000002c
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003546:	f3ef 8305 	mrs	r3, IPSR
 800354a:	61fb      	str	r3, [r7, #28]
  return(result);
 800354c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003552:	f3ef 8310 	mrs	r3, PRIMASK
 8003556:	61bb      	str	r3, [r7, #24]
  return(result);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800355e:	f3ef 8311 	mrs	r3, BASEPRI
 8003562:	617b      	str	r3, [r7, #20]
  return(result);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02c      	beq.n	80035c4 <osMessageQueueGet+0x94>
 800356a:	4b28      	ldr	r3, [pc, #160]	; (800360c <osMessageQueueGet+0xdc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d128      	bne.n	80035c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <osMessageQueueGet+0x54>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <osMessageQueueGet+0x54>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003584:	f06f 0303 	mvn.w	r3, #3
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800358a:	e038      	b.n	80035fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	461a      	mov	r2, r3
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	6a38      	ldr	r0, [r7, #32]
 800359a:	f000 fcef 	bl	8003f7c <xQueueReceiveFromISR>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d003      	beq.n	80035ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80035a4:	f06f 0302 	mvn.w	r3, #2
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035aa:	e028      	b.n	80035fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d025      	beq.n	80035fe <osMessageQueueGet+0xce>
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <osMessageQueueGet+0xe0>)
 80035b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035c2:	e01c      	b.n	80035fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <osMessageQueueGet+0xa0>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80035d0:	f06f 0303 	mvn.w	r3, #3
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e013      	b.n	8003600 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	6a38      	ldr	r0, [r7, #32]
 80035de:	f000 fbeb 	bl	8003db8 <xQueueReceive>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d00b      	beq.n	8003600 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80035ee:	f06f 0301 	mvn.w	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e004      	b.n	8003600 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80035f6:	f06f 0302 	mvn.w	r3, #2
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
 80035fc:	e000      	b.n	8003600 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003602:	4618      	mov	r0, r3
 8003604:	3728      	adds	r7, #40	; 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	2000002c 	.word	0x2000002c
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <vApplicationGetIdleTaskMemory+0x2c>)
 8003624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <vApplicationGetIdleTaskMemory+0x30>)
 800362a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000030 	.word	0x20000030
 8003644:	2000008c 	.word	0x2000008c

08003648 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <vApplicationGetTimerTaskMemory+0x2c>)
 8003658:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a06      	ldr	r2, [pc, #24]	; (8003678 <vApplicationGetTimerTaskMemory+0x30>)
 800365e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	2000028c 	.word	0x2000028c
 8003678:	200002e8 	.word	0x200002e8

0800367c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f103 0208 	add.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f103 0208 	add.w	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0208 	add.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d103      	bne.n	800373e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e00c      	b.n	8003758 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3308      	adds	r3, #8
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e002      	b.n	800374c <vListInsert+0x2e>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d2f6      	bcs.n	8003746 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	601a      	str	r2, [r3, #0]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6852      	ldr	r2, [r2, #4]
 80037b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d103      	bne.n	80037c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	b672      	cpsid	i
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	b662      	cpsie	i
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	e7fe      	b.n	800380e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003810:	f002 f8d2 	bl	80059b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	441a      	add	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	3b01      	subs	r3, #1
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	441a      	add	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d114      	bne.n	8003890 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01a      	beq.n	80038a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3310      	adds	r3, #16
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f9a6 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <xQueueGenericReset+0xd0>)
 8003880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	e009      	b.n	80038a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3310      	adds	r3, #16
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fef1 	bl	800367c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3324      	adds	r3, #36	; 0x24
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff feec 	bl	800367c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038a4:	f002 f8ba 	bl	8005a1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038a8:	2301      	movs	r3, #1
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	; 0x38
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <xQueueGenericCreateStatic+0x2c>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	b672      	cpsid	i
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	b662      	cpsie	i
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e2:	e7fe      	b.n	80038e2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <xQueueGenericCreateStatic+0x4a>
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	b672      	cpsid	i
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	b662      	cpsie	i
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	e7fe      	b.n	8003900 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <xQueueGenericCreateStatic+0x56>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <xQueueGenericCreateStatic+0x5a>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericCreateStatic+0x5c>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericCreateStatic+0x78>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	b672      	cpsid	i
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	b662      	cpsie	i
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	e7fe      	b.n	800392e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <xQueueGenericCreateStatic+0x84>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <xQueueGenericCreateStatic+0x88>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <xQueueGenericCreateStatic+0x8a>
 8003940:	2300      	movs	r3, #0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <xQueueGenericCreateStatic+0xa6>
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	b672      	cpsid	i
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	b662      	cpsie	i
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e7fe      	b.n	800395c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800395e:	2350      	movs	r3, #80	; 0x50
 8003960:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b50      	cmp	r3, #80	; 0x50
 8003966:	d00b      	beq.n	8003980 <xQueueGenericCreateStatic+0xc8>
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	b672      	cpsid	i
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	b662      	cpsie	i
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e7fe      	b.n	800397e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003980:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003994:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f846 	bl	8003a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3730      	adds	r7, #48	; 0x30
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b08a      	sub	sp, #40	; 0x28
 80039b6:	af02      	add	r7, sp, #8
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <xQueueGenericCreate+0x2c>
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	b672      	cpsid	i
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	b662      	cpsie	i
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e004      	b.n	80039f4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3350      	adds	r3, #80	; 0x50
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 f8ff 	bl	8005bfc <pvPortMalloc>
 80039fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d011      	beq.n	8003a2a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3350      	adds	r3, #80	; 0x50
 8003a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a18:	79fa      	ldrb	r2, [r7, #7]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f805 	bl	8003a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d103      	bne.n	8003a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e002      	b.n	8003a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a62:	2101      	movs	r1, #1
 8003a64:	69b8      	ldr	r0, [r7, #24]
 8003a66:	f7ff febd 	bl	80037e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	; 0x38
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueGenericSend+0x34>
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	b672      	cpsid	i
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	b662      	cpsie	i
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aae:	e7fe      	b.n	8003aae <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <xQueueGenericSend+0x42>
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xQueueGenericSend+0x46>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueGenericSend+0x48>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <xQueueGenericSend+0x64>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	b672      	cpsid	i
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	b662      	cpsie	i
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	e7fe      	b.n	8003ade <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x72>
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <xQueueGenericSend+0x76>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <xQueueGenericSend+0x78>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xQueueGenericSend+0x94>
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	b672      	cpsid	i
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	b662      	cpsie	i
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b10:	f001 fa16 	bl	8004f40 <xTaskGetSchedulerState>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <xQueueGenericSend+0xa4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <xQueueGenericSend+0xa8>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <xQueueGenericSend+0xaa>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <xQueueGenericSend+0xc6>
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	b672      	cpsid	i
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	b662      	cpsie	i
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	e7fe      	b.n	8003b40 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b42:	f001 ff39 	bl	80059b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <xQueueGenericSend+0xdc>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d129      	bne.n	8003bac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5e:	f000 fa90 	bl	8004082 <prvCopyDataToQueue>
 8003b62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d010      	beq.n	8003b8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	3324      	adds	r3, #36	; 0x24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 f827 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <xQueueGenericSend+0x200>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	e00a      	b.n	8003ba4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <xQueueGenericSend+0x200>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ba4:	f001 ff3a 	bl	8005a1c <vPortExitCritical>
				return pdPASS;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e063      	b.n	8003c74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bb2:	f001 ff33 	bl	8005a1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e05c      	b.n	8003c74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 f861 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bce:	f001 ff25 	bl	8005a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd2:	f000 fdd1 	bl	8004778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd6:	f001 feef 	bl	80059b8 <vPortEnterCritical>
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d103      	bne.n	8003bf0 <xQueueGenericSend+0x174>
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d103      	bne.n	8003c06 <xQueueGenericSend+0x18a>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c06:	f001 ff09 	bl	8005a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c0a:	1d3a      	adds	r2, r7, #4
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f850 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d124      	bne.n	8003c68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c20:	f000 fb27 	bl	8004272 <prvIsQueueFull>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d018      	beq.n	8003c5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	3310      	adds	r3, #16
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 ff74 	bl	8004b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3a:	f000 fab2 	bl	80041a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c3e:	f000 fda9 	bl	8004794 <xTaskResumeAll>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f47f af7c 	bne.w	8003b42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <xQueueGenericSend+0x200>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	e772      	b.n	8003b42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5e:	f000 faa0 	bl	80041a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c62:	f000 fd97 	bl	8004794 <xTaskResumeAll>
 8003c66:	e76c      	b.n	8003b42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6a:	f000 fa9a 	bl	80041a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6e:	f000 fd91 	bl	8004794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3738      	adds	r7, #56	; 0x38
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08e      	sub	sp, #56	; 0x38
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <xQueueGenericSendFromISR+0x30>
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	b672      	cpsid	i
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	b662      	cpsie	i
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e7fe      	b.n	8003cae <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <xQueueGenericSendFromISR+0x3e>
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <xQueueGenericSendFromISR+0x42>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <xQueueGenericSendFromISR+0x44>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <xQueueGenericSendFromISR+0x60>
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	b672      	cpsid	i
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	b662      	cpsie	i
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	e7fe      	b.n	8003cde <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d103      	bne.n	8003cee <xQueueGenericSendFromISR+0x6e>
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <xQueueGenericSendFromISR+0x72>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <xQueueGenericSendFromISR+0x74>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <xQueueGenericSendFromISR+0x90>
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	b672      	cpsid	i
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	b662      	cpsie	i
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e7fe      	b.n	8003d0e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d10:	f001 ff32 	bl	8005b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d14:	f3ef 8211 	mrs	r2, BASEPRI
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	b672      	cpsid	i
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	b662      	cpsie	i
 8003d2c:	61ba      	str	r2, [r7, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <xQueueGenericSendFromISR+0xc6>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d12c      	bne.n	8003da0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d56:	f000 f994 	bl	8004082 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d112      	bne.n	8003d8a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d016      	beq.n	8003d9a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 ff27 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e007      	b.n	8003d9a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d8e:	3301      	adds	r3, #1
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	b25a      	sxtb	r2, r3
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d9e:	e001      	b.n	8003da4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3738      	adds	r7, #56	; 0x38
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08c      	sub	sp, #48	; 0x30
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <xQueueReceive+0x32>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	b672      	cpsid	i
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	b662      	cpsie	i
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	e7fe      	b.n	8003de8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <xQueueReceive+0x40>
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <xQueueReceive+0x44>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <xQueueReceive+0x46>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <xQueueReceive+0x62>
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	b672      	cpsid	i
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	b662      	cpsie	i
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e7fe      	b.n	8003e18 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e1a:	f001 f891 	bl	8004f40 <xTaskGetSchedulerState>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <xQueueReceive+0x72>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <xQueueReceive+0x76>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <xQueueReceive+0x78>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <xQueueReceive+0x94>
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	b672      	cpsid	i
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	b662      	cpsie	i
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	e7fe      	b.n	8003e4a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e4c:	f001 fdb4 	bl	80059b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01f      	beq.n	8003e9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e60:	f000 f979 	bl	8004156 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	3310      	adds	r3, #16
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fea3 	bl	8004bc4 <xTaskRemoveFromEventList>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <xQueueReceive+0x1c0>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e94:	f001 fdc2 	bl	8005a1c <vPortExitCritical>
				return pdPASS;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e069      	b.n	8003f70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ea2:	f001 fdbb 	bl	8005a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e062      	b.n	8003f70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fee9 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ebe:	f001 fdad 	bl	8005a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ec2:	f000 fc59 	bl	8004778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ec6:	f001 fd77 	bl	80059b8 <vPortEnterCritical>
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d103      	bne.n	8003ee0 <xQueueReceive+0x128>
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d103      	bne.n	8003ef6 <xQueueReceive+0x13e>
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef6:	f001 fd91 	bl	8005a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003efa:	1d3a      	adds	r2, r7, #4
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fed8 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d123      	bne.n	8003f56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f10:	f000 f999 	bl	8004246 <prvIsQueueEmpty>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	3324      	adds	r3, #36	; 0x24
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fdfc 	bl	8004b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2a:	f000 f93a 	bl	80041a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f2e:	f000 fc31 	bl	8004794 <xTaskResumeAll>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d189      	bne.n	8003e4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <xQueueReceive+0x1c0>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	e780      	b.n	8003e4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4c:	f000 f929 	bl	80041a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f50:	f000 fc20 	bl	8004794 <xTaskResumeAll>
 8003f54:	e77a      	b.n	8003e4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f58:	f000 f923 	bl	80041a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f5c:	f000 fc1a 	bl	8004794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f62:	f000 f970 	bl	8004246 <prvIsQueueEmpty>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f43f af6f 	beq.w	8003e4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3730      	adds	r7, #48	; 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <xQueueReceiveFromISR+0x2e>
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	b672      	cpsid	i
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	b662      	cpsie	i
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <xQueueReceiveFromISR+0x3c>
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <xQueueReceiveFromISR+0x40>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <xQueueReceiveFromISR+0x42>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <xQueueReceiveFromISR+0x5e>
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	b672      	cpsid	i
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	b662      	cpsie	i
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fda:	f001 fdcd 	bl	8005b78 <vPortValidateInterruptPriority>
	__asm volatile
 8003fde:	f3ef 8211 	mrs	r2, BASEPRI
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	b672      	cpsid	i
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	b662      	cpsie	i
 8003ff6:	61ba      	str	r2, [r7, #24]
 8003ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02f      	beq.n	800406a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004018:	f000 f89d 	bl	8004156 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	1e5a      	subs	r2, r3, #1
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d112      	bne.n	8004054 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	3310      	adds	r3, #16
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fdc2 	bl	8004bc4 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e007      	b.n	8004064 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004058:	3301      	adds	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	b25a      	sxtb	r2, r3
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	e001      	b.n	800406e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800406a:	2300      	movs	r3, #0
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800407a:	4618      	mov	r0, r3
 800407c:	3738      	adds	r7, #56	; 0x38
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10d      	bne.n	80040bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d14d      	bne.n	8004144 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 ff65 	bl	8004f7c <xTaskPriorityDisinherit>
 80040b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	e043      	b.n	8004144 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d119      	bne.n	80040f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6858      	ldr	r0, [r3, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	461a      	mov	r2, r3
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	f001 ff99 	bl	8006004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	441a      	add	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d32b      	bcc.n	8004144 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	e026      	b.n	8004144 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68d8      	ldr	r0, [r3, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	461a      	mov	r2, r3
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	f001 ff7f 	bl	8006004 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	425b      	negs	r3, r3
 8004110:	441a      	add	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d207      	bcs.n	8004132 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	425b      	negs	r3, r3
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d105      	bne.n	8004144 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3b01      	subs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800414c:	697b      	ldr	r3, [r7, #20]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d018      	beq.n	800419a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	441a      	add	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	d303      	bcc.n	800418a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68d9      	ldr	r1, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	461a      	mov	r2, r3
 8004194:	6838      	ldr	r0, [r7, #0]
 8004196:	f001 ff35 	bl	8006004 <memcpy>
	}
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041aa:	f001 fc05 	bl	80059b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041b6:	e011      	b.n	80041dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3324      	adds	r3, #36	; 0x24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fcfd 	bl	8004bc4 <xTaskRemoveFromEventList>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041d0:	f000 fdd6 	bl	8004d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	dce9      	bgt.n	80041b8 <prvUnlockQueue+0x16>
 80041e4:	e000      	b.n	80041e8 <prvUnlockQueue+0x46>
					break;
 80041e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	22ff      	movs	r2, #255	; 0xff
 80041ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041f0:	f001 fc14 	bl	8005a1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041f4:	f001 fbe0 	bl	80059b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004200:	e011      	b.n	8004226 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3310      	adds	r3, #16
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fcd8 	bl	8004bc4 <xTaskRemoveFromEventList>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800421a:	f000 fdb1 	bl	8004d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	3b01      	subs	r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800422a:	2b00      	cmp	r3, #0
 800422c:	dce9      	bgt.n	8004202 <prvUnlockQueue+0x60>
 800422e:	e000      	b.n	8004232 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004230:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	22ff      	movs	r2, #255	; 0xff
 8004236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800423a:	f001 fbef 	bl	8005a1c <vPortExitCritical>
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800424e:	f001 fbb3 	bl	80059b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e001      	b.n	8004264 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004264:	f001 fbda 	bl	8005a1c <vPortExitCritical>

	return xReturn;
 8004268:	68fb      	ldr	r3, [r7, #12]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800427a:	f001 fb9d 	bl	80059b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	429a      	cmp	r2, r3
 8004288:	d102      	bne.n	8004290 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	e001      	b.n	8004294 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004294:	f001 fbc2 	bl	8005a1c <vPortExitCritical>

	return xReturn;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e014      	b.n	80042de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042b4:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <vQueueAddToRegistry+0x4c>)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042c0:	490b      	ldr	r1, [pc, #44]	; (80042f0 <vQueueAddToRegistry+0x4c>)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <vQueueAddToRegistry+0x4c>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042d6:	e005      	b.n	80042e4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d9e7      	bls.n	80042b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	20004a08 	.word	0x20004a08

080042f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004304:	f001 fb58 	bl	80059b8 <vPortEnterCritical>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430e:	b25b      	sxtb	r3, r3
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d103      	bne.n	800431e <vQueueWaitForMessageRestricted+0x2a>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d103      	bne.n	8004334 <vQueueWaitForMessageRestricted+0x40>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004334:	f001 fb72 	bl	8005a1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fc0f 	bl	8004b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff27 	bl	80041a2 <prvUnlockQueue>
	}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af04      	add	r7, sp, #16
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	b672      	cpsid	i
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	b662      	cpsie	i
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	e7fe      	b.n	8004386 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <xTaskCreateStatic+0x4a>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	b672      	cpsid	i
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	b662      	cpsie	i
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e7fe      	b.n	80043a4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043a6:	235c      	movs	r3, #92	; 0x5c
 80043a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b5c      	cmp	r3, #92	; 0x5c
 80043ae:	d00b      	beq.n	80043c8 <xTaskCreateStatic+0x6c>
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	b672      	cpsid	i
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	b662      	cpsie	i
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e7fe      	b.n	80043c6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01e      	beq.n	800440e <xTaskCreateStatic+0xb2>
 80043d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01b      	beq.n	800440e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043e8:	2300      	movs	r3, #0
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	f107 0314 	add.w	r3, r7, #20
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f850 	bl	80044a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004408:	f000 f8de 	bl	80045c8 <prvAddNewTaskToReadyList>
 800440c:	e001      	b.n	8004412 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004412:	697b      	ldr	r3, [r7, #20]
	}
 8004414:	4618      	mov	r0, r3
 8004416:	3728      	adds	r7, #40	; 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af04      	add	r7, sp, #16
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f001 fbe3 	bl	8005bfc <pvPortMalloc>
 8004436:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00e      	beq.n	800445c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800443e:	205c      	movs	r0, #92	; 0x5c
 8004440:	f001 fbdc 	bl	8005bfc <pvPortMalloc>
 8004444:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
 8004452:	e005      	b.n	8004460 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f001 fc99 	bl	8005d8c <vPortFree>
 800445a:	e001      	b.n	8004460 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d017      	beq.n	8004496 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	2300      	movs	r3, #0
 8004472:	9303      	str	r3, [sp, #12]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f80e 	bl	80044a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800448a:	69f8      	ldr	r0, [r7, #28]
 800448c:	f000 f89c 	bl	80045c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004490:	2301      	movs	r3, #1
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e002      	b.n	800449c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800449c:	69bb      	ldr	r3, [r7, #24]
	}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b088      	sub	sp, #32
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	461a      	mov	r2, r3
 80044be:	21a5      	movs	r1, #165	; 0xa5
 80044c0:	f001 fdab 	bl	800601a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80044ce:	440b      	add	r3, r1
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f023 0307 	bic.w	r3, r3, #7
 80044dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <prvInitialiseNewTask+0x5a>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	b672      	cpsid	i
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	b662      	cpsie	i
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e7fe      	b.n	80044fe <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01f      	beq.n	8004546 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e012      	b.n	8004532 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	7819      	ldrb	r1, [r3, #0]
 8004514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	3334      	adds	r3, #52	; 0x34
 800451c:	460a      	mov	r2, r1
 800451e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b0f      	cmp	r3, #15
 8004536:	d9e9      	bls.n	800450c <prvInitialiseNewTask+0x66>
 8004538:	e000      	b.n	800453c <prvInitialiseNewTask+0x96>
			{
				break;
 800453a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004544:	e003      	b.n	800454e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	2b37      	cmp	r3, #55	; 0x37
 8004552:	d901      	bls.n	8004558 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004554:	2337      	movs	r3, #55	; 0x37
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2200      	movs	r2, #0
 8004568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff f8a4 	bl	80036bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	3318      	adds	r3, #24
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f89f 	bl	80036bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	2200      	movs	r2, #0
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	69b8      	ldr	r0, [r7, #24]
 80045a8:	f001 f900 	bl	80057ac <pxPortInitialiseStack>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d0:	f001 f9f2 	bl	80059b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045d4:	4b2d      	ldr	r3, [pc, #180]	; (800468c <prvAddNewTaskToReadyList+0xc4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	4a2c      	ldr	r2, [pc, #176]	; (800468c <prvAddNewTaskToReadyList+0xc4>)
 80045dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045de:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <prvAddNewTaskToReadyList+0xc8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045e6:	4a2a      	ldr	r2, [pc, #168]	; (8004690 <prvAddNewTaskToReadyList+0xc8>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045ec:	4b27      	ldr	r3, [pc, #156]	; (800468c <prvAddNewTaskToReadyList+0xc4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d110      	bne.n	8004616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045f4:	f000 fbe8 	bl	8004dc8 <prvInitialiseTaskLists>
 80045f8:	e00d      	b.n	8004616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045fa:	4b26      	ldr	r3, [pc, #152]	; (8004694 <prvAddNewTaskToReadyList+0xcc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <prvAddNewTaskToReadyList+0xc8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d802      	bhi.n	8004616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <prvAddNewTaskToReadyList+0xc8>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <prvAddNewTaskToReadyList+0xd0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <prvAddNewTaskToReadyList+0xd0>)
 800461e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004620:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <prvAddNewTaskToReadyList+0xd0>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <prvAddNewTaskToReadyList+0xd4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d903      	bls.n	800463c <prvAddNewTaskToReadyList+0x74>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a18      	ldr	r2, [pc, #96]	; (800469c <prvAddNewTaskToReadyList+0xd4>)
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <prvAddNewTaskToReadyList+0xd8>)
 800464a:	441a      	add	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7ff f83f 	bl	80036d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004658:	f001 f9e0 	bl	8005a1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <prvAddNewTaskToReadyList+0xcc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <prvAddNewTaskToReadyList+0xc8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	429a      	cmp	r2, r3
 8004670:	d207      	bcs.n	8004682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <prvAddNewTaskToReadyList+0xdc>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000bbc 	.word	0x20000bbc
 8004690:	200006e8 	.word	0x200006e8
 8004694:	20000bc8 	.word	0x20000bc8
 8004698:	20000bd8 	.word	0x20000bd8
 800469c:	20000bc4 	.word	0x20000bc4
 80046a0:	200006ec 	.word	0x200006ec
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046b6:	463a      	mov	r2, r7
 80046b8:	1d39      	adds	r1, r7, #4
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe ffa8 	bl	8003614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	9202      	str	r2, [sp, #8]
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	460a      	mov	r2, r1
 80046d6:	4922      	ldr	r1, [pc, #136]	; (8004760 <vTaskStartScheduler+0xb8>)
 80046d8:	4822      	ldr	r0, [pc, #136]	; (8004764 <vTaskStartScheduler+0xbc>)
 80046da:	f7ff fe3f 	bl	800435c <xTaskCreateStatic>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b21      	ldr	r3, [pc, #132]	; (8004768 <vTaskStartScheduler+0xc0>)
 80046e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046e4:	4b20      	ldr	r3, [pc, #128]	; (8004768 <vTaskStartScheduler+0xc0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e001      	b.n	80046f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d102      	bne.n	8004702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046fc:	f000 fd02 	bl	8005104 <xTimerCreateTimerTask>
 8004700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d117      	bne.n	8004738 <vTaskStartScheduler+0x90>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	b672      	cpsid	i
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	b662      	cpsie	i
 800471c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <vTaskStartScheduler+0xc4>)
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <vTaskStartScheduler+0xc8>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <vTaskStartScheduler+0xcc>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004732:	f001 f8c5 	bl	80058c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004736:	e00f      	b.n	8004758 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d10b      	bne.n	8004758 <vTaskStartScheduler+0xb0>
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	b672      	cpsid	i
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	b662      	cpsie	i
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e7fe      	b.n	8004756 <vTaskStartScheduler+0xae>
}
 8004758:	bf00      	nop
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	080060dc 	.word	0x080060dc
 8004764:	08004d99 	.word	0x08004d99
 8004768:	20000be0 	.word	0x20000be0
 800476c:	20000bdc 	.word	0x20000bdc
 8004770:	20000bc8 	.word	0x20000bc8
 8004774:	20000bc0 	.word	0x20000bc0

08004778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vTaskSuspendAll+0x18>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a03      	ldr	r2, [pc, #12]	; (8004790 <vTaskSuspendAll+0x18>)
 8004784:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000be4 	.word	0x20000be4

08004794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047a2:	4b42      	ldr	r3, [pc, #264]	; (80048ac <xTaskResumeAll+0x118>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <xTaskResumeAll+0x2e>
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	b672      	cpsid	i
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	b662      	cpsie	i
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	e7fe      	b.n	80047c0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047c2:	f001 f8f9 	bl	80059b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <xTaskResumeAll+0x118>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	4a37      	ldr	r2, [pc, #220]	; (80048ac <xTaskResumeAll+0x118>)
 80047ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d0:	4b36      	ldr	r3, [pc, #216]	; (80048ac <xTaskResumeAll+0x118>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d162      	bne.n	800489e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <xTaskResumeAll+0x11c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05e      	beq.n	800489e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e0:	e02f      	b.n	8004842 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e2:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <xTaskResumeAll+0x120>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3318      	adds	r3, #24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe ffce 	bl	8003790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe ffc9 	bl	8003790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <xTaskResumeAll+0x124>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d903      	bls.n	8004812 <xTaskResumeAll+0x7e>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <xTaskResumeAll+0x124>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a27      	ldr	r2, [pc, #156]	; (80048bc <xTaskResumeAll+0x128>)
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f7fe ff54 	bl	80036d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <xTaskResumeAll+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <xTaskResumeAll+0x130>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <xTaskResumeAll+0x120>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1cb      	bne.n	80047e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004850:	f000 fb56 	bl	8004f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <xTaskResumeAll+0x134>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d010      	beq.n	8004882 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004860:	f000 f846 	bl	80048f0 <xTaskIncrementTick>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <xTaskResumeAll+0x130>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f1      	bne.n	8004860 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800487c:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <xTaskResumeAll+0x134>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <xTaskResumeAll+0x130>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800488a:	2301      	movs	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <xTaskResumeAll+0x138>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800489e:	f001 f8bd 	bl	8005a1c <vPortExitCritical>

	return xAlreadyYielded;
 80048a2:	68bb      	ldr	r3, [r7, #8]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000be4 	.word	0x20000be4
 80048b0:	20000bbc 	.word	0x20000bbc
 80048b4:	20000b7c 	.word	0x20000b7c
 80048b8:	20000bc4 	.word	0x20000bc4
 80048bc:	200006ec 	.word	0x200006ec
 80048c0:	200006e8 	.word	0x200006e8
 80048c4:	20000bd0 	.word	0x20000bd0
 80048c8:	20000bcc 	.word	0x20000bcc
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <xTaskGetTickCount+0x1c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048dc:	687b      	ldr	r3, [r7, #4]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000bc0 	.word	0x20000bc0

080048f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fa:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <xTaskIncrementTick+0x148>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 808a 	bne.w	8004a18 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <xTaskIncrementTick+0x14c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800490c:	4a4b      	ldr	r2, [pc, #300]	; (8004a3c <xTaskIncrementTick+0x14c>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d121      	bne.n	800495c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004918:	4b49      	ldr	r3, [pc, #292]	; (8004a40 <xTaskIncrementTick+0x150>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <xTaskIncrementTick+0x4a>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	b672      	cpsid	i
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	b662      	cpsie	i
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	e7fe      	b.n	8004938 <xTaskIncrementTick+0x48>
 800493a:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <xTaskIncrementTick+0x150>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	4b40      	ldr	r3, [pc, #256]	; (8004a44 <xTaskIncrementTick+0x154>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3e      	ldr	r2, [pc, #248]	; (8004a40 <xTaskIncrementTick+0x150>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <xTaskIncrementTick+0x154>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <xTaskIncrementTick+0x158>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <xTaskIncrementTick+0x158>)
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	f000 fad2 	bl	8004f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800495c:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <xTaskIncrementTick+0x15c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	d349      	bcc.n	80049fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004966:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <xTaskIncrementTick+0x150>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004970:	4b36      	ldr	r3, [pc, #216]	; (8004a4c <xTaskIncrementTick+0x15c>)
 8004972:	f04f 32ff 	mov.w	r2, #4294967295
 8004976:	601a      	str	r2, [r3, #0]
					break;
 8004978:	e03f      	b.n	80049fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <xTaskIncrementTick+0x150>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d203      	bcs.n	800499a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004992:	4a2e      	ldr	r2, [pc, #184]	; (8004a4c <xTaskIncrementTick+0x15c>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004998:	e02f      	b.n	80049fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fef6 	bl	8003790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	3318      	adds	r3, #24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe feed 	bl	8003790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <xTaskIncrementTick+0x160>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d903      	bls.n	80049ca <xTaskIncrementTick+0xda>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <xTaskIncrementTick+0x160>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <xTaskIncrementTick+0x164>)
 80049d8:	441a      	add	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7fe fe78 	bl	80036d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <xTaskIncrementTick+0x168>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3b8      	bcc.n	8004966 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f8:	e7b5      	b.n	8004966 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049fa:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <xTaskIncrementTick+0x168>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	4914      	ldr	r1, [pc, #80]	; (8004a54 <xTaskIncrementTick+0x164>)
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d907      	bls.n	8004a22 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e004      	b.n	8004a22 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <xTaskIncrementTick+0x16c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <xTaskIncrementTick+0x16c>)
 8004a20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <xTaskIncrementTick+0x170>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a2e:	697b      	ldr	r3, [r7, #20]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000be4 	.word	0x20000be4
 8004a3c:	20000bc0 	.word	0x20000bc0
 8004a40:	20000b74 	.word	0x20000b74
 8004a44:	20000b78 	.word	0x20000b78
 8004a48:	20000bd4 	.word	0x20000bd4
 8004a4c:	20000bdc 	.word	0x20000bdc
 8004a50:	20000bc4 	.word	0x20000bc4
 8004a54:	200006ec 	.word	0x200006ec
 8004a58:	200006e8 	.word	0x200006e8
 8004a5c:	20000bcc 	.word	0x20000bcc
 8004a60:	20000bd0 	.word	0x20000bd0

08004a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a6a:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <vTaskSwitchContext+0xa8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <vTaskSwitchContext+0xac>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a78:	e042      	b.n	8004b00 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a7a:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <vTaskSwitchContext+0xac>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <vTaskSwitchContext+0xb0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e011      	b.n	8004aac <vTaskSwitchContext+0x48>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <vTaskSwitchContext+0x42>
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	b672      	cpsid	i
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	b662      	cpsie	i
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	e7fe      	b.n	8004aa4 <vTaskSwitchContext+0x40>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	491a      	ldr	r1, [pc, #104]	; (8004b18 <vTaskSwitchContext+0xb4>)
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0e3      	beq.n	8004a88 <vTaskSwitchContext+0x24>
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <vTaskSwitchContext+0xb4>)
 8004acc:	4413      	add	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d104      	bne.n	8004af0 <vTaskSwitchContext+0x8c>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <vTaskSwitchContext+0xb8>)
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4a06      	ldr	r2, [pc, #24]	; (8004b14 <vTaskSwitchContext+0xb0>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000be4 	.word	0x20000be4
 8004b10:	20000bd0 	.word	0x20000bd0
 8004b14:	20000bc4 	.word	0x20000bc4
 8004b18:	200006ec 	.word	0x200006ec
 8004b1c:	200006e8 	.word	0x200006e8

08004b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10b      	bne.n	8004b48 <vTaskPlaceOnEventList+0x28>
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e7fe      	b.n	8004b46 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <vTaskPlaceOnEventList+0x48>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fe fde4 	bl	800371e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b56:	2101      	movs	r1, #1
 8004b58:	6838      	ldr	r0, [r7, #0]
 8004b5a:	f000 fa7f 	bl	800505c <prvAddCurrentTaskToDelayedList>
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200006e8 	.word	0x200006e8

08004b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <vTaskPlaceOnEventListRestricted+0x2a>
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	b672      	cpsid	i
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	b662      	cpsie	i
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e7fe      	b.n	8004b94 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3318      	adds	r3, #24
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7fe fd99 	bl	80036d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004baa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	68b8      	ldr	r0, [r7, #8]
 8004bb4:	f000 fa52 	bl	800505c <prvAddCurrentTaskToDelayedList>
	}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	200006e8 	.word	0x200006e8

08004bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xTaskRemoveFromEventList+0x2e>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	b672      	cpsid	i
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	b662      	cpsie	i
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fdca 	bl	8003790 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <xTaskRemoveFromEventList+0xb0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11d      	bne.n	8004c40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fdc1 	bl	8003790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <xTaskRemoveFromEventList+0xb4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d903      	bls.n	8004c22 <xTaskRemoveFromEventList+0x5e>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <xTaskRemoveFromEventList+0xb4>)
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <xTaskRemoveFromEventList+0xb8>)
 8004c30:	441a      	add	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7fe fd4c 	bl	80036d6 <vListInsertEnd>
 8004c3e:	e005      	b.n	8004c4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3318      	adds	r3, #24
 8004c44:	4619      	mov	r1, r3
 8004c46:	480e      	ldr	r0, [pc, #56]	; (8004c80 <xTaskRemoveFromEventList+0xbc>)
 8004c48:	f7fe fd45 	bl	80036d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <xTaskRemoveFromEventList+0xc0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d905      	bls.n	8004c66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <xTaskRemoveFromEventList+0xc4>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e001      	b.n	8004c6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000be4 	.word	0x20000be4
 8004c78:	20000bc4 	.word	0x20000bc4
 8004c7c:	200006ec 	.word	0x200006ec
 8004c80:	20000b7c 	.word	0x20000b7c
 8004c84:	200006e8 	.word	0x200006e8
 8004c88:	20000bd0 	.word	0x20000bd0

08004c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <vTaskInternalSetTimeOutState+0x24>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <vTaskInternalSetTimeOutState+0x28>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000bd4 	.word	0x20000bd4
 8004cb4:	20000bc0 	.word	0x20000bc0

08004cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <xTaskCheckForTimeOut+0x28>
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	b672      	cpsid	i
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	b662      	cpsie	i
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	e7fe      	b.n	8004cde <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <xTaskCheckForTimeOut+0x46>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	b672      	cpsid	i
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	b662      	cpsie	i
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e7fe      	b.n	8004cfc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8004cfe:	f000 fe5b 	bl	80059b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <xTaskCheckForTimeOut+0xc0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e023      	b.n	8004d6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <xTaskCheckForTimeOut+0xc4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d007      	beq.n	8004d3e <xTaskCheckForTimeOut+0x86>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e015      	b.n	8004d6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d20b      	bcs.n	8004d60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff99 	bl	8004c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e004      	b.n	8004d6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d6a:	f000 fe57 	bl	8005a1c <vPortExitCritical>

	return xReturn;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000bc0 	.word	0x20000bc0
 8004d7c:	20000bd4 	.word	0x20000bd4

08004d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <vTaskMissedYield+0x14>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	20000bd0 	.word	0x20000bd0

08004d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004da0:	f000 f852 	bl	8004e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvIdleTask+0x28>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d9f9      	bls.n	8004da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <prvIdleTask+0x2c>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dbc:	e7f0      	b.n	8004da0 <prvIdleTask+0x8>
 8004dbe:	bf00      	nop
 8004dc0:	200006ec 	.word	0x200006ec
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e00c      	b.n	8004dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <prvInitialiseTaskLists+0x60>)
 8004de0:	4413      	add	r3, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fc4a 	bl	800367c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b37      	cmp	r3, #55	; 0x37
 8004df2:	d9ef      	bls.n	8004dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df4:	480d      	ldr	r0, [pc, #52]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004df6:	f7fe fc41 	bl	800367c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dfa:	480d      	ldr	r0, [pc, #52]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004dfc:	f7fe fc3e 	bl	800367c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e00:	480c      	ldr	r0, [pc, #48]	; (8004e34 <prvInitialiseTaskLists+0x6c>)
 8004e02:	f7fe fc3b 	bl	800367c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e06:	480c      	ldr	r0, [pc, #48]	; (8004e38 <prvInitialiseTaskLists+0x70>)
 8004e08:	f7fe fc38 	bl	800367c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e0c:	480b      	ldr	r0, [pc, #44]	; (8004e3c <prvInitialiseTaskLists+0x74>)
 8004e0e:	f7fe fc35 	bl	800367c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <prvInitialiseTaskLists+0x78>)
 8004e14:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <prvInitialiseTaskLists+0x7c>)
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200006ec 	.word	0x200006ec
 8004e2c:	20000b4c 	.word	0x20000b4c
 8004e30:	20000b60 	.word	0x20000b60
 8004e34:	20000b7c 	.word	0x20000b7c
 8004e38:	20000b90 	.word	0x20000b90
 8004e3c:	20000ba8 	.word	0x20000ba8
 8004e40:	20000b74 	.word	0x20000b74
 8004e44:	20000b78 	.word	0x20000b78

08004e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4e:	e019      	b.n	8004e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e50:	f000 fdb2 	bl	80059b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <prvCheckTasksWaitingTermination+0x4c>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fc95 	bl	8003790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvCheckTasksWaitingTermination+0x50>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <prvCheckTasksWaitingTermination+0x50>)
 8004e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e7a:	f000 fdcf 	bl	8005a1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f80e 	bl	8004ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e1      	bne.n	8004e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000b90 	.word	0x20000b90
 8004e98:	20000bbc 	.word	0x20000bbc
 8004e9c:	20000ba4 	.word	0x20000ba4

08004ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d108      	bne.n	8004ec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 ff68 	bl	8005d8c <vPortFree>
				vPortFree( pxTCB );
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 ff65 	bl	8005d8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ec2:	e019      	b.n	8004ef8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d103      	bne.n	8004ed6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 ff5c 	bl	8005d8c <vPortFree>
	}
 8004ed4:	e010      	b.n	8004ef8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d00b      	beq.n	8004ef8 <prvDeleteTCB+0x58>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e7fe      	b.n	8004ef6 <prvDeleteTCB+0x56>
	}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <prvResetNextTaskUnblockTime+0x38>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <prvResetNextTaskUnblockTime+0x3c>)
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f18:	e008      	b.n	8004f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <prvResetNextTaskUnblockTime+0x38>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <prvResetNextTaskUnblockTime+0x3c>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000b74 	.word	0x20000b74
 8004f3c:	20000bdc 	.word	0x20000bdc

08004f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <xTaskGetSchedulerState+0x34>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	e008      	b.n	8004f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f54:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <xTaskGetSchedulerState+0x38>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	e001      	b.n	8004f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f62:	2300      	movs	r3, #0
 8004f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f66:	687b      	ldr	r3, [r7, #4]
	}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	20000bc8 	.word	0x20000bc8
 8004f78:	20000be4 	.word	0x20000be4

08004f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d058      	beq.n	8005044 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <xTaskPriorityDisinherit+0xd4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d00b      	beq.n	8004fb4 <xTaskPriorityDisinherit+0x38>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	b672      	cpsid	i
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	b662      	cpsie	i
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e7fe      	b.n	8004fb2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <xTaskPriorityDisinherit+0x58>
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	b672      	cpsid	i
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	b662      	cpsie	i
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	e7fe      	b.n	8004fd2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d02c      	beq.n	8005044 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d128      	bne.n	8005044 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fbca 	bl	8003790 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <xTaskPriorityDisinherit+0xd8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d903      	bls.n	8005024 <xTaskPriorityDisinherit+0xa8>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <xTaskPriorityDisinherit+0xd8>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <xTaskPriorityDisinherit+0xdc>)
 8005032:	441a      	add	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fe fb4b 	bl	80036d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005044:	697b      	ldr	r3, [r7, #20]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200006e8 	.word	0x200006e8
 8005054:	20000bc4 	.word	0x20000bc4
 8005058:	200006ec 	.word	0x200006ec

0800505c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fb8c 	bl	8003790 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d10a      	bne.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4819      	ldr	r0, [pc, #100]	; (80050f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005090:	f7fe fb21 	bl	80036d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005094:	e026      	b.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d209      	bcs.n	80050c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe fb2f 	bl	800371e <vListInsert>
}
 80050c0:	e010      	b.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe fb25 	bl	800371e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d202      	bcs.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6013      	str	r3, [r2, #0]
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000bc0 	.word	0x20000bc0
 80050f0:	200006e8 	.word	0x200006e8
 80050f4:	20000ba8 	.word	0x20000ba8
 80050f8:	20000b78 	.word	0x20000b78
 80050fc:	20000b74 	.word	0x20000b74
 8005100:	20000bdc 	.word	0x20000bdc

08005104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800510e:	f000 fb0d 	bl	800572c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <xTimerCreateTimerTask+0x84>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d021      	beq.n	800515e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005122:	1d3a      	adds	r2, r7, #4
 8005124:	f107 0108 	add.w	r1, r7, #8
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fa8b 	bl	8003648 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	9202      	str	r2, [sp, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2302      	movs	r3, #2
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	460a      	mov	r2, r1
 8005144:	4911      	ldr	r1, [pc, #68]	; (800518c <xTimerCreateTimerTask+0x88>)
 8005146:	4812      	ldr	r0, [pc, #72]	; (8005190 <xTimerCreateTimerTask+0x8c>)
 8005148:	f7ff f908 	bl	800435c <xTaskCreateStatic>
 800514c:	4602      	mov	r2, r0
 800514e:	4b11      	ldr	r3, [pc, #68]	; (8005194 <xTimerCreateTimerTask+0x90>)
 8005150:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <xTimerCreateTimerTask+0x90>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800515a:	2301      	movs	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <xTimerCreateTimerTask+0x78>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	b672      	cpsid	i
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	b662      	cpsie	i
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	e7fe      	b.n	800517a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800517c:	697b      	ldr	r3, [r7, #20]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000c18 	.word	0x20000c18
 800518c:	080060e4 	.word	0x080060e4
 8005190:	080052d1 	.word	0x080052d1
 8005194:	20000c1c 	.word	0x20000c1c

08005198 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <xTimerGenericCommand+0x30>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	b672      	cpsid	i
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	b662      	cpsie	i
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	e7fe      	b.n	80051c6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <xTimerGenericCommand+0x98>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02a      	beq.n	8005226 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	dc18      	bgt.n	8005214 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051e2:	f7ff fead 	bl	8004f40 <xTaskGetSchedulerState>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d109      	bne.n	8005200 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <xTimerGenericCommand+0x98>)
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	f107 0110 	add.w	r1, r7, #16
 80051f4:	2300      	movs	r3, #0
 80051f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f8:	f7fe fc40 	bl	8003a7c <xQueueGenericSend>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24
 80051fe:	e012      	b.n	8005226 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <xTimerGenericCommand+0x98>)
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	f107 0110 	add.w	r1, r7, #16
 8005208:	2300      	movs	r3, #0
 800520a:	2200      	movs	r2, #0
 800520c:	f7fe fc36 	bl	8003a7c <xQueueGenericSend>
 8005210:	6278      	str	r0, [r7, #36]	; 0x24
 8005212:	e008      	b.n	8005226 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <xTimerGenericCommand+0x98>)
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	f107 0110 	add.w	r1, r7, #16
 800521c:	2300      	movs	r3, #0
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	f7fe fd2e 	bl	8003c80 <xQueueGenericSendFromISR>
 8005224:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	; 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000c18 	.word	0x20000c18

08005234 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523e:	4b23      	ldr	r3, [pc, #140]	; (80052cc <prvProcessExpiredTimer+0x98>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe fa9f 	bl	8003790 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d023      	beq.n	80052a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	18d1      	adds	r1, r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f000 f8d3 	bl	8005418 <prvInsertTimerInActiveList>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005278:	2300      	movs	r3, #0
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	2100      	movs	r1, #0
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f7ff ff88 	bl	8005198 <xTimerGenericCommand>
 8005288:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d114      	bne.n	80052ba <prvProcessExpiredTimer+0x86>
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	b672      	cpsid	i
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	b662      	cpsie	i
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e7fe      	b.n	80052a6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	4798      	blx	r3
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000c10 	.word	0x20000c10

080052d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052d8:	f107 0308 	add.w	r3, r7, #8
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f857 	bl	8005390 <prvGetNextExpireTime>
 80052e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4619      	mov	r1, r3
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f803 	bl	80052f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052ee:	f000 f8d5 	bl	800549c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052f2:	e7f1      	b.n	80052d8 <prvTimerTask+0x8>

080052f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052fe:	f7ff fa3b 	bl	8004778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f866 	bl	80053d8 <prvSampleTimeNow>
 800530c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d130      	bne.n	8005376 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <prvProcessTimerOrBlockTask+0x3c>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	d806      	bhi.n	8005330 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005322:	f7ff fa37 	bl	8004794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff83 	bl	8005234 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800532e:	e024      	b.n	800537a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <prvProcessTimerOrBlockTask+0x90>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <prvProcessTimerOrBlockTask+0x50>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <prvProcessTimerOrBlockTask+0x52>
 8005344:	2300      	movs	r3, #0
 8005346:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <prvProcessTimerOrBlockTask+0x94>)
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	4619      	mov	r1, r3
 8005356:	f7fe ffcd 	bl	80042f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800535a:	f7ff fa1b 	bl	8004794 <xTaskResumeAll>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005364:	4b09      	ldr	r3, [pc, #36]	; (800538c <prvProcessTimerOrBlockTask+0x98>)
 8005366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	f3bf 8f6f 	isb	sy
}
 8005374:	e001      	b.n	800537a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005376:	f7ff fa0d 	bl	8004794 <xTaskResumeAll>
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000c14 	.word	0x20000c14
 8005388:	20000c18 	.word	0x20000c18
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <prvGetNextExpireTime+0x44>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <prvGetNextExpireTime+0x16>
 80053a2:	2201      	movs	r2, #1
 80053a4:	e000      	b.n	80053a8 <prvGetNextExpireTime+0x18>
 80053a6:	2200      	movs	r2, #0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <prvGetNextExpireTime+0x44>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e001      	b.n	80053c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000c10 	.word	0x20000c10

080053d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053e0:	f7ff fa76 	bl	80048d0 <xTaskGetTickCount>
 80053e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <prvSampleTimeNow+0x3c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d205      	bcs.n	80053fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053f0:	f000 f936 	bl	8005660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e002      	b.n	8005402 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005402:	4a04      	ldr	r2, [pc, #16]	; (8005414 <prvSampleTimeNow+0x3c>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000c20 	.word	0x20000c20

08005418 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	429a      	cmp	r2, r3
 800543c:	d812      	bhi.n	8005464 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e01b      	b.n	800548a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <prvInsertTimerInActiveList+0x7c>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f7fe f95e 	bl	800371e <vListInsert>
 8005462:	e012      	b.n	800548a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d206      	bcs.n	800547a <prvInsertTimerInActiveList+0x62>
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e007      	b.n	800548a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <prvInsertTimerInActiveList+0x80>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7fe f94a 	bl	800371e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800548a:	697b      	ldr	r3, [r7, #20]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000c14 	.word	0x20000c14
 8005498:	20000c10 	.word	0x20000c10

0800549c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08e      	sub	sp, #56	; 0x38
 80054a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054a2:	e0cc      	b.n	800563e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da19      	bge.n	80054de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	3304      	adds	r3, #4
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <prvProcessReceivedCommands+0x32>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	b672      	cpsid	i
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	b662      	cpsie	i
 80054ca:	61fb      	str	r3, [r7, #28]
 80054cc:	e7fe      	b.n	80054cc <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d4:	6850      	ldr	r0, [r2, #4]
 80054d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d8:	6892      	ldr	r2, [r2, #8]
 80054da:	4611      	mov	r1, r2
 80054dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f2c0 80ab 	blt.w	800563c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	3304      	adds	r3, #4
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe f94a 	bl	8003790 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054fc:	463b      	mov	r3, r7
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff ff6a 	bl	80053d8 <prvSampleTimeNow>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b09      	cmp	r3, #9
 800550a:	f200 8098 	bhi.w	800563e <prvProcessReceivedCommands+0x1a2>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <prvProcessReceivedCommands+0x78>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	0800553d 	.word	0x0800553d
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800553d 	.word	0x0800553d
 8005520:	080055b3 	.word	0x080055b3
 8005524:	080055c7 	.word	0x080055c7
 8005528:	08005613 	.word	0x08005613
 800552c:	0800553d 	.word	0x0800553d
 8005530:	0800553d 	.word	0x0800553d
 8005534:	080055b3 	.word	0x080055b3
 8005538:	080055c7 	.word	0x080055c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	18d1      	adds	r1, r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	f7ff ff5c 	bl	8005418 <prvInsertTimerInActiveList>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d06b      	beq.n	800563e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d060      	beq.n	800563e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	441a      	add	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	2100      	movs	r1, #0
 800558c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558e:	f7ff fe03 	bl	8005198 <xTimerGenericCommand>
 8005592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d151      	bne.n	800563e <prvProcessReceivedCommands+0x1a2>
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	b672      	cpsid	i
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	b662      	cpsie	i
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e7fe      	b.n	80055b0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055c4:	e03b      	b.n	800563e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <prvProcessReceivedCommands+0x162>
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	b672      	cpsid	i
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	b662      	cpsie	i
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e7fe      	b.n	80055fc <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	18d1      	adds	r1, r2, r3
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560c:	f7ff ff04 	bl	8005418 <prvInsertTimerInActiveList>
					break;
 8005610:	e015      	b.n	800563e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005622:	f000 fbb3 	bl	8005d8c <vPortFree>
 8005626:	e00a      	b.n	800563e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	b2da      	uxtb	r2, r3
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800563a:	e000      	b.n	800563e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800563c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <prvProcessReceivedCommands+0x1c0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	1d39      	adds	r1, r7, #4
 8005644:	2200      	movs	r2, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fbb6 	bl	8003db8 <xQueueReceive>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	f47f af28 	bne.w	80054a4 <prvProcessReceivedCommands+0x8>
	}
}
 8005654:	bf00      	nop
 8005656:	3730      	adds	r7, #48	; 0x30
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000c18 	.word	0x20000c18

08005660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005666:	e049      	b.n	80056fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005668:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <prvSwitchTimerLists+0xc4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005672:	4b2c      	ldr	r3, [pc, #176]	; (8005724 <prvSwitchTimerLists+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe f885 	bl	8003790 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02f      	beq.n	80056fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90e      	bls.n	80056cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <prvSwitchTimerLists+0xc4>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fe f82a 	bl	800371e <vListInsert>
 80056ca:	e017      	b.n	80056fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	2100      	movs	r1, #0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fd5e 	bl	8005198 <xTimerGenericCommand>
 80056dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <prvSwitchTimerLists+0x9c>
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	b672      	cpsid	i
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	b662      	cpsie	i
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	e7fe      	b.n	80056fa <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <prvSwitchTimerLists+0xc4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1b0      	bne.n	8005668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <prvSwitchTimerLists+0xc4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <prvSwitchTimerLists+0xc8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <prvSwitchTimerLists+0xc4>)
 8005712:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <prvSwitchTimerLists+0xc8>)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6013      	str	r3, [r2, #0]
}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000c10 	.word	0x20000c10
 8005728:	20000c14 	.word	0x20000c14

0800572c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005732:	f000 f941 	bl	80059b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d120      	bne.n	8005780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800573e:	4814      	ldr	r0, [pc, #80]	; (8005790 <prvCheckForValidListAndQueue+0x64>)
 8005740:	f7fd ff9c 	bl	800367c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005744:	4813      	ldr	r0, [pc, #76]	; (8005794 <prvCheckForValidListAndQueue+0x68>)
 8005746:	f7fd ff99 	bl	800367c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <prvCheckForValidListAndQueue+0x6c>)
 800574c:	4a10      	ldr	r2, [pc, #64]	; (8005790 <prvCheckForValidListAndQueue+0x64>)
 800574e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005750:	4b12      	ldr	r3, [pc, #72]	; (800579c <prvCheckForValidListAndQueue+0x70>)
 8005752:	4a10      	ldr	r2, [pc, #64]	; (8005794 <prvCheckForValidListAndQueue+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005756:	2300      	movs	r3, #0
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <prvCheckForValidListAndQueue+0x74>)
 800575c:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <prvCheckForValidListAndQueue+0x78>)
 800575e:	2110      	movs	r1, #16
 8005760:	200a      	movs	r0, #10
 8005762:	f7fe f8a9 	bl	80038b8 <xQueueGenericCreateStatic>
 8005766:	4602      	mov	r2, r0
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 800576a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	490b      	ldr	r1, [pc, #44]	; (80057a8 <prvCheckForValidListAndQueue+0x7c>)
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fd92 	bl	80042a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005780:	f000 f94c 	bl	8005a1c <vPortExitCritical>
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000c18 	.word	0x20000c18
 8005790:	20000be8 	.word	0x20000be8
 8005794:	20000bfc 	.word	0x20000bfc
 8005798:	20000c10 	.word	0x20000c10
 800579c:	20000c14 	.word	0x20000c14
 80057a0:	20000cc4 	.word	0x20000cc4
 80057a4:	20000c24 	.word	0x20000c24
 80057a8:	080060ec 	.word	0x080060ec

080057ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3b04      	subs	r3, #4
 80057bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <pxPortInitialiseStack+0x64>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b14      	subs	r3, #20
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3b04      	subs	r3, #4
 80057f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f06f 0202 	mvn.w	r2, #2
 80057fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b20      	subs	r3, #32
 8005800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	08005815 	.word	0x08005815

08005814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <prvTaskExitError+0x58>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d00b      	beq.n	8005840 <prvTaskExitError+0x2c>
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	b672      	cpsid	i
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	b662      	cpsie	i
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e7fe      	b.n	800583e <prvTaskExitError+0x2a>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	b672      	cpsid	i
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	b662      	cpsie	i
 8005854:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005856:	bf00      	nop
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0fc      	beq.n	8005858 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005898:	4808      	ldr	r0, [pc, #32]	; (80058bc <prvPortStartFirstTask+0x24>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f380 8808 	msr	MSP, r0
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8814 	msr	CONTROL, r0
 80058aa:	b662      	cpsie	i
 80058ac:	b661      	cpsie	f
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	df00      	svc	0
 80058b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ba:	bf00      	nop
 80058bc:	e000ed08 	.word	0xe000ed08

080058c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058c6:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <xPortStartScheduler+0xe0>)
 80058c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <xPortStartScheduler+0xe4>)
 80058ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ee:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <xPortStartScheduler+0xe8>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f4:	e009      	b.n	800590a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80058f6:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <xPortStartScheduler+0xe8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <xPortStartScheduler+0xe8>)
 80058fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d0ef      	beq.n	80058f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005916:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <xPortStartScheduler+0xe8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	d00b      	beq.n	800593a <xPortStartScheduler+0x7a>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	b672      	cpsid	i
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	b662      	cpsie	i
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	e7fe      	b.n	8005938 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <xPortStartScheduler+0xe8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <xPortStartScheduler+0xe8>)
 8005942:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <xPortStartScheduler+0xe8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800594c:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <xPortStartScheduler+0xe8>)
 800594e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005958:	4b14      	ldr	r3, [pc, #80]	; (80059ac <xPortStartScheduler+0xec>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a13      	ldr	r2, [pc, #76]	; (80059ac <xPortStartScheduler+0xec>)
 800595e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005962:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <xPortStartScheduler+0xec>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a10      	ldr	r2, [pc, #64]	; (80059ac <xPortStartScheduler+0xec>)
 800596a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800596e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005970:	f000 f8d4 	bl	8005b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <xPortStartScheduler+0xf0>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800597a:	f000 f8f3 	bl	8005b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <xPortStartScheduler+0xf4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <xPortStartScheduler+0xf4>)
 8005984:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005988:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800598a:	f7ff ff85 	bl	8005898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800598e:	f7ff f869 	bl	8004a64 <vTaskSwitchContext>
	prvTaskExitError();
 8005992:	f7ff ff3f 	bl	8005814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	e000e400 	.word	0xe000e400
 80059a4:	20000d14 	.word	0x20000d14
 80059a8:	20000d18 	.word	0x20000d18
 80059ac:	e000ed20 	.word	0xe000ed20
 80059b0:	2000000c 	.word	0x2000000c
 80059b4:	e000ef34 	.word	0xe000ef34

080059b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	b672      	cpsid	i
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	b662      	cpsie	i
 80059d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <vPortEnterCritical+0x5c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a0e      	ldr	r2, [pc, #56]	; (8005a14 <vPortEnterCritical+0x5c>)
 80059dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <vPortEnterCritical+0x5c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d110      	bne.n	8005a08 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <vPortEnterCritical+0x60>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <vPortEnterCritical+0x50>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	b672      	cpsid	i
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	b662      	cpsie	i
 8005a04:	603b      	str	r3, [r7, #0]
 8005a06:	e7fe      	b.n	8005a06 <vPortEnterCritical+0x4e>
	}
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	2000000c 	.word	0x2000000c
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <vPortExitCritical+0x50>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <vPortExitCritical+0x26>
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	b672      	cpsid	i
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	b662      	cpsie	i
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	e7fe      	b.n	8005a40 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <vPortExitCritical+0x50>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <vPortExitCritical+0x50>)
 8005a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <vPortExitCritical+0x50>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <vPortExitCritical+0x42>
 8005a54:	2300      	movs	r3, #0
 8005a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a70:	f3ef 8009 	mrs	r0, PSP
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <pxCurrentTCBConst>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f01e 0f10 	tst.w	lr, #16
 8005a80:	bf08      	it	eq
 8005a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a94:	b672      	cpsid	i
 8005a96:	f380 8811 	msr	BASEPRI, r0
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	b662      	cpsie	i
 8005aa4:	f7fe ffde 	bl	8004a64 <vTaskSwitchContext>
 8005aa8:	f04f 0000 	mov.w	r0, #0
 8005aac:	f380 8811 	msr	BASEPRI, r0
 8005ab0:	bc09      	pop	{r0, r3}
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	6808      	ldr	r0, [r1, #0]
 8005ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	f01e 0f10 	tst.w	lr, #16
 8005abe:	bf08      	it	eq
 8005ac0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ac4:	f380 8809 	msr	PSP, r0
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop

08005ad0 <pxCurrentTCBConst>:
 8005ad0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	b672      	cpsid	i
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	b662      	cpsie	i
 8005af2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005af4:	f7fe fefc 	bl	80048f0 <xTaskIncrementTick>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <SysTick_Handler+0x40>)
 8005b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	2300      	movs	r3, #0
 8005b08:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <vPortSetupTimerInterrupt+0x34>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <vPortSetupTimerInterrupt+0x38>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <vPortSetupTimerInterrupt+0x3c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <vPortSetupTimerInterrupt+0x40>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	099b      	lsrs	r3, r3, #6
 8005b38:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <vPortSetupTimerInterrupt+0x44>)
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b3e:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <vPortSetupTimerInterrupt+0x34>)
 8005b40:	2207      	movs	r2, #7
 8005b42:	601a      	str	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	e000e010 	.word	0xe000e010
 8005b54:	e000e018 	.word	0xe000e018
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	10624dd3 	.word	0x10624dd3
 8005b60:	e000e014 	.word	0xe000e014

08005b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b74 <vPortEnableVFP+0x10>
 8005b68:	6801      	ldr	r1, [r0, #0]
 8005b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b6e:	6001      	str	r1, [r0, #0]
 8005b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b72:	bf00      	nop
 8005b74:	e000ed88 	.word	0xe000ed88

08005b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b7e:	f3ef 8305 	mrs	r3, IPSR
 8005b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d915      	bls.n	8005bb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b8a:	4a18      	ldr	r2, [pc, #96]	; (8005bec <vPortValidateInterruptPriority+0x74>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b94:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <vPortValidateInterruptPriority+0x78>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	7afa      	ldrb	r2, [r7, #11]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d20b      	bcs.n	8005bb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	b672      	cpsid	i
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	b662      	cpsie	i
 8005bb2:	607b      	str	r3, [r7, #4]
 8005bb4:	e7fe      	b.n	8005bb4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <vPortValidateInterruptPriority+0x7c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <vPortValidateInterruptPriority+0x80>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d90b      	bls.n	8005bde <vPortValidateInterruptPriority+0x66>
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	b672      	cpsid	i
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	b662      	cpsie	i
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	e7fe      	b.n	8005bdc <vPortValidateInterruptPriority+0x64>
	}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	e000e3f0 	.word	0xe000e3f0
 8005bf0:	20000d14 	.word	0x20000d14
 8005bf4:	e000ed0c 	.word	0xe000ed0c
 8005bf8:	20000d18 	.word	0x20000d18

08005bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c08:	f7fe fdb6 	bl	8004778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c0c:	4b5a      	ldr	r3, [pc, #360]	; (8005d78 <pvPortMalloc+0x17c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c14:	f000 f916 	bl	8005e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c18:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <pvPortMalloc+0x180>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 8090 	bne.w	8005d46 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01e      	beq.n	8005c6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d015      	beq.n	8005c6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f023 0307 	bic.w	r3, r3, #7
 8005c44:	3308      	adds	r3, #8
 8005c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <pvPortMalloc+0x6e>
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e7fe      	b.n	8005c68 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d06a      	beq.n	8005d46 <pvPortMalloc+0x14a>
 8005c70:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <pvPortMalloc+0x184>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d865      	bhi.n	8005d46 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c7a:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <pvPortMalloc+0x188>)
 8005c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c7e:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <pvPortMalloc+0x188>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c84:	e004      	b.n	8005c90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d903      	bls.n	8005ca2 <pvPortMalloc+0xa6>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f1      	bne.n	8005c86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ca2:	4b35      	ldr	r3, [pc, #212]	; (8005d78 <pvPortMalloc+0x17c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d04c      	beq.n	8005d46 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d920      	bls.n	8005d10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <pvPortMalloc+0xfc>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	b672      	cpsid	i
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	b662      	cpsie	i
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e7fe      	b.n	8005cf6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d0a:	69b8      	ldr	r0, [r7, #24]
 8005d0c:	f000 f8fc 	bl	8005f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <pvPortMalloc+0x184>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <pvPortMalloc+0x184>)
 8005d1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <pvPortMalloc+0x184>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <pvPortMalloc+0x18c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d203      	bcs.n	8005d32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <pvPortMalloc+0x184>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <pvPortMalloc+0x18c>)
 8005d30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <pvPortMalloc+0x180>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d46:	f7fe fd25 	bl	8004794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <pvPortMalloc+0x170>
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	b672      	cpsid	i
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	b662      	cpsie	i
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e7fe      	b.n	8005d6a <pvPortMalloc+0x16e>
	return pvReturn;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3728      	adds	r7, #40	; 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004924 	.word	0x20004924
 8005d7c:	20004930 	.word	0x20004930
 8005d80:	20004928 	.word	0x20004928
 8005d84:	2000491c 	.word	0x2000491c
 8005d88:	2000492c 	.word	0x2000492c

08005d8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d04a      	beq.n	8005e34 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d9e:	2308      	movs	r3, #8
 8005da0:	425b      	negs	r3, r3
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <vPortFree+0xb0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <vPortFree+0x46>
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	b672      	cpsid	i
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	b662      	cpsie	i
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e7fe      	b.n	8005dd0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <vPortFree+0x66>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	b672      	cpsid	i
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	b662      	cpsie	i
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	e7fe      	b.n	8005df0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <vPortFree+0xb0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d019      	beq.n	8005e34 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d115      	bne.n	8005e34 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <vPortFree+0xb0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	401a      	ands	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e18:	f7fe fcae 	bl	8004778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <vPortFree+0xb4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <vPortFree+0xb4>)
 8005e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e2a:	6938      	ldr	r0, [r7, #16]
 8005e2c:	f000 f86c 	bl	8005f08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e30:	f7fe fcb0 	bl	8004794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20004930 	.word	0x20004930
 8005e40:	20004928 	.word	0x20004928

08005e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <prvHeapInit+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3307      	adds	r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <prvHeapInit+0xac>)
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <prvHeapInit+0xb0>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <prvHeapInit+0xb0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e90:	2208      	movs	r2, #8
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <prvHeapInit+0xb4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvHeapInit+0xb4>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <prvHeapInit+0xb8>)
 8005ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <prvHeapInit+0xbc>)
 8005eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <prvHeapInit+0xc0>)
 8005ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000d1c 	.word	0x20000d1c
 8005ef4:	2000491c 	.word	0x2000491c
 8005ef8:	20004924 	.word	0x20004924
 8005efc:	2000492c 	.word	0x2000492c
 8005f00:	20004928 	.word	0x20004928
 8005f04:	20004930 	.word	0x20004930

08005f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f10:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <prvInsertBlockIntoFreeList+0xac>)
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e002      	b.n	8005f1c <prvInsertBlockIntoFreeList+0x14>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d8f7      	bhi.n	8005f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d108      	bne.n	8005f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	441a      	add	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d118      	bne.n	8005f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d00d      	beq.n	8005f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e008      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e003      	b.n	8005f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d002      	beq.n	8005fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	2000491c 	.word	0x2000491c
 8005fb8:	20004924 	.word	0x20004924

08005fbc <__libc_init_array>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4e0d      	ldr	r6, [pc, #52]	; (8005ff4 <__libc_init_array+0x38>)
 8005fc0:	4c0d      	ldr	r4, [pc, #52]	; (8005ff8 <__libc_init_array+0x3c>)
 8005fc2:	1ba4      	subs	r4, r4, r6
 8005fc4:	10a4      	asrs	r4, r4, #2
 8005fc6:	2500      	movs	r5, #0
 8005fc8:	42a5      	cmp	r5, r4
 8005fca:	d109      	bne.n	8005fe0 <__libc_init_array+0x24>
 8005fcc:	4e0b      	ldr	r6, [pc, #44]	; (8005ffc <__libc_init_array+0x40>)
 8005fce:	4c0c      	ldr	r4, [pc, #48]	; (8006000 <__libc_init_array+0x44>)
 8005fd0:	f000 f82c 	bl	800602c <_init>
 8005fd4:	1ba4      	subs	r4, r4, r6
 8005fd6:	10a4      	asrs	r4, r4, #2
 8005fd8:	2500      	movs	r5, #0
 8005fda:	42a5      	cmp	r5, r4
 8005fdc:	d105      	bne.n	8005fea <__libc_init_array+0x2e>
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fe4:	4798      	blx	r3
 8005fe6:	3501      	adds	r5, #1
 8005fe8:	e7ee      	b.n	8005fc8 <__libc_init_array+0xc>
 8005fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fee:	4798      	blx	r3
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	e7f2      	b.n	8005fda <__libc_init_array+0x1e>
 8005ff4:	08006198 	.word	0x08006198
 8005ff8:	08006198 	.word	0x08006198
 8005ffc:	08006198 	.word	0x08006198
 8006000:	0800619c 	.word	0x0800619c

08006004 <memcpy>:
 8006004:	b510      	push	{r4, lr}
 8006006:	1e43      	subs	r3, r0, #1
 8006008:	440a      	add	r2, r1
 800600a:	4291      	cmp	r1, r2
 800600c:	d100      	bne.n	8006010 <memcpy+0xc>
 800600e:	bd10      	pop	{r4, pc}
 8006010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006018:	e7f7      	b.n	800600a <memcpy+0x6>

0800601a <memset>:
 800601a:	4402      	add	r2, r0
 800601c:	4603      	mov	r3, r0
 800601e:	4293      	cmp	r3, r2
 8006020:	d100      	bne.n	8006024 <memset+0xa>
 8006022:	4770      	bx	lr
 8006024:	f803 1b01 	strb.w	r1, [r3], #1
 8006028:	e7f9      	b.n	800601e <memset+0x4>
	...

0800602c <_init>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr

08006038 <_fini>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr
