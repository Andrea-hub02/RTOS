
F767ZIV1_Gatekeeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005634  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005968  08005968  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005970  08005970  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000010  08005988  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040a4  08005988  000240a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ce2  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b4c  00000000  00000000  00034d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029079  00000000  00000000  00039a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbac  00000000  00000000  00062af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001014da  00000000  00000000  0007069d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171b77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  00171bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	0800581c 	.word	0x0800581c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	0800581c 	.word	0x0800581c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000002c 	.word	0x2000002c
 8000570:	20000080 	.word	0x20000080

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b09c      	sub	sp, #112	; 0x70
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb0a 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f86f 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f919 	bl	80007b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f8e7 	bl	8000758 <MX_USART3_UART_Init>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of usartQueue */

  osPoolDef(mpool, 16,  MSG_T);
 800058a:	4a2b      	ldr	r2, [pc, #172]	; (8000638 <main+0xc4>)
 800058c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000590:	ca07      	ldmia	r2, {r0, r1, r2}
 8000592:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  mpool = osPoolCreate(osPool(mpool));
 8000596:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fe9f 	bl	80032de <osPoolCreate>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <main+0xc8>)
 80005a4:	601a      	str	r2, [r3, #0]

  osMessageQDef(usartQueue, 16, MSG_T);
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <main+0xcc>)
 80005a8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usartQueueHandle = osMessageCreate(osMessageQ(usartQueue), NULL);
 80005b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 ff51 	bl	8003460 <osMessageCreate>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <main+0xd0>)
 80005c2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of writerOne */
  osThreadDef(writerOne, writerOneHook, osPriorityNormal, 0, 128);
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <main+0xd4>)
 80005c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  writerOneHandle = osThreadCreate(osThread(writerOne), (void *) 0);
 80005d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe31 	bl	8003246 <osThreadCreate>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <main+0xd8>)
 80005e8:	601a      	str	r2, [r3, #0]

  /* definition and creation of writerTwo */
  osThreadDef(writerTwo, writerTwoHook, osPriorityNormal, 0, 128);
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <main+0xdc>)
 80005ec:	f107 041c 	add.w	r4, r7, #28
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  writerTwoHandle = osThreadCreate(osThread(writerTwo), (void *) 1);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2101      	movs	r1, #1
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fe1e 	bl	8003246 <osThreadCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0xe0>)
 800060e:	601a      	str	r2, [r3, #0]

  /* definition and creation of gateKeeper */
  osThreadDef(gateKeeper, gateKeeperHook, osPriorityNormal, 0, 128);
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <main+0xe4>)
 8000612:	463c      	mov	r4, r7
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gateKeeperHandle = osThreadCreate(osThread(gateKeeper), NULL);
 8000622:	463b      	mov	r3, r7
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe0d 	bl	8003246 <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <main+0xe8>)
 8000630:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000632:	f002 fe01 	bl	8003238 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0xc2>
 8000638:	08005834 	.word	0x08005834
 800063c:	20004050 	.word	0x20004050
 8000640:	08005840 	.word	0x08005840
 8000644:	20004058 	.word	0x20004058
 8000648:	0800585c 	.word	0x0800585c
 800064c:	20004054 	.word	0x20004054
 8000650:	08005884 	.word	0x08005884
 8000654:	2000404c 	.word	0x2000404c
 8000658:	080058ac 	.word	0x080058ac
 800065c:	2000405c 	.word	0x2000405c

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0b8      	sub	sp, #224	; 0xe0
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800066a:	2234      	movs	r2, #52	; 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 f8cb 	bl	800580a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2290      	movs	r2, #144	; 0x90
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f005 f8bc 	bl	800580a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <SystemClock_Config+0xf0>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <SystemClock_Config+0xf0>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <SystemClock_Config+0xf0>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <SystemClock_Config+0xf4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b2:	4a28      	ldr	r2, [pc, #160]	; (8000754 <SystemClock_Config+0xf4>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <SystemClock_Config+0xf4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fd30 	bl	8001148 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ee:	f000 f92b 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000712:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f000 ffc3 	bl	80016a4 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000724:	f000 f910 	bl	8000948 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800072e:	2300      	movs	r3, #0
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f9dc 	bl	8001af4 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000742:	f000 f901 	bl	8000948 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	37e0      	adds	r7, #224	; 0xe0
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART3_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART3_UART_Init+0x58>)
 800079c:	f002 f836 	bl	800280c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f8cf 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20003fcc 	.word	0x20003fcc
 80007b4:	40004800 	.word	0x40004800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0x44>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <MX_GPIO_Init+0x44>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_GPIO_Init+0x44>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_GPIO_Init+0x44>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <MX_GPIO_Init+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_GPIO_Init+0x44>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <writerOneHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_writerOneHook */
void writerOneHook(void const * argument)
{
 8000800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	const TickType_t interval = 0x20;
 8000808:	2320      	movs	r3, #32
 800080a:	60fb      	str	r3, [r7, #12]
	//int index = (int) argument;

	for(;;)
	{
		/* Allocate memory for the message */
		 MSG_T *msg = osPoolAlloc(mpool);
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <writerOneHook+0x6c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fdc1 	bl	8003398 <osPoolAlloc>
 8000816:	60b8      	str	r0, [r7, #8]
		strcpy(msg->buffer, "Writer 1 : -----------------------------------\r\n");
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <writerOneHook+0x70>)
 800081c:	4614      	mov	r4, r2
 800081e:	469c      	mov	ip, r3
 8000820:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000824:	4665      	mov	r5, ip
 8000826:	4626      	mov	r6, r4
 8000828:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800082a:	6028      	str	r0, [r5, #0]
 800082c:	6069      	str	r1, [r5, #4]
 800082e:	60aa      	str	r2, [r5, #8]
 8000830:	60eb      	str	r3, [r5, #12]
 8000832:	3410      	adds	r4, #16
 8000834:	f10c 0c10 	add.w	ip, ip, #16
 8000838:	4574      	cmp	r4, lr
 800083a:	d1f3      	bne.n	8000824 <writerOneHook+0x24>
 800083c:	4663      	mov	r3, ip
 800083e:	4622      	mov	r2, r4
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	701a      	strb	r2, [r3, #0]
		msg->td       = 1;
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		msg->priority = 2;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	2202      	movs	r2, #2
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

		/* Place the message pointer in the message queue */
		osMessagePut(usartQueueHandle, (uint32_t) msg,  osWaitForever);
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <writerOneHook+0x74>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fe29 	bl	80034b4 <osMessagePut>

		/* Wait a random amount of time */
		//HAL_Delay(rand() % interval);
		HAL_Delay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f000 f9c1 	bl	8000bec <HAL_Delay>
	{
 800086a:	e7cf      	b.n	800080c <writerOneHook+0xc>
 800086c:	20004050 	.word	0x20004050
 8000870:	080058c8 	.word	0x080058c8
 8000874:	20004058 	.word	0x20004058

08000878 <writerTwoHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_writerTwoHook */
void writerTwoHook(void const * argument)
{
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	const TickType_t interval = 0x20;
 8000880:	2320      	movs	r3, #32
 8000882:	60fb      	str	r3, [r7, #12]
	// int index = (int) argument;

	for(;;)
	{
		/* Allocate memory for the message */
		 MSG_T *msg = osPoolAlloc(mpool);
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <writerTwoHook+0x6c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fd85 	bl	8003398 <osPoolAlloc>
 800088e:	60b8      	str	r0, [r7, #8]
		strcpy(msg->buffer, "Writer 2 : ooooooooooooooooooooooooooooooooooo\r\n");
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <writerTwoHook+0x70>)
 8000894:	4614      	mov	r4, r2
 8000896:	469c      	mov	ip, r3
 8000898:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800089c:	4665      	mov	r5, ip
 800089e:	4626      	mov	r6, r4
 80008a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008a2:	6028      	str	r0, [r5, #0]
 80008a4:	6069      	str	r1, [r5, #4]
 80008a6:	60aa      	str	r2, [r5, #8]
 80008a8:	60eb      	str	r3, [r5, #12]
 80008aa:	3410      	adds	r4, #16
 80008ac:	f10c 0c10 	add.w	ip, ip, #16
 80008b0:	4574      	cmp	r4, lr
 80008b2:	d1f3      	bne.n	800089c <writerTwoHook+0x24>
 80008b4:	4663      	mov	r3, ip
 80008b6:	4622      	mov	r2, r4
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	701a      	strb	r2, [r3, #0]
		msg->td       = 2;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2202      	movs	r2, #2
 80008c0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		msg->priority = 2;
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2202      	movs	r2, #2
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38

		/* Place the message pointer in the message queue */
		xQueueSendToBack(usartQueueHandle, (uint32_t) msg,  osWaitForever);
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <writerTwoHook+0x74>)
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	2300      	movs	r3, #0
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	f003 f89d 	bl	8003a14 <xQueueGenericSend>

		/* wait a random amount of time */
		//HAL_Delay(rand() % interval);
		HAL_Delay(2000);
 80008da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008de:	f000 f985 	bl	8000bec <HAL_Delay>
	{
 80008e2:	e7cf      	b.n	8000884 <writerTwoHook+0xc>
 80008e4:	20004050 	.word	0x20004050
 80008e8:	080058fc 	.word	0x080058fc
 80008ec:	20004058 	.word	0x20004058

080008f0 <gateKeeperHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gateKeeperHook */
void gateKeeperHook(void const * argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	 MSG_T* msg;
	osEvent  evt;

	for(;;)
	{
		evt = osMessageGet(usartQueueHandle,  osWaitForever);
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <gateKeeperHook+0x28>)
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	4618      	mov	r0, r3
 8000906:	f002 fe15 	bl	8003534 <osMessageGet>
			msg = evt.value.p;
			//HAL_UART_Transmit(&huart3, msg->buffer, 53, 100);
			 HAL_UART_Transmit(&huart3, "Hello from the board\n\r", 24, 100);
			osPoolFree(mpool, msg);
		}*/
		 HAL_UART_Transmit(&huart3, "Hello from the board\n\r", 24, 100);
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	2218      	movs	r2, #24
 800090e:	4903      	ldr	r1, [pc, #12]	; (800091c <gateKeeperHook+0x2c>)
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <gateKeeperHook+0x30>)
 8000912:	f001 ffc9 	bl	80028a8 <HAL_UART_Transmit>
		evt = osMessageGet(usartQueueHandle,  osWaitForever);
 8000916:	e7ef      	b.n	80008f8 <gateKeeperHook+0x8>
 8000918:	20004058 	.word	0x20004058
 800091c:	08005930 	.word	0x08005930
 8000920:	20003fcc 	.word	0x20003fcc

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 f939 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010000 	.word	0x40010000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094e:	e7fe      	b.n	800094e <Error_Handler+0x6>

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 fa07 	bl	8000da0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x7c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d128      	bne.n	8000a14 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_UART_MspInit+0x80>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a04:	2307      	movs	r3, #7
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_UART_MspInit+0x84>)
 8000a10:	f000 f9f0 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004800 	.word	0x40004800
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020c00 	.word	0x40020c00

08000a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	2019      	movs	r0, #25
 8000a3e:	f000 f9af 	bl	8000da0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 f9c8 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_InitTick+0x9c>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_InitTick+0x9c>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6453      	str	r3, [r2, #68]	; 0x44
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_InitTick+0x9c>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f810 	bl	8001a90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a70:	f000 fffa 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8000a74:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_InitTick+0xa0>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_InitTick+0xa4>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_InitTick+0xa8>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_InitTick+0xa4>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_InitTick+0xa4>)
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_InitTick+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_InitTick+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <HAL_InitTick+0xa4>)
 8000aa6:	f001 fc4b 	bl	8002340 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d104      	bne.n	8000aba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <HAL_InitTick+0xa4>)
 8000ab2:	f001 fc7b 	bl	80023ac <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	20004060 	.word	0x20004060
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f001 fc7b 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20004060 	.word	0x20004060

08000b14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <SystemInit+0x28>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <SystemInit+0x28>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SystemInit+0x28>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b46:	e003      	b.n	8000b50 <LoopCopyDataInit>

08000b48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b4e:	3104      	adds	r1, #4

08000b50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b58:	d3f6      	bcc.n	8000b48 <CopyDataInit>
  ldr  r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b5c:	e002      	b.n	8000b64 <LoopFillZerobss>

08000b5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b60:	f842 3b04 	str.w	r3, [r2], #4

08000b64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b68:	d3f9      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6a:	f7ff ffd3 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f004 fe1d 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fcff 	bl	8000574 <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000b7c:	08005978 	.word	0x08005978
  ldr  r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b84:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b88:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b8c:	200040a4 	.word	0x200040a4

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>

08000b92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f8f7 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff ff43 	bl	8000a28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ba2:	f7ff fed5 	bl	8000950 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200040a0 	.word	0x200040a0

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200040a0 	.word	0x200040a0

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_Delay+0x40>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <__NVIC_SetPriorityGrouping+0x40>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x40>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	05fa0000 	.word	0x05fa0000

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff4c 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db2:	f7ff ff61 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff ffb1 	bl	8000d24 <NVIC_EncodePriority>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff80 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff54 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e175      	b.n	8001100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8164 	bne.w	80010fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00b      	beq.n	8000e52 <HAL_GPIO_Init+0x5e>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d007      	beq.n	8000e52 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e46:	2b11      	cmp	r3, #17
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d130      	bne.n	8000eb4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x100>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b12      	cmp	r3, #18
 8000ef2:	d123      	bne.n	8000f3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0203 	and.w	r2, r3, #3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80be 	beq.w	80010fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b65      	ldr	r3, [pc, #404]	; (8001114 <HAL_GPIO_Init+0x320>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a64      	ldr	r2, [pc, #400]	; (8001114 <HAL_GPIO_Init+0x320>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <HAL_GPIO_Init+0x320>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	; (800111c <HAL_GPIO_Init+0x328>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d037      	beq.n	8001032 <HAL_GPIO_Init+0x23e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a56      	ldr	r2, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x32c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d031      	beq.n	800102e <HAL_GPIO_Init+0x23a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a55      	ldr	r2, [pc, #340]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x236>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <HAL_GPIO_Init+0x334>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x232>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a53      	ldr	r2, [pc, #332]	; (800112c <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x22e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x22a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x21a>
 800100a:	2309      	movs	r3, #9
 800100c:	e012      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800100e:	230a      	movs	r3, #10
 8001010:	e010      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001012:	2308      	movs	r3, #8
 8001014:	e00e      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001016:	2307      	movs	r3, #7
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101a:	2306      	movs	r3, #6
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001044:	4934      	ldr	r1, [pc, #208]	; (8001118 <HAL_GPIO_Init+0x324>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_GPIO_Init+0x350>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f4:	4a13      	ldr	r2, [pc, #76]	; (8001144 <HAL_GPIO_Init+0x350>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae86 	bls.w	8000e14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	3724      	adds	r7, #36	; 0x24
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40021400 	.word	0x40021400
 8001134:	40021800 	.word	0x40021800
 8001138:	40021c00 	.word	0x40021c00
 800113c:	40022000 	.word	0x40022000
 8001140:	40022400 	.word	0x40022400
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e29b      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8087 	beq.w	800127a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800116c:	4b96      	ldr	r3, [pc, #600]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b04      	cmp	r3, #4
 8001176:	d00c      	beq.n	8001192 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001178:	4b93      	ldr	r3, [pc, #588]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d112      	bne.n	80011aa <HAL_RCC_OscConfig+0x62>
 8001184:	4b90      	ldr	r3, [pc, #576]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001190:	d10b      	bne.n	80011aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001192:	4b8d      	ldr	r3, [pc, #564]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d06c      	beq.n	8001278 <HAL_RCC_OscConfig+0x130>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d168      	bne.n	8001278 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e275      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x7a>
 80011b4:	4b84      	ldr	r3, [pc, #528]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a83      	ldr	r2, [pc, #524]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e02e      	b.n	8001220 <HAL_RCC_OscConfig+0xd8>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x9c>
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7e      	ldr	r2, [pc, #504]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7b      	ldr	r2, [pc, #492]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xd8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0xc0>
 80011ee:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a75      	ldr	r2, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xd8>
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a6b      	ldr	r2, [pc, #428]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fcd4 	bl	8000bd4 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcd0 	bl	8000bd4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e229      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xe8>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fcc0 	bl	8000bd4 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcbc 	bl	8000bd4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e215      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x110>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d069      	beq.n	800135a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001286:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x190>
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1e9      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	493d      	ldr	r1, [pc, #244]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e040      	b.n	800135a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc72 	bl	8000bd4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc6e 	bl	8000bd4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1c7      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4929      	ldr	r1, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
 8001326:	e018      	b.n	800135a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc4e 	bl	8000bd4 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fc4a 	bl	8000bd4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1a3      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d038      	beq.n	80013d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d019      	beq.n	80013a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137a:	f7ff fc2b 	bl	8000bd4 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001382:	f7ff fc27 	bl	8000bd4 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e180      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 8001396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x23a>
 80013a0:	e01a      	b.n	80013d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80013a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ae:	f7ff fc11 	bl	8000bd4 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc0d 	bl	8000bd4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d903      	bls.n	80013cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e166      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
 80013c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	4b92      	ldr	r3, [pc, #584]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ee      	bne.n	80013b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a4 	beq.w	800152e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a88      	ldr	r2, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b86      	ldr	r3, [pc, #536]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140a:	2301      	movs	r3, #1
 800140c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <HAL_RCC_OscConfig+0x4d4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d118      	bne.n	800144c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800141a:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x4d4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7f      	ldr	r2, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x4d4>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001426:	f7ff fbd5 	bl	8000bd4 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff fbd1 	bl	8000bd4 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b64      	cmp	r3, #100	; 0x64
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e12a      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001440:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x4d4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x31a>
 8001454:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6713      	str	r3, [r2, #112]	; 0x70
 8001460:	e02d      	b.n	80014be <HAL_RCC_OscConfig+0x376>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x33c>
 800146a:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a67      	ldr	r2, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	e01c      	b.n	80014be <HAL_RCC_OscConfig+0x376>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d10c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x35e>
 800148c:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a61      	ldr	r2, [pc, #388]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a5e      	ldr	r2, [pc, #376]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	e00b      	b.n	80014be <HAL_RCC_OscConfig+0x376>
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	f023 0304 	bic.w	r3, r3, #4
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d015      	beq.n	80014f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb85 	bl	8000bd4 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fb81 	bl	8000bd4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0d8      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0ee      	beq.n	80014ce <HAL_RCC_OscConfig+0x386>
 80014f0:	e014      	b.n	800151c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff fb6f 	bl	8000bd4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff fb6b 	bl	8000bd4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0c2      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001510:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ee      	bne.n	80014fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d105      	bne.n	800152e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80ae 	beq.w	8001694 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001538:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d06d      	beq.n	8001620 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d14b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a31      	ldr	r2, [pc, #196]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb3c 	bl	8000bd4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fb38 	bl	8000bd4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e091      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	061b      	lsls	r3, r3, #24
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	071b      	lsls	r3, r3, #28
 80015aa:	491b      	ldr	r1, [pc, #108]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb0a 	bl	8000bd4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fb06 	bl	8000bd4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e05f      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x47c>
 80015e2:	e057      	b.n	8001694 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 80015ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff faf0 	bl	8000bd4 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff faec 	bl	8000bd4 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e045      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_RCC_OscConfig+0x4d0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4b0>
 8001616:	e03d      	b.n	8001694 <HAL_RCC_OscConfig+0x54c>
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <HAL_RCC_OscConfig+0x558>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d030      	beq.n	8001690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d129      	bne.n	8001690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d122      	bne.n	8001690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001650:	4013      	ands	r3, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001656:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001658:	4293      	cmp	r3, r2
 800165a:	d119      	bne.n	8001690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d10f      	bne.n	8001690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0d0      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d910      	bls.n	80016ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b67      	ldr	r3, [pc, #412]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 020f 	bic.w	r2, r3, #15
 80016d2:	4965      	ldr	r1, [pc, #404]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b8      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 800170a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	494d      	ldr	r1, [pc, #308]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d040      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d115      	bne.n	8001786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e073      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06b      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4936      	ldr	r1, [pc, #216]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001798:	f7ff fa1c 	bl	8000bd4 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fa18 	bl	8000bd4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e053      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d210      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 020f 	bic.w	r2, r3, #15
 80017de:	4922      	ldr	r1, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e032      	b.n	800185e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001836:	f000 f821 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800183a:	4601      	mov	r1, r0
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1cc>)
 8001848:	5cd3      	ldrb	r3, [r2, r3]
 800184a:	fa21 f303 	lsr.w	r3, r1, r3
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1d0>)
 8001850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1d4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f8e6 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00
 800186c:	40023800 	.word	0x40023800
 8001870:	08005950 	.word	0x08005950
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d007      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x32>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d008      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x38>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80b4 	bne.w	8001a10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018aa:	60bb      	str	r3, [r7, #8]
      break;
 80018ac:	e0b3      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018b0:	60bb      	str	r3, [r7, #8]
      break;
 80018b2:	e0b0      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b5a      	ldr	r3, [pc, #360]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d04a      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	ea03 0501 	and.w	r5, r3, r1
 80018e0:	ea04 0602 	and.w	r6, r4, r2
 80018e4:	4629      	mov	r1, r5
 80018e6:	4632      	mov	r2, r6
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	f04f 0400 	mov.w	r4, #0
 80018f0:	0154      	lsls	r4, r2, #5
 80018f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018f6:	014b      	lsls	r3, r1, #5
 80018f8:	4619      	mov	r1, r3
 80018fa:	4622      	mov	r2, r4
 80018fc:	1b49      	subs	r1, r1, r5
 80018fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	0194      	lsls	r4, r2, #6
 800190c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001910:	018b      	lsls	r3, r1, #6
 8001912:	1a5b      	subs	r3, r3, r1
 8001914:	eb64 0402 	sbc.w	r4, r4, r2
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	00e2      	lsls	r2, r4, #3
 8001922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001926:	00d9      	lsls	r1, r3, #3
 8001928:	460b      	mov	r3, r1
 800192a:	4614      	mov	r4, r2
 800192c:	195b      	adds	r3, r3, r5
 800192e:	eb44 0406 	adc.w	r4, r4, r6
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	02a2      	lsls	r2, r4, #10
 800193c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001940:	0299      	lsls	r1, r3, #10
 8001942:	460b      	mov	r3, r1
 8001944:	4614      	mov	r4, r2
 8001946:	4618      	mov	r0, r3
 8001948:	4621      	mov	r1, r4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f04f 0400 	mov.w	r4, #0
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	f7fe fc74 	bl	8000240 <__aeabi_uldivmod>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e049      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	ea03 0501 	and.w	r5, r3, r1
 8001976:	ea04 0602 	and.w	r6, r4, r2
 800197a:	4629      	mov	r1, r5
 800197c:	4632      	mov	r2, r6
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	0154      	lsls	r4, r2, #5
 8001988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800198c:	014b      	lsls	r3, r1, #5
 800198e:	4619      	mov	r1, r3
 8001990:	4622      	mov	r2, r4
 8001992:	1b49      	subs	r1, r1, r5
 8001994:	eb62 0206 	sbc.w	r2, r2, r6
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f04f 0400 	mov.w	r4, #0
 80019a0:	0194      	lsls	r4, r2, #6
 80019a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	1a5b      	subs	r3, r3, r1
 80019aa:	eb64 0402 	sbc.w	r4, r4, r2
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	00e2      	lsls	r2, r4, #3
 80019b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019bc:	00d9      	lsls	r1, r3, #3
 80019be:	460b      	mov	r3, r1
 80019c0:	4614      	mov	r4, r2
 80019c2:	195b      	adds	r3, r3, r5
 80019c4:	eb44 0406 	adc.w	r4, r4, r6
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	02a2      	lsls	r2, r4, #10
 80019d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019d6:	0299      	lsls	r1, r3, #10
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	4621      	mov	r1, r4
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4623      	mov	r3, r4
 80019ea:	f7fe fc29 	bl	8000240 <__aeabi_uldivmod>
 80019ee:	4603      	mov	r3, r0
 80019f0:	460c      	mov	r4, r1
 80019f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	60bb      	str	r3, [r7, #8]
      break;
 8001a0e:	e002      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a12:	60bb      	str	r3, [r7, #8]
      break;
 8001a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a16:	68bb      	ldr	r3, [r7, #8]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400

08001a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08005960 	.word	0x08005960

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffdc 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0b5b      	lsrs	r3, r3, #13
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08005960 	.word	0x08005960

08001a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_RCC_GetClockConfig+0x60>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d012      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b1c:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a68      	ldr	r2, [pc, #416]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b26:	6093      	str	r3, [r2, #8]
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	4964      	ldr	r1, [pc, #400]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d017      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	4959      	ldr	r1, [pc, #356]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d017      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	494a      	ldr	r1, [pc, #296]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba8:	d101      	bne.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 808b 	beq.w	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a34      	ldr	r2, [pc, #208]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bfc:	f7fe ffea 	bl	8000bd4 <HAL_GetTick>
 8001c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7fe ffe6 	bl	8000bd4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e38d      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d035      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d02e      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d114      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe ffae 	bl	8000bd4 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7fe ffaa 	bl	8000bd4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e34f      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ee      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001caa:	d111      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cba:	400b      	ands	r3, r1
 8001cbc:	4901      	ldr	r1, [pc, #4]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	0ffffcff 	.word	0x0ffffcff
 8001cd0:	4bb3      	ldr	r3, [pc, #716]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4ab2      	ldr	r2, [pc, #712]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cda:	6093      	str	r3, [r2, #8]
 8001cdc:	4bb0      	ldr	r3, [pc, #704]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	49ad      	ldr	r1, [pc, #692]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cfa:	4ba9      	ldr	r3, [pc, #676]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d00:	4aa7      	ldr	r2, [pc, #668]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d0a:	4ba5      	ldr	r3, [pc, #660]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	49a2      	ldr	r1, [pc, #648]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00a      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d28:	4b9d      	ldr	r3, [pc, #628]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d36:	499a      	ldr	r1, [pc, #616]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d4a:	4b95      	ldr	r3, [pc, #596]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d58:	4991      	ldr	r1, [pc, #580]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d6c:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7a:	4989      	ldr	r1, [pc, #548]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4980      	ldr	r1, [pc, #512]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db0:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	f023 0203 	bic.w	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4978      	ldr	r1, [pc, #480]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	f023 020c 	bic.w	r2, r3, #12
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	496f      	ldr	r1, [pc, #444]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4967      	ldr	r1, [pc, #412]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e16:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e24:	495e      	ldr	r1, [pc, #376]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e38:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	4956      	ldr	r1, [pc, #344]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e5a:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	4945      	ldr	r1, [pc, #276]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e9e:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eac:	493c      	ldr	r1, [pc, #240]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ec0:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ece:	4934      	ldr	r1, [pc, #208]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d011      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ef0:	492b      	ldr	r1, [pc, #172]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f00:	d101      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	491b      	ldr	r1, [pc, #108]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f54:	4912      	ldr	r1, [pc, #72]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00b      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f78:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00f      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	e002      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	4985      	ldr	r1, [pc, #532]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc8:	497c      	ldr	r1, [pc, #496]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fde:	f040 80d6 	bne.w	800218e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fe8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fee:	f7fe fdf1 	bl	8000bd4 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ff6:	f7fe fded 	bl	8000bd4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e194      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d021      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	2b00      	cmp	r3, #0
 8002026:	d11d      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800203c:	0e1b      	lsrs	r3, r3, #24
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	019a      	lsls	r2, r3, #6
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	061b      	lsls	r3, r3, #24
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	071b      	lsls	r3, r3, #28
 800205c:	4957      	ldr	r1, [pc, #348]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002082:	2b00      	cmp	r3, #0
 8002084:	d02e      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208e:	d129      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a4:	0f1b      	lsrs	r3, r3, #28
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	019a      	lsls	r2, r3, #6
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	071b      	lsls	r3, r3, #28
 80020c4:	493d      	ldr	r1, [pc, #244]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d2:	f023 021f 	bic.w	r2, r3, #31
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01d      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f6:	0e1b      	lsrs	r3, r3, #24
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002104:	0f1b      	lsrs	r3, r3, #28
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	019a      	lsls	r2, r3, #6
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	431a      	orrs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	071b      	lsls	r3, r3, #28
 8002124:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d011      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	019a      	lsls	r2, r3, #6
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	061b      	lsls	r3, r3, #24
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	071b      	lsls	r3, r3, #28
 8002154:	4919      	ldr	r1, [pc, #100]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002168:	f7fe fd34 	bl	8000bd4 <HAL_GetTick>
 800216c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002170:	f7fe fd30 	bl	8000bd4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0d7      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	f040 80cd 	bne.w	8002330 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a2:	f7fe fd17 	bl	8000bd4 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021aa:	f7fe fd13 	bl	8000bd4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b64      	cmp	r3, #100	; 0x64
 80021b6:	d903      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0ba      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80021bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021cc:	d0ed      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02e      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12a      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002204:	4b4d      	ldr	r3, [pc, #308]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	0f1b      	lsrs	r3, r3, #28
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	019a      	lsls	r2, r3, #6
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	061b      	lsls	r3, r3, #24
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	071b      	lsls	r3, r3, #28
 800222a:	4944      	ldr	r1, [pc, #272]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002232:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002238:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	493d      	ldr	r1, [pc, #244]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d022      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800225c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002260:	d11d      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	0f1b      	lsrs	r3, r3, #28
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	019a      	lsls	r2, r3, #6
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	071b      	lsls	r3, r3, #28
 8002296:	4929      	ldr	r1, [pc, #164]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d028      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	0e1b      	lsrs	r3, r3, #24
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	019a      	lsls	r2, r3, #6
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	4917      	ldr	r1, [pc, #92]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	4911      	ldr	r1, [pc, #68]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002308:	f7fe fc64 	bl	8000bd4 <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002310:	f7fe fc60 	bl	8000bd4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e007      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800232a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800232e:	d1ef      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e01d      	b.n	800238e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f815 	bl	8002396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f000 f986 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_TIM_Base_Start_IT+0x50>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d00b      	beq.n	80023ee <HAL_TIM_Base_Start_IT+0x42>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d007      	beq.n	80023ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	00010007 	.word	0x00010007

08002400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0202 	mvn.w	r2, #2
 800242c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f905 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8f7 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f908 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0204 	mvn.w	r2, #4
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8db 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8cd 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8de 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0208 	mvn.w	r2, #8
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8b1 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8a3 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8b4 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0210 	mvn.w	r2, #16
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2208      	movs	r2, #8
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f887 	bl	8002652 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f879 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f88a 	bl	8002666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0201 	mvn.w	r2, #1
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe f9d0 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f91a 	bl	80027e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d10e      	bne.n	80025de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b80      	cmp	r3, #128	; 0x80
 80025cc:	d107      	bne.n	80025de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f90d 	bl	80027f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d10e      	bne.n	800260a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d107      	bne.n	800260a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f838 	bl	800267a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b20      	cmp	r3, #32
 8002616:	d10e      	bne.n	8002636 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b20      	cmp	r3, #32
 8002624:	d107      	bne.n	8002636 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0220 	mvn.w	r2, #32
 800262e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8cd 	bl	80027d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a40      	ldr	r2, [pc, #256]	; (80027a4 <TIM_Base_SetConfig+0x114>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <TIM_Base_SetConfig+0x40>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d00f      	beq.n	80026d0 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3d      	ldr	r2, [pc, #244]	; (80027a8 <TIM_Base_SetConfig+0x118>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <TIM_Base_SetConfig+0x11c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3b      	ldr	r2, [pc, #236]	; (80027b0 <TIM_Base_SetConfig+0x120>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <TIM_Base_SetConfig+0x124>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d108      	bne.n	80026e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <TIM_Base_SetConfig+0x114>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02b      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d027      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <TIM_Base_SetConfig+0x118>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d023      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <TIM_Base_SetConfig+0x11c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <TIM_Base_SetConfig+0x120>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01b      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <TIM_Base_SetConfig+0x124>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d017      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <TIM_Base_SetConfig+0x128>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <TIM_Base_SetConfig+0x12c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00f      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <TIM_Base_SetConfig+0x130>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00b      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <TIM_Base_SetConfig+0x134>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <TIM_Base_SetConfig+0x138>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <TIM_Base_SetConfig+0x13c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d108      	bne.n	8002754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <TIM_Base_SetConfig+0x114>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d003      	beq.n	8002788 <TIM_Base_SetConfig+0xf8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <TIM_Base_SetConfig+0x124>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d103      	bne.n	8002790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	615a      	str	r2, [r3, #20]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800
 80027b0:	40000c00 	.word	0x40000c00
 80027b4:	40010400 	.word	0x40010400
 80027b8:	40014000 	.word	0x40014000
 80027bc:	40014400 	.word	0x40014400
 80027c0:	40014800 	.word	0x40014800
 80027c4:	40001800 	.word	0x40001800
 80027c8:	40001c00 	.word	0x40001c00
 80027cc:	40002000 	.word	0x40002000

080027d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e040      	b.n	80028a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe f8b6 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	; 0x24
 8002838:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8be 	bl	80029cc <UART_SetConfig>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e022      	b.n	80028a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fb5c 	bl	8002f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fbe3 	bl	8003064 <UART_CheckIdleState>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d17f      	bne.n	80029c0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_Transmit+0x24>
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e078      	b.n	80029c2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Transmit+0x36>
 80028da:	2302      	movs	r3, #2
 80028dc:	e071      	b.n	80029c2 <HAL_UART_Transmit+0x11a>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2221      	movs	r2, #33	; 0x21
 80028f0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028f2:	f7fe f96f 	bl	8000bd4 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d108      	bne.n	8002924 <HAL_UART_Transmit+0x7c>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d104      	bne.n	8002924 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	e003      	b.n	800292c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002934:	e02c      	b.n	8002990 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fbd4 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e038      	b.n	80029c2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	3302      	adds	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e007      	b.n	800297e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	3301      	adds	r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1cc      	bne.n	8002936 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2140      	movs	r1, #64	; 0x40
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fba1 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e005      	b.n	80029c2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4bb1      	ldr	r3, [pc, #708]	; (8002cc0 <UART_SetConfig+0x2f4>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	6939      	ldr	r1, [r7, #16]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a9f      	ldr	r2, [pc, #636]	; (8002cc4 <UART_SetConfig+0x2f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d121      	bne.n	8002a90 <UART_SetConfig+0xc4>
 8002a4c:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d816      	bhi.n	8002a88 <UART_SetConfig+0xbc>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <UART_SetConfig+0x94>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a7d 	.word	0x08002a7d
 8002a68:	08002a77 	.word	0x08002a77
 8002a6c:	08002a83 	.word	0x08002a83
 8002a70:	2301      	movs	r3, #1
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e151      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	77fb      	strb	r3, [r7, #31]
 8002a7a:	e14e      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	77fb      	strb	r3, [r7, #31]
 8002a80:	e14b      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002a82:	2308      	movs	r3, #8
 8002a84:	77fb      	strb	r3, [r7, #31]
 8002a86:	e148      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002a88:	2310      	movs	r3, #16
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	bf00      	nop
 8002a8e:	e144      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a8d      	ldr	r2, [pc, #564]	; (8002ccc <UART_SetConfig+0x300>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d134      	bne.n	8002b04 <UART_SetConfig+0x138>
 8002a9a:	4b8b      	ldr	r3, [pc, #556]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d829      	bhi.n	8002afc <UART_SetConfig+0x130>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <UART_SetConfig+0xe4>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ae5 	.word	0x08002ae5
 8002ab4:	08002afd 	.word	0x08002afd
 8002ab8:	08002afd 	.word	0x08002afd
 8002abc:	08002afd 	.word	0x08002afd
 8002ac0:	08002af1 	.word	0x08002af1
 8002ac4:	08002afd 	.word	0x08002afd
 8002ac8:	08002afd 	.word	0x08002afd
 8002acc:	08002afd 	.word	0x08002afd
 8002ad0:	08002aeb 	.word	0x08002aeb
 8002ad4:	08002afd 	.word	0x08002afd
 8002ad8:	08002afd 	.word	0x08002afd
 8002adc:	08002afd 	.word	0x08002afd
 8002ae0:	08002af7 	.word	0x08002af7
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e117      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e114      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002af0:	2304      	movs	r3, #4
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	e111      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002af6:	2308      	movs	r3, #8
 8002af8:	77fb      	strb	r3, [r7, #31]
 8002afa:	e10e      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002afc:	2310      	movs	r3, #16
 8002afe:	77fb      	strb	r3, [r7, #31]
 8002b00:	bf00      	nop
 8002b02:	e10a      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a71      	ldr	r2, [pc, #452]	; (8002cd0 <UART_SetConfig+0x304>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d120      	bne.n	8002b50 <UART_SetConfig+0x184>
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d00f      	beq.n	8002b3c <UART_SetConfig+0x170>
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d802      	bhi.n	8002b26 <UART_SetConfig+0x15a>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <UART_SetConfig+0x164>
 8002b24:	e010      	b.n	8002b48 <UART_SetConfig+0x17c>
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d005      	beq.n	8002b36 <UART_SetConfig+0x16a>
 8002b2a:	2b30      	cmp	r3, #48	; 0x30
 8002b2c:	d009      	beq.n	8002b42 <UART_SetConfig+0x176>
 8002b2e:	e00b      	b.n	8002b48 <UART_SetConfig+0x17c>
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e0f1      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	77fb      	strb	r3, [r7, #31]
 8002b3a:	e0ee      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	77fb      	strb	r3, [r7, #31]
 8002b40:	e0eb      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b42:	2308      	movs	r3, #8
 8002b44:	77fb      	strb	r3, [r7, #31]
 8002b46:	e0e8      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b48:	2310      	movs	r3, #16
 8002b4a:	77fb      	strb	r3, [r7, #31]
 8002b4c:	bf00      	nop
 8002b4e:	e0e4      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5f      	ldr	r2, [pc, #380]	; (8002cd4 <UART_SetConfig+0x308>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d120      	bne.n	8002b9c <UART_SetConfig+0x1d0>
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d00f      	beq.n	8002b88 <UART_SetConfig+0x1bc>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d802      	bhi.n	8002b72 <UART_SetConfig+0x1a6>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <UART_SetConfig+0x1b0>
 8002b70:	e010      	b.n	8002b94 <UART_SetConfig+0x1c8>
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d005      	beq.n	8002b82 <UART_SetConfig+0x1b6>
 8002b76:	2bc0      	cmp	r3, #192	; 0xc0
 8002b78:	d009      	beq.n	8002b8e <UART_SetConfig+0x1c2>
 8002b7a:	e00b      	b.n	8002b94 <UART_SetConfig+0x1c8>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e0cb      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b82:	2302      	movs	r3, #2
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e0c8      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	77fb      	strb	r3, [r7, #31]
 8002b8c:	e0c5      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	77fb      	strb	r3, [r7, #31]
 8002b92:	e0c2      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b94:	2310      	movs	r3, #16
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	bf00      	nop
 8002b9a:	e0be      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <UART_SetConfig+0x30c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d124      	bne.n	8002bf0 <UART_SetConfig+0x224>
 8002ba6:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	d012      	beq.n	8002bdc <UART_SetConfig+0x210>
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d802      	bhi.n	8002bc2 <UART_SetConfig+0x1f6>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <UART_SetConfig+0x204>
 8002bc0:	e012      	b.n	8002be8 <UART_SetConfig+0x21c>
 8002bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc6:	d006      	beq.n	8002bd6 <UART_SetConfig+0x20a>
 8002bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bcc:	d009      	beq.n	8002be2 <UART_SetConfig+0x216>
 8002bce:	e00b      	b.n	8002be8 <UART_SetConfig+0x21c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e0a1      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e09e      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e09b      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002be2:	2308      	movs	r3, #8
 8002be4:	77fb      	strb	r3, [r7, #31]
 8002be6:	e098      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002be8:	2310      	movs	r3, #16
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	bf00      	nop
 8002bee:	e094      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a39      	ldr	r2, [pc, #228]	; (8002cdc <UART_SetConfig+0x310>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d124      	bne.n	8002c44 <UART_SetConfig+0x278>
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c08:	d012      	beq.n	8002c30 <UART_SetConfig+0x264>
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d802      	bhi.n	8002c16 <UART_SetConfig+0x24a>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <UART_SetConfig+0x258>
 8002c14:	e012      	b.n	8002c3c <UART_SetConfig+0x270>
 8002c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1a:	d006      	beq.n	8002c2a <UART_SetConfig+0x25e>
 8002c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c20:	d009      	beq.n	8002c36 <UART_SetConfig+0x26a>
 8002c22:	e00b      	b.n	8002c3c <UART_SetConfig+0x270>
 8002c24:	2301      	movs	r3, #1
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e077      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e074      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c30:	2304      	movs	r3, #4
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	e071      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c36:	2308      	movs	r3, #8
 8002c38:	77fb      	strb	r3, [r7, #31]
 8002c3a:	e06e      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	77fb      	strb	r3, [r7, #31]
 8002c40:	bf00      	nop
 8002c42:	e06a      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <UART_SetConfig+0x314>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d124      	bne.n	8002c98 <UART_SetConfig+0x2cc>
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d012      	beq.n	8002c84 <UART_SetConfig+0x2b8>
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	d802      	bhi.n	8002c6a <UART_SetConfig+0x29e>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <UART_SetConfig+0x2ac>
 8002c68:	e012      	b.n	8002c90 <UART_SetConfig+0x2c4>
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6e:	d006      	beq.n	8002c7e <UART_SetConfig+0x2b2>
 8002c70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c74:	d009      	beq.n	8002c8a <UART_SetConfig+0x2be>
 8002c76:	e00b      	b.n	8002c90 <UART_SetConfig+0x2c4>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e04d      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e04a      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c84:	2304      	movs	r3, #4
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e047      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	77fb      	strb	r3, [r7, #31]
 8002c8e:	e044      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c90:	2310      	movs	r3, #16
 8002c92:	77fb      	strb	r3, [r7, #31]
 8002c94:	bf00      	nop
 8002c96:	e040      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <UART_SetConfig+0x318>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d139      	bne.n	8002d16 <UART_SetConfig+0x34a>
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <UART_SetConfig+0x2fc>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb0:	d027      	beq.n	8002d02 <UART_SetConfig+0x336>
 8002cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb6:	d817      	bhi.n	8002ce8 <UART_SetConfig+0x31c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <UART_SetConfig+0x32a>
 8002cbc:	e027      	b.n	8002d0e <UART_SetConfig+0x342>
 8002cbe:	bf00      	nop
 8002cc0:	efff69f3 	.word	0xefff69f3
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40004400 	.word	0x40004400
 8002cd0:	40004800 	.word	0x40004800
 8002cd4:	40004c00 	.word	0x40004c00
 8002cd8:	40005000 	.word	0x40005000
 8002cdc:	40011400 	.word	0x40011400
 8002ce0:	40007800 	.word	0x40007800
 8002ce4:	40007c00 	.word	0x40007c00
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	d006      	beq.n	8002cfc <UART_SetConfig+0x330>
 8002cee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cf2:	d009      	beq.n	8002d08 <UART_SetConfig+0x33c>
 8002cf4:	e00b      	b.n	8002d0e <UART_SetConfig+0x342>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e00e      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e00b      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002d02:	2304      	movs	r3, #4
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e008      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002d08:	2308      	movs	r3, #8
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e005      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002d0e:	2310      	movs	r3, #16
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	bf00      	nop
 8002d14:	e001      	b.n	8002d1a <UART_SetConfig+0x34e>
 8002d16:	2310      	movs	r3, #16
 8002d18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d22:	d17f      	bne.n	8002e24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002d24:	7ffb      	ldrb	r3, [r7, #31]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d85c      	bhi.n	8002de4 <UART_SetConfig+0x418>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <UART_SetConfig+0x364>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d55 	.word	0x08002d55
 8002d34:	08002d75 	.word	0x08002d75
 8002d38:	08002d95 	.word	0x08002d95
 8002d3c:	08002de5 	.word	0x08002de5
 8002d40:	08002dad 	.word	0x08002dad
 8002d44:	08002de5 	.word	0x08002de5
 8002d48:	08002de5 	.word	0x08002de5
 8002d4c:	08002de5 	.word	0x08002de5
 8002d50:	08002dcd 	.word	0x08002dcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d54:	f7fe fe74 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	005a      	lsls	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	61bb      	str	r3, [r7, #24]
        break;
 8002d72:	e03a      	b.n	8002dea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d74:	f7fe fe78 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8002d78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	005a      	lsls	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	61bb      	str	r3, [r7, #24]
        break;
 8002d92:	e02a      	b.n	8002dea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	085a      	lsrs	r2, r3, #1
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <UART_SetConfig+0x54c>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6852      	ldr	r2, [r2, #4]
 8002da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	61bb      	str	r3, [r7, #24]
        break;
 8002daa:	e01e      	b.n	8002dea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dac:	f7fe fd66 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8002db0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	005a      	lsls	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	61bb      	str	r3, [r7, #24]
        break;
 8002dca:	e00e      	b.n	8002dea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	61bb      	str	r3, [r7, #24]
        break;
 8002de2:	e002      	b.n	8002dea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
        break;
 8002de8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	d916      	bls.n	8002e1e <UART_SetConfig+0x452>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df6:	d212      	bcs.n	8002e1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f023 030f 	bic.w	r3, r3, #15
 8002e00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	897a      	ldrh	r2, [r7, #10]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	e070      	b.n	8002f00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
 8002e22:	e06d      	b.n	8002f00 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d859      	bhi.n	8002ede <UART_SetConfig+0x512>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x464>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e73 	.word	0x08002e73
 8002e38:	08002e91 	.word	0x08002e91
 8002e3c:	08002edf 	.word	0x08002edf
 8002e40:	08002ea9 	.word	0x08002ea9
 8002e44:	08002edf 	.word	0x08002edf
 8002e48:	08002edf 	.word	0x08002edf
 8002e4c:	08002edf 	.word	0x08002edf
 8002e50:	08002ec7 	.word	0x08002ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7fe fdf4 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002e58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	085a      	lsrs	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	61bb      	str	r3, [r7, #24]
        break;
 8002e70:	e038      	b.n	8002ee4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e72:	f7fe fdf9 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8002e76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	085a      	lsrs	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	61bb      	str	r3, [r7, #24]
        break;
 8002e8e:	e029      	b.n	8002ee4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	085a      	lsrs	r2, r3, #1
 8002e96:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <UART_SetConfig+0x550>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6852      	ldr	r2, [r2, #4]
 8002e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	61bb      	str	r3, [r7, #24]
        break;
 8002ea6:	e01d      	b.n	8002ee4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea8:	f7fe fce8 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8002eac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	085a      	lsrs	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	61bb      	str	r3, [r7, #24]
        break;
 8002ec4:	e00e      	b.n	8002ee4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	61bb      	str	r3, [r7, #24]
        break;
 8002edc:	e002      	b.n	8002ee4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ee2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	d908      	bls.n	8002efc <UART_SetConfig+0x530>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d204      	bcs.n	8002efc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	e001      	b.n	8002f00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	01e84800 	.word	0x01e84800
 8002f1c:	00f42400 	.word	0x00f42400

08002f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01a      	beq.n	8003036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301e:	d10a      	bne.n	8003036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003072:	f7fd fdaf 	bl	8000bd4 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d10e      	bne.n	80030a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f82a 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e020      	b.n	80030e6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d10e      	bne.n	80030d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f814 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e00a      	b.n	80030e6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	e05d      	b.n	80031bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d059      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003108:	f7fd fd64 	bl	8000bd4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <UART_WaitOnFlagUntilTimeout+0x30>
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11b      	bne.n	8003156 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800312c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e042      	b.n	80031dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02b      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003172:	d123      	bne.n	80031bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800317c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800318c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e00f      	b.n	80031dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d092      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031f6:	2b84      	cmp	r3, #132	; 0x84
 80031f8:	d005      	beq.n	8003206 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	3303      	adds	r3, #3
 8003204:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321a:	f3ef 8305 	mrs	r3, IPSR
 800321e:	607b      	str	r3, [r7, #4]
  return(result);
 8003220:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800323c:	f001 f994 	bl	8004568 <vTaskStartScheduler>
  
  return osOK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	bd80      	pop	{r7, pc}

08003246 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003248:	b089      	sub	sp, #36	; 0x24
 800324a:	af04      	add	r7, sp, #16
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <osThreadCreate+0x54>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01c      	beq.n	800329a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685c      	ldr	r4, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681d      	ldr	r5, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691e      	ldr	r6, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ffb6 	bl	80031e4 <makeFreeRtosPriority>
 8003278:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003282:	9202      	str	r2, [sp, #8]
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	9100      	str	r1, [sp, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4632      	mov	r2, r6
 800328c:	4629      	mov	r1, r5
 800328e:	4620      	mov	r0, r4
 8003290:	f000 ffd3 	bl	800423a <xTaskCreateStatic>
 8003294:	4603      	mov	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e01c      	b.n	80032d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685c      	ldr	r4, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a6:	b29e      	uxth	r6, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff98 	bl	80031e4 <makeFreeRtosPriority>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	9200      	str	r2, [sp, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	4632      	mov	r2, r6
 80032c2:	4629      	mov	r1, r5
 80032c4:	4620      	mov	r0, r4
 80032c6:	f001 f818 	bl	80042fa <xTaskCreate>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032d4:	68fb      	ldr	r3, [r7, #12]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032de <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	3303      	adds	r3, #3
 80032ec:	f023 0303 	bic.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80032f2:	2014      	movs	r0, #20
 80032f4:	f002 f87a 	bl	80053ec <pvPortMalloc>
 80032f8:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d046      	beq.n	800338e <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f002 f867 	bl	80053ec <pvPortMalloc>
 800331e:	4602      	mov	r2, r0
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02b      	beq.n	8003384 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	4618      	mov	r0, r3
 8003338:	f002 f858 	bl	80053ec <pvPortMalloc>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e008      	b.n	8003362 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3301      	adds	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d3f1      	bcc.n	8003350 <osPoolCreate+0x72>
 800336c:	e00f      	b.n	800338e <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f002 f902 	bl	800557c <vPortFree>
        vPortFree(thePool);
 8003378:	6978      	ldr	r0, [r7, #20]
 800337a:	f002 f8ff 	bl	800557c <vPortFree>
        thePool = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	e004      	b.n	800338e <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f002 f8f9 	bl	800557c <vPortFree>
      thePool = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800338e:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80033a8:	f7ff ff34 	bl	8003214 <inHandlerMode>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <osPoolAlloc+0x3c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033b2:	f3ef 8211 	mrs	r2, BASEPRI
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	b672      	cpsid	i
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	b662      	cpsie	i
 80033ca:	617a      	str	r2, [r7, #20]
 80033cc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033ce:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e001      	b.n	80033d8 <osPoolAlloc+0x40>
  }
  else {
    vPortEnterCritical();
 80033d4:	f001 fee8 	bl	80051a8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e029      	b.n	8003432 <osPoolAlloc+0x9a>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6892      	ldr	r2, [r2, #8]
 80033ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80033ee:	fb02 f201 	mul.w	r2, r2, r1
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d113      	bne.n	800342c <osPoolAlloc+0x94>
      pool_id->markers[index] = 1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	440b      	add	r3, r1
 8003422:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	611a      	str	r2, [r3, #16]
      break;
 800342a:	e007      	b.n	800343c <osPoolAlloc+0xa4>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	3301      	adds	r3, #1
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3d0      	bcc.n	80033de <osPoolAlloc+0x46>
    }
  }
  
  if (inHandlerMode()) {
 800343c:	f7ff feea 	bl	8003214 <inHandlerMode>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <osPoolAlloc+0xba>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	e001      	b.n	8003456 <osPoolAlloc+0xbe>
  }
  else {
    vPortExitCritical();
 8003452:	f001 fedb 	bl	800520c <vPortExitCritical>
  }
  
  return p;
 8003456:	6a3b      	ldr	r3, [r7, #32]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3728      	adds	r7, #40	; 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af02      	add	r7, sp, #8
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <osMessageCreate+0x38>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68dc      	ldr	r4, [r3, #12]
 800348a:	2300      	movs	r3, #0
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4623      	mov	r3, r4
 8003490:	f000 f9e2 	bl	8003858 <xQueueGenericCreateStatic>
 8003494:	4603      	mov	r3, r0
 8003496:	e008      	b.n	80034aa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	4619      	mov	r1, r3
 80034a4:	f000 fa55 	bl	8003952 <xQueueGenericCreate>
 80034a8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
	...

080034b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <osMessagePut+0x1e>
    ticks = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80034d2:	f7ff fe9f 	bl	8003214 <inHandlerMode>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d018      	beq.n	800350e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80034dc:	f107 0210 	add.w	r2, r7, #16
 80034e0:	f107 0108 	add.w	r1, r7, #8
 80034e4:	2300      	movs	r3, #0
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fb96 	bl	8003c18 <xQueueGenericSendFromISR>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <osMessagePut+0x42>
      return osErrorOS;
 80034f2:	23ff      	movs	r3, #255	; 0xff
 80034f4:	e018      	b.n	8003528 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d014      	beq.n	8003526 <osMessagePut+0x72>
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <osMessagePut+0x7c>)
 80034fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	e00b      	b.n	8003526 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800350e:	f107 0108 	add.w	r1, r7, #8
 8003512:	2300      	movs	r3, #0
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fa7c 	bl	8003a14 <xQueueGenericSend>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <osMessagePut+0x72>
      return osErrorOS;
 8003522:	23ff      	movs	r3, #255	; 0xff
 8003524:	e000      	b.n	8003528 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b08b      	sub	sp, #44	; 0x2c
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	617b      	str	r3, [r7, #20]
    return event;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	461c      	mov	r4, r3
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800355e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003562:	e054      	b.n	800360e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d103      	bne.n	800357c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e009      	b.n	8003590 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <osMessageGet+0x5c>
      ticks = 1;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003590:	f7ff fe40 	bl	8003214 <inHandlerMode>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01c      	beq.n	80035d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800359a:	f107 0220 	add.w	r2, r7, #32
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	68b8      	ldr	r0, [r7, #8]
 80035a8:	f000 fcb4 	bl	8003f14 <xQueueReceiveFromISR>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80035b2:	2310      	movs	r3, #16
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e001      	b.n	80035bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01d      	beq.n	80035fe <osMessageGet+0xca>
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <osMessageGet+0xe4>)
 80035c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	e014      	b.n	80035fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	3304      	adds	r3, #4
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	4619      	mov	r1, r3
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f000 fbb6 	bl	8003d50 <xQueueReceive>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80035ea:	2310      	movs	r3, #16
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e006      	b.n	80035fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <osMessageGet+0xc6>
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <osMessageGet+0xc8>
 80035fa:	2340      	movs	r3, #64	; 0x40
 80035fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	461c      	mov	r4, r3
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800360a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	372c      	adds	r7, #44	; 0x2c
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f103 0208 	add.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0208 	add.w	r2, r3, #8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f103 0208 	add.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d103      	bne.n	80036de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e00c      	b.n	80036f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3308      	adds	r3, #8
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e002      	b.n	80036ec <vListInsert+0x2e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d2f6      	bcs.n	80036e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d103      	bne.n	8003764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <xQueueGenericReset+0x2c>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	b672      	cpsid	i
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	b662      	cpsie	i
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	e7fe      	b.n	80037ae <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80037b0:	f001 fcfa 	bl	80051a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	441a      	add	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	3b01      	subs	r3, #1
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	441a      	add	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	22ff      	movs	r2, #255	; 0xff
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	22ff      	movs	r2, #255	; 0xff
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d114      	bne.n	8003830 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01a      	beq.n	8003844 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3310      	adds	r3, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f001 f8f2 	bl	80049fc <xTaskRemoveFromEventList>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <xQueueGenericReset+0xd0>)
 8003820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	e009      	b.n	8003844 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3310      	adds	r3, #16
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fef1 	bl	800361c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3324      	adds	r3, #36	; 0x24
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff feec 	bl	800361c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003844:	f001 fce2 	bl	800520c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003848:	2301      	movs	r3, #1
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	; 0x38
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <xQueueGenericCreateStatic+0x2c>
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	b672      	cpsid	i
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	b662      	cpsie	i
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
 8003882:	e7fe      	b.n	8003882 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <xQueueGenericCreateStatic+0x4a>
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	b672      	cpsid	i
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	b662      	cpsie	i
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	e7fe      	b.n	80038a0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <xQueueGenericCreateStatic+0x56>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <xQueueGenericCreateStatic+0x5a>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <xQueueGenericCreateStatic+0x5c>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <xQueueGenericCreateStatic+0x78>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	b672      	cpsid	i
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	b662      	cpsie	i
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <xQueueGenericCreateStatic+0x84>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <xQueueGenericCreateStatic+0x88>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <xQueueGenericCreateStatic+0x8a>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <xQueueGenericCreateStatic+0xa6>
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	b672      	cpsid	i
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	b662      	cpsie	i
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e7fe      	b.n	80038fc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038fe:	2348      	movs	r3, #72	; 0x48
 8003900:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b48      	cmp	r3, #72	; 0x48
 8003906:	d00b      	beq.n	8003920 <xQueueGenericCreateStatic+0xc8>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	b672      	cpsid	i
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	b662      	cpsie	i
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e7fe      	b.n	800391e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003920:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003934:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f846 	bl	80039d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800394a:	4618      	mov	r0, r3
 800394c:	3730      	adds	r7, #48	; 0x30
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003952:	b580      	push	{r7, lr}
 8003954:	b08a      	sub	sp, #40	; 0x28
 8003956:	af02      	add	r7, sp, #8
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <xQueueGenericCreate+0x2c>
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	b672      	cpsid	i
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	b662      	cpsie	i
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e7fe      	b.n	800397c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e004      	b.n	8003994 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3348      	adds	r3, #72	; 0x48
 8003998:	4618      	mov	r0, r3
 800399a:	f001 fd27 	bl	80053ec <pvPortMalloc>
 800399e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3348      	adds	r3, #72	; 0x48
 80039ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039b8:	79fa      	ldrb	r2, [r7, #7]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f805 	bl	80039d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039ca:	69bb      	ldr	r3, [r7, #24]
	}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e002      	b.n	80039f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a02:	2101      	movs	r1, #1
 8003a04:	69b8      	ldr	r0, [r7, #24]
 8003a06:	f7ff febd 	bl	8003784 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <xQueueGenericSend+0x34>
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	b672      	cpsid	i
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	b662      	cpsie	i
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <xQueueGenericSend+0x42>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <xQueueGenericSend+0x46>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueGenericSend+0x48>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <xQueueGenericSend+0x64>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	b672      	cpsid	i
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	b662      	cpsie	i
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
 8003a76:	e7fe      	b.n	8003a76 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <xQueueGenericSend+0x72>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <xQueueGenericSend+0x76>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xQueueGenericSend+0x78>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <xQueueGenericSend+0x94>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	b672      	cpsid	i
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	b662      	cpsie	i
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aa8:	f001 f966 	bl	8004d78 <xTaskGetSchedulerState>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <xQueueGenericSend+0xa4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <xQueueGenericSend+0xa8>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <xQueueGenericSend+0xaa>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <xQueueGenericSend+0xc6>
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	b672      	cpsid	i
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	b662      	cpsie	i
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ada:	f001 fb65 	bl	80051a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <xQueueGenericSend+0xdc>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d129      	bne.n	8003b44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af6:	f000 fa90 	bl	800401a <prvCopyDataToQueue>
 8003afa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 ff77 	bl	80049fc <xTaskRemoveFromEventList>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <xQueueGenericSend+0x200>)
 8003b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	e00a      	b.n	8003b3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <xQueueGenericSend+0x200>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b3c:	f001 fb66 	bl	800520c <vPortExitCritical>
				return pdPASS;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e063      	b.n	8003c0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b4a:	f001 fb5f 	bl	800520c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e05c      	b.n	8003c0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 ffb1 	bl	8004ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b66:	f001 fb51 	bl	800520c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b6a:	f000 fd5f 	bl	800462c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b6e:	f001 fb1b 	bl	80051a8 <vPortEnterCritical>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d103      	bne.n	8003b88 <xQueueGenericSend+0x174>
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d103      	bne.n	8003b9e <xQueueGenericSend+0x18a>
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9e:	f001 fb35 	bl	800520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ba2:	1d3a      	adds	r2, r7, #4
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 ffa0 	bl	8004af0 <xTaskCheckForTimeOut>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d124      	bne.n	8003c00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb8:	f000 fb27 	bl	800420a <prvIsQueueFull>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d018      	beq.n	8003bf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	3310      	adds	r3, #16
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fef0 	bl	80049b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd2:	f000 fab2 	bl	800413a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bd6:	f000 fd37 	bl	8004648 <xTaskResumeAll>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f af7c 	bne.w	8003ada <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <xQueueGenericSend+0x200>)
 8003be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	e772      	b.n	8003ada <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf6:	f000 faa0 	bl	800413a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bfa:	f000 fd25 	bl	8004648 <xTaskResumeAll>
 8003bfe:	e76c      	b.n	8003ada <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c02:	f000 fa9a 	bl	800413a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c06:	f000 fd1f 	bl	8004648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3738      	adds	r7, #56	; 0x38
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <xQueueGenericSendFromISR+0x30>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	b672      	cpsid	i
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	b662      	cpsie	i
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e7fe      	b.n	8003c46 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <xQueueGenericSendFromISR+0x3e>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <xQueueGenericSendFromISR+0x42>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <xQueueGenericSendFromISR+0x44>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <xQueueGenericSendFromISR+0x60>
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	b672      	cpsid	i
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	b662      	cpsie	i
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	e7fe      	b.n	8003c76 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSendFromISR+0x6e>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <xQueueGenericSendFromISR+0x72>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericSendFromISR+0x74>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <xQueueGenericSendFromISR+0x90>
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	b672      	cpsid	i
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	b662      	cpsie	i
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e7fe      	b.n	8003ca6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ca8:	f001 fb5e 	bl	8005368 <vPortValidateInterruptPriority>
	__asm volatile
 8003cac:	f3ef 8211 	mrs	r2, BASEPRI
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	b672      	cpsid	i
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	b662      	cpsie	i
 8003cc4:	61ba      	str	r2, [r7, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <xQueueGenericSendFromISR+0xc6>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d12c      	bne.n	8003d38 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cee:	f000 f994 	bl	800401a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d112      	bne.n	8003d22 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fe77 	bl	80049fc <xTaskRemoveFromEventList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b25a      	sxtb	r2, r3
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d36:	e001      	b.n	8003d3c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3738      	adds	r7, #56	; 0x38
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <xQueueReceive+0x32>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	b672      	cpsid	i
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	b662      	cpsie	i
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	e7fe      	b.n	8003d80 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <xQueueReceive+0x40>
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <xQueueReceive+0x44>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <xQueueReceive+0x46>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <xQueueReceive+0x62>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	b672      	cpsid	i
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	b662      	cpsie	i
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e7fe      	b.n	8003db0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db2:	f000 ffe1 	bl	8004d78 <xTaskGetSchedulerState>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <xQueueReceive+0x72>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <xQueueReceive+0x76>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <xQueueReceive+0x78>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10b      	bne.n	8003de4 <xQueueReceive+0x94>
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	b672      	cpsid	i
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	b662      	cpsie	i
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e7fe      	b.n	8003de2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de4:	f001 f9e0 	bl	80051a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01f      	beq.n	8003e34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df8:	f000 f979 	bl	80040ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	1e5a      	subs	r2, r3, #1
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	3310      	adds	r3, #16
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fdf3 	bl	80049fc <xTaskRemoveFromEventList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e1c:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <xQueueReceive+0x1c0>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e2c:	f001 f9ee 	bl	800520c <vPortExitCritical>
				return pdPASS;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e069      	b.n	8003f08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e3a:	f001 f9e7 	bl	800520c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e062      	b.n	8003f08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fe39 	bl	8004ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e56:	f001 f9d9 	bl	800520c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e5a:	f000 fbe7 	bl	800462c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e5e:	f001 f9a3 	bl	80051a8 <vPortEnterCritical>
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d103      	bne.n	8003e78 <xQueueReceive+0x128>
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d103      	bne.n	8003e8e <xQueueReceive+0x13e>
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e8e:	f001 f9bd 	bl	800520c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e92:	1d3a      	adds	r2, r7, #4
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fe28 	bl	8004af0 <xTaskCheckForTimeOut>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d123      	bne.n	8003eee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea8:	f000 f999 	bl	80041de <prvIsQueueEmpty>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fd78 	bl	80049b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec2:	f000 f93a 	bl	800413a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec6:	f000 fbbf 	bl	8004648 <xTaskResumeAll>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d189      	bne.n	8003de4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <xQueueReceive+0x1c0>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	e780      	b.n	8003de4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee4:	f000 f929 	bl	800413a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee8:	f000 fbae 	bl	8004648 <xTaskResumeAll>
 8003eec:	e77a      	b.n	8003de4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef0:	f000 f923 	bl	800413a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef4:	f000 fba8 	bl	8004648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efa:	f000 f970 	bl	80041de <prvIsQueueEmpty>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f43f af6f 	beq.w	8003de4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3730      	adds	r7, #48	; 0x30
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <xQueueReceiveFromISR+0x2e>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	b672      	cpsid	i
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	b662      	cpsie	i
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	e7fe      	b.n	8003f40 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <xQueueReceiveFromISR+0x3c>
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <xQueueReceiveFromISR+0x40>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <xQueueReceiveFromISR+0x42>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <xQueueReceiveFromISR+0x5e>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	b672      	cpsid	i
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	b662      	cpsie	i
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e7fe      	b.n	8003f70 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f72:	f001 f9f9 	bl	8005368 <vPortValidateInterruptPriority>
	__asm volatile
 8003f76:	f3ef 8211 	mrs	r2, BASEPRI
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	b672      	cpsid	i
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	b662      	cpsie	i
 8003f8e:	61ba      	str	r2, [r7, #24]
 8003f90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02f      	beq.n	8004002 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb0:	f000 f89d 	bl	80040ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d112      	bne.n	8003fec <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	3310      	adds	r3, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fd12 	bl	80049fc <xTaskRemoveFromEventList>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e007      	b.n	8003ffc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	b25a      	sxtb	r2, r3
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8004000:	e001      	b.n	8004006 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	613b      	str	r3, [r7, #16]
	__asm volatile
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004012:	4618      	mov	r0, r3
 8004014:	3738      	adds	r7, #56	; 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10d      	bne.n	8004054 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d14d      	bne.n	80040dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 feb5 	bl	8004db4 <xTaskPriorityDisinherit>
 800404a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	e043      	b.n	80040dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d119      	bne.n	800408e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6858      	ldr	r0, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	461a      	mov	r2, r3
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	f001 fbc5 	bl	80057f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	441a      	add	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d32b      	bcc.n	80040dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	e026      	b.n	80040dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68d8      	ldr	r0, [r3, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	461a      	mov	r2, r3
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	f001 fbab 	bl	80057f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	425b      	negs	r3, r3
 80040a8:	441a      	add	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d207      	bcs.n	80040ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	425b      	negs	r3, r3
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d105      	bne.n	80040dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3b01      	subs	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040e4:	697b      	ldr	r3, [r7, #20]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d018      	beq.n	8004132 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d303      	bcc.n	8004122 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68d9      	ldr	r1, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	461a      	mov	r2, r3
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f001 fb61 	bl	80057f4 <memcpy>
	}
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004142:	f001 f831 	bl	80051a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800414e:	e011      	b.n	8004174 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3324      	adds	r3, #36	; 0x24
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fc4d 	bl	80049fc <xTaskRemoveFromEventList>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004168:	f000 fd26 	bl	8004bb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	3b01      	subs	r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	dce9      	bgt.n	8004150 <prvUnlockQueue+0x16>
 800417c:	e000      	b.n	8004180 <prvUnlockQueue+0x46>
					break;
 800417e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004188:	f001 f840 	bl	800520c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800418c:	f001 f80c 	bl	80051a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004196:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004198:	e011      	b.n	80041be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d012      	beq.n	80041c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3310      	adds	r3, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fc28 	bl	80049fc <xTaskRemoveFromEventList>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041b2:	f000 fd01 	bl	8004bb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b6:	7bbb      	ldrb	r3, [r7, #14]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	dce9      	bgt.n	800419a <prvUnlockQueue+0x60>
 80041c6:	e000      	b.n	80041ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041d2:	f001 f81b 	bl	800520c <vPortExitCritical>
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e6:	f000 ffdf 	bl	80051a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e001      	b.n	80041fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041fc:	f001 f806 	bl	800520c <vPortExitCritical>

	return xReturn;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004212:	f000 ffc9 	bl	80051a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	429a      	cmp	r2, r3
 8004220:	d102      	bne.n	8004228 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e001      	b.n	800422c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800422c:	f000 ffee 	bl	800520c <vPortExitCritical>

	return xReturn;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800423a:	b580      	push	{r7, lr}
 800423c:	b08e      	sub	sp, #56	; 0x38
 800423e:	af04      	add	r7, sp, #16
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <xTaskCreateStatic+0x2c>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	b672      	cpsid	i
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	b662      	cpsie	i
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	e7fe      	b.n	8004264 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <xTaskCreateStatic+0x4a>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	b672      	cpsid	i
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	b662      	cpsie	i
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e7fe      	b.n	8004282 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004284:	2354      	movs	r3, #84	; 0x54
 8004286:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b54      	cmp	r3, #84	; 0x54
 800428c:	d00b      	beq.n	80042a6 <xTaskCreateStatic+0x6c>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	b672      	cpsid	i
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	b662      	cpsie	i
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e7fe      	b.n	80042a4 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01e      	beq.n	80042ec <xTaskCreateStatic+0xb2>
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042c6:	2300      	movs	r3, #0
 80042c8:	9303      	str	r3, [sp, #12]
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9302      	str	r3, [sp, #8]
 80042ce:	f107 0314 	add.w	r3, r7, #20
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f850 	bl	8004384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e6:	f000 f8d5 	bl	8004494 <prvAddNewTaskToReadyList>
 80042ea:	e001      	b.n	80042f0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f0:	697b      	ldr	r3, [r7, #20]
	}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3728      	adds	r7, #40	; 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b08c      	sub	sp, #48	; 0x30
 80042fe:	af04      	add	r7, sp, #16
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f86c 	bl	80053ec <pvPortMalloc>
 8004314:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800431c:	2054      	movs	r0, #84	; 0x54
 800431e:	f001 f865 	bl	80053ec <pvPortMalloc>
 8004322:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
 8004330:	e005      	b.n	800433e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f001 f922 	bl	800557c <vPortFree>
 8004338:	e001      	b.n	800433e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d017      	beq.n	8004374 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	2300      	movs	r3, #0
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f80e 	bl	8004384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004368:	69f8      	ldr	r0, [r7, #28]
 800436a:	f000 f893 	bl	8004494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e002      	b.n	800437a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800437a:	69bb      	ldr	r3, [r7, #24]
	}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800439c:	440b      	add	r3, r1
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <prvInitialiseNewTask+0x4a>
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	b672      	cpsid	i
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	b662      	cpsie	i
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e7fe      	b.n	80043cc <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01f      	beq.n	8004414 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e012      	b.n	8004400 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	7819      	ldrb	r1, [r3, #0]
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	3334      	adds	r3, #52	; 0x34
 80043ea:	460a      	mov	r2, r1
 80043ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d9e9      	bls.n	80043da <prvInitialiseNewTask+0x56>
 8004406:	e000      	b.n	800440a <prvInitialiseNewTask+0x86>
			{
				break;
 8004408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004412:	e003      	b.n	800441c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2b06      	cmp	r3, #6
 8004420:	d901      	bls.n	8004426 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004422:	2306      	movs	r3, #6
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2200      	movs	r2, #0
 8004436:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff f90d 	bl	800365c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	3318      	adds	r3, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff f908 	bl	800365c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f1c3 0207 	rsb	r2, r3, #7
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	69b8      	ldr	r0, [r7, #24]
 8004476:	f000 fd8b 	bl	8004f90 <pxPortInitialiseStack>
 800447a:	4602      	mov	r2, r0
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800449c:	f000 fe84 	bl	80051a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a29      	ldr	r2, [pc, #164]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044aa:	4b29      	ldr	r3, [pc, #164]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d110      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c0:	f000 fb9e 	bl	8004c00 <prvInitialiseTaskLists>
 80044c4:	e00d      	b.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <prvAddNewTaskToReadyList+0xc0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d802      	bhi.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <prvAddNewTaskToReadyList+0xcc>)
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff f8ae 	bl	8003676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800451a:	f000 fe77 	bl	800520c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <prvAddNewTaskToReadyList+0xc0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvAddNewTaskToReadyList+0xd0>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000380 	.word	0x20000380
 8004550:	20000280 	.word	0x20000280
 8004554:	2000038c 	.word	0x2000038c
 8004558:	2000039c 	.word	0x2000039c
 800455c:	20000388 	.word	0x20000388
 8004560:	20000284 	.word	0x20000284
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004576:	463a      	mov	r2, r7
 8004578:	1d39      	adds	r1, r7, #4
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	4618      	mov	r0, r3
 8004580:	f7fb ffde 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	9202      	str	r2, [sp, #8]
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	2300      	movs	r3, #0
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	460a      	mov	r2, r1
 8004596:	491f      	ldr	r1, [pc, #124]	; (8004614 <vTaskStartScheduler+0xac>)
 8004598:	481f      	ldr	r0, [pc, #124]	; (8004618 <vTaskStartScheduler+0xb0>)
 800459a:	f7ff fe4e 	bl	800423a <xTaskCreateStatic>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <vTaskStartScheduler+0xb4>)
 80045a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <vTaskStartScheduler+0xb4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e001      	b.n	80045b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d117      	bne.n	80045ec <vTaskStartScheduler+0x84>
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	b672      	cpsid	i
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	b662      	cpsie	i
 80045d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <vTaskStartScheduler+0xb8>)
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <vTaskStartScheduler+0xbc>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <vTaskStartScheduler+0xc0>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045e6:	f000 fd63 	bl	80050b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045ea:	e00f      	b.n	800460c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d10b      	bne.n	800460c <vTaskStartScheduler+0xa4>
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	b672      	cpsid	i
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	b662      	cpsie	i
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e7fe      	b.n	800460a <vTaskStartScheduler+0xa2>
}
 800460c:	bf00      	nop
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	08005948 	.word	0x08005948
 8004618:	08004bd1 	.word	0x08004bd1
 800461c:	200003a4 	.word	0x200003a4
 8004620:	200003a0 	.word	0x200003a0
 8004624:	2000038c 	.word	0x2000038c
 8004628:	20000384 	.word	0x20000384

0800462c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <vTaskSuspendAll+0x18>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	4a03      	ldr	r2, [pc, #12]	; (8004644 <vTaskSuspendAll+0x18>)
 8004638:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	200003a8 	.word	0x200003a8

08004648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <xTaskResumeAll+0x118>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <xTaskResumeAll+0x2e>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	b672      	cpsid	i
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	b662      	cpsie	i
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	e7fe      	b.n	8004674 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004676:	f000 fd97 	bl	80051a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800467a:	4b39      	ldr	r3, [pc, #228]	; (8004760 <xTaskResumeAll+0x118>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a37      	ldr	r2, [pc, #220]	; (8004760 <xTaskResumeAll+0x118>)
 8004682:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004684:	4b36      	ldr	r3, [pc, #216]	; (8004760 <xTaskResumeAll+0x118>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d161      	bne.n	8004750 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800468c:	4b35      	ldr	r3, [pc, #212]	; (8004764 <xTaskResumeAll+0x11c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05d      	beq.n	8004750 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004694:	e02e      	b.n	80046f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004696:	4b34      	ldr	r3, [pc, #208]	; (8004768 <xTaskResumeAll+0x120>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3318      	adds	r3, #24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff f844 	bl	8003730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff f83f 	bl	8003730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	2201      	movs	r2, #1
 80046b8:	409a      	lsls	r2, r3
 80046ba:	4b2c      	ldr	r3, [pc, #176]	; (800476c <xTaskResumeAll+0x124>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	4a2a      	ldr	r2, [pc, #168]	; (800476c <xTaskResumeAll+0x124>)
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4a27      	ldr	r2, [pc, #156]	; (8004770 <xTaskResumeAll+0x128>)
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f7fe ffcb 	bl	8003676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <xTaskResumeAll+0x12c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <xTaskResumeAll+0x130>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <xTaskResumeAll+0x120>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1cc      	bne.n	8004696 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004702:	f000 fb19 	bl	8004d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <xTaskResumeAll+0x134>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004712:	f000 f837 	bl	8004784 <xTaskIncrementTick>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <xTaskResumeAll+0x130>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3b01      	subs	r3, #1
 8004726:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f1      	bne.n	8004712 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <xTaskResumeAll+0x134>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <xTaskResumeAll+0x130>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <xTaskResumeAll+0x138>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004750:	f000 fd5c 	bl	800520c <vPortExitCritical>

	return xAlreadyYielded;
 8004754:	68bb      	ldr	r3, [r7, #8]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200003a8 	.word	0x200003a8
 8004764:	20000380 	.word	0x20000380
 8004768:	20000340 	.word	0x20000340
 800476c:	20000388 	.word	0x20000388
 8004770:	20000284 	.word	0x20000284
 8004774:	20000280 	.word	0x20000280
 8004778:	20000394 	.word	0x20000394
 800477c:	20000390 	.word	0x20000390
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800478e:	4b4f      	ldr	r3, [pc, #316]	; (80048cc <xTaskIncrementTick+0x148>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 8089 	bne.w	80048aa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004798:	4b4d      	ldr	r3, [pc, #308]	; (80048d0 <xTaskIncrementTick+0x14c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047a0:	4a4b      	ldr	r2, [pc, #300]	; (80048d0 <xTaskIncrementTick+0x14c>)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d121      	bne.n	80047f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80047ac:	4b49      	ldr	r3, [pc, #292]	; (80048d4 <xTaskIncrementTick+0x150>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <xTaskIncrementTick+0x4a>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	b672      	cpsid	i
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	b662      	cpsie	i
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	e7fe      	b.n	80047cc <xTaskIncrementTick+0x48>
 80047ce:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <xTaskIncrementTick+0x150>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	4b40      	ldr	r3, [pc, #256]	; (80048d8 <xTaskIncrementTick+0x154>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3e      	ldr	r2, [pc, #248]	; (80048d4 <xTaskIncrementTick+0x150>)
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <xTaskIncrementTick+0x154>)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <xTaskIncrementTick+0x158>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	4a3c      	ldr	r2, [pc, #240]	; (80048dc <xTaskIncrementTick+0x158>)
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	f000 faa4 	bl	8004d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047f0:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <xTaskIncrementTick+0x15c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d348      	bcc.n	800488c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <xTaskIncrementTick+0x150>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004804:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <xTaskIncrementTick+0x15c>)
 8004806:	f04f 32ff 	mov.w	r2, #4294967295
 800480a:	601a      	str	r2, [r3, #0]
					break;
 800480c:	e03e      	b.n	800488c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480e:	4b31      	ldr	r3, [pc, #196]	; (80048d4 <xTaskIncrementTick+0x150>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d203      	bcs.n	800482e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004826:	4a2e      	ldr	r2, [pc, #184]	; (80048e0 <xTaskIncrementTick+0x15c>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800482c:	e02e      	b.n	800488c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe ff7c 	bl	8003730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3318      	adds	r3, #24
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe ff73 	bl	8003730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	2201      	movs	r2, #1
 8004850:	409a      	lsls	r2, r3
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <xTaskIncrementTick+0x160>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <xTaskIncrementTick+0x160>)
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <xTaskIncrementTick+0x164>)
 800486a:	441a      	add	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7fe feff 	bl	8003676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <xTaskIncrementTick+0x168>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	429a      	cmp	r2, r3
 8004884:	d3b9      	bcc.n	80047fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004886:	2301      	movs	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800488a:	e7b6      	b.n	80047fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800488c:	4b17      	ldr	r3, [pc, #92]	; (80048ec <xTaskIncrementTick+0x168>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	4915      	ldr	r1, [pc, #84]	; (80048e8 <xTaskIncrementTick+0x164>)
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d907      	bls.n	80048b4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e004      	b.n	80048b4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <xTaskIncrementTick+0x16c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	4a0f      	ldr	r2, [pc, #60]	; (80048f0 <xTaskIncrementTick+0x16c>)
 80048b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <xTaskIncrementTick+0x170>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048c0:	697b      	ldr	r3, [r7, #20]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200003a8 	.word	0x200003a8
 80048d0:	20000384 	.word	0x20000384
 80048d4:	20000338 	.word	0x20000338
 80048d8:	2000033c 	.word	0x2000033c
 80048dc:	20000398 	.word	0x20000398
 80048e0:	200003a0 	.word	0x200003a0
 80048e4:	20000388 	.word	0x20000388
 80048e8:	20000284 	.word	0x20000284
 80048ec:	20000280 	.word	0x20000280
 80048f0:	20000390 	.word	0x20000390
 80048f4:	20000394 	.word	0x20000394

080048f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <vTaskSwitchContext+0xa4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <vTaskSwitchContext+0xa8>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800490c:	e040      	b.n	8004990 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <vTaskSwitchContext+0xa8>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <vTaskSwitchContext+0xac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	fab3 f383 	clz	r3, r3
 8004920:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004922:	7afb      	ldrb	r3, [r7, #11]
 8004924:	f1c3 031f 	rsb	r3, r3, #31
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	491f      	ldr	r1, [pc, #124]	; (80049a8 <vTaskSwitchContext+0xb0>)
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <vTaskSwitchContext+0x5e>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	b672      	cpsid	i
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	b662      	cpsie	i
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	e7fe      	b.n	8004954 <vTaskSwitchContext+0x5c>
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <vTaskSwitchContext+0xb0>)
 8004962:	4413      	add	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3308      	adds	r3, #8
 8004978:	429a      	cmp	r2, r3
 800497a:	d104      	bne.n	8004986 <vTaskSwitchContext+0x8e>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a07      	ldr	r2, [pc, #28]	; (80049ac <vTaskSwitchContext+0xb4>)
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	200003a8 	.word	0x200003a8
 80049a0:	20000394 	.word	0x20000394
 80049a4:	20000388 	.word	0x20000388
 80049a8:	20000284 	.word	0x20000284
 80049ac:	20000280 	.word	0x20000280

080049b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <vTaskPlaceOnEventList+0x28>
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	b672      	cpsid	i
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	b662      	cpsie	i
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e7fe      	b.n	80049d6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <vTaskPlaceOnEventList+0x48>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3318      	adds	r3, #24
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fe fe6c 	bl	80036be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049e6:	2101      	movs	r1, #1
 80049e8:	6838      	ldr	r0, [r7, #0]
 80049ea:	f000 fa6b 	bl	8004ec4 <prvAddCurrentTaskToDelayedList>
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000280 	.word	0x20000280

080049fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <xTaskRemoveFromEventList+0x2e>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	b672      	cpsid	i
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	b662      	cpsie	i
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e7fe      	b.n	8004a28 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	3318      	adds	r3, #24
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fe7e 	bl	8003730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <xTaskRemoveFromEventList+0xb0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11c      	bne.n	8004a76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fe75 	bl	8003730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <xTaskRemoveFromEventList+0xb4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <xTaskRemoveFromEventList+0xb4>)
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <xTaskRemoveFromEventList+0xb8>)
 8004a66:	441a      	add	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f7fe fe01 	bl	8003676 <vListInsertEnd>
 8004a74:	e005      	b.n	8004a82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3318      	adds	r3, #24
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	480e      	ldr	r0, [pc, #56]	; (8004ab8 <xTaskRemoveFromEventList+0xbc>)
 8004a7e:	f7fe fdfa 	bl	8003676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <xTaskRemoveFromEventList+0xc0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d905      	bls.n	8004a9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <xTaskRemoveFromEventList+0xc4>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e001      	b.n	8004aa0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200003a8 	.word	0x200003a8
 8004ab0:	20000388 	.word	0x20000388
 8004ab4:	20000284 	.word	0x20000284
 8004ab8:	20000340 	.word	0x20000340
 8004abc:	20000280 	.word	0x20000280
 8004ac0:	20000394 	.word	0x20000394

08004ac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <vTaskInternalSetTimeOutState+0x24>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <vTaskInternalSetTimeOutState+0x28>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	605a      	str	r2, [r3, #4]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	20000398 	.word	0x20000398
 8004aec:	20000384 	.word	0x20000384

08004af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xTaskCheckForTimeOut+0x28>
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	b672      	cpsid	i
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	b662      	cpsie	i
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e7fe      	b.n	8004b16 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <xTaskCheckForTimeOut+0x46>
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	b672      	cpsid	i
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	b662      	cpsie	i
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e7fe      	b.n	8004b34 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8004b36:	f000 fb37 	bl	80051a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <xTaskCheckForTimeOut+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d102      	bne.n	8004b5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e023      	b.n	8004ba2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <xTaskCheckForTimeOut+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d007      	beq.n	8004b76 <xTaskCheckForTimeOut+0x86>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b70:	2301      	movs	r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	e015      	b.n	8004ba2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d20b      	bcs.n	8004b98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff99 	bl	8004ac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e004      	b.n	8004ba2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ba2:	f000 fb33 	bl	800520c <vPortExitCritical>

	return xReturn;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000384 	.word	0x20000384
 8004bb4:	20000398 	.word	0x20000398

08004bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <vTaskMissedYield+0x14>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
}
 8004bc2:	bf00      	nop
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000394 	.word	0x20000394

08004bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bd8:	f000 f852 	bl	8004c80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <prvIdleTask+0x28>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d9f9      	bls.n	8004bd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <prvIdleTask+0x2c>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bf4:	e7f0      	b.n	8004bd8 <prvIdleTask+0x8>
 8004bf6:	bf00      	nop
 8004bf8:	20000284 	.word	0x20000284
 8004bfc:	e000ed04 	.word	0xe000ed04

08004c00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e00c      	b.n	8004c26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <prvInitialiseTaskLists+0x60>)
 8004c18:	4413      	add	r3, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe fcfe 	bl	800361c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3301      	adds	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d9ef      	bls.n	8004c0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c2c:	480d      	ldr	r0, [pc, #52]	; (8004c64 <prvInitialiseTaskLists+0x64>)
 8004c2e:	f7fe fcf5 	bl	800361c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c32:	480d      	ldr	r0, [pc, #52]	; (8004c68 <prvInitialiseTaskLists+0x68>)
 8004c34:	f7fe fcf2 	bl	800361c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c38:	480c      	ldr	r0, [pc, #48]	; (8004c6c <prvInitialiseTaskLists+0x6c>)
 8004c3a:	f7fe fcef 	bl	800361c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c3e:	480c      	ldr	r0, [pc, #48]	; (8004c70 <prvInitialiseTaskLists+0x70>)
 8004c40:	f7fe fcec 	bl	800361c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c44:	480b      	ldr	r0, [pc, #44]	; (8004c74 <prvInitialiseTaskLists+0x74>)
 8004c46:	f7fe fce9 	bl	800361c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <prvInitialiseTaskLists+0x78>)
 8004c4c:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <prvInitialiseTaskLists+0x64>)
 8004c4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <prvInitialiseTaskLists+0x7c>)
 8004c52:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <prvInitialiseTaskLists+0x68>)
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000284 	.word	0x20000284
 8004c64:	20000310 	.word	0x20000310
 8004c68:	20000324 	.word	0x20000324
 8004c6c:	20000340 	.word	0x20000340
 8004c70:	20000354 	.word	0x20000354
 8004c74:	2000036c 	.word	0x2000036c
 8004c78:	20000338 	.word	0x20000338
 8004c7c:	2000033c 	.word	0x2000033c

08004c80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c86:	e019      	b.n	8004cbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c88:	f000 fa8e 	bl	80051a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <prvCheckTasksWaitingTermination+0x4c>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fd49 	bl	8003730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <prvCheckTasksWaitingTermination+0x50>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <prvCheckTasksWaitingTermination+0x50>)
 8004ca6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <prvCheckTasksWaitingTermination+0x54>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <prvCheckTasksWaitingTermination+0x54>)
 8004cb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cb2:	f000 faab 	bl	800520c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f80e 	bl	8004cd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <prvCheckTasksWaitingTermination+0x54>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e1      	bne.n	8004c88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000354 	.word	0x20000354
 8004cd0:	20000380 	.word	0x20000380
 8004cd4:	20000368 	.word	0x20000368

08004cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d108      	bne.n	8004cfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fc44 	bl	800557c <vPortFree>
				vPortFree( pxTCB );
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fc41 	bl	800557c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cfa:	e019      	b.n	8004d30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d103      	bne.n	8004d0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fc38 	bl	800557c <vPortFree>
	}
 8004d0c:	e010      	b.n	8004d30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d00b      	beq.n	8004d30 <prvDeleteTCB+0x58>
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	b672      	cpsid	i
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	b662      	cpsie	i
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e7fe      	b.n	8004d2e <prvDeleteTCB+0x56>
	}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <prvResetNextTaskUnblockTime+0x38>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <prvResetNextTaskUnblockTime+0x3c>)
 8004d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d50:	e008      	b.n	8004d64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <prvResetNextTaskUnblockTime+0x38>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <prvResetNextTaskUnblockTime+0x3c>)
 8004d62:	6013      	str	r3, [r2, #0]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	20000338 	.word	0x20000338
 8004d74:	200003a0 	.word	0x200003a0

08004d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <xTaskGetSchedulerState+0x34>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d86:	2301      	movs	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	e008      	b.n	8004d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <xTaskGetSchedulerState+0x38>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d94:	2302      	movs	r3, #2
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	e001      	b.n	8004d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d9e:	687b      	ldr	r3, [r7, #4]
	}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000038c 	.word	0x2000038c
 8004db0:	200003a8 	.word	0x200003a8

08004db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d070      	beq.n	8004eac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <xTaskPriorityDisinherit+0x104>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d00b      	beq.n	8004dec <xTaskPriorityDisinherit+0x38>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	b672      	cpsid	i
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	b662      	cpsie	i
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e7fe      	b.n	8004dea <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <xTaskPriorityDisinherit+0x58>
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	b672      	cpsid	i
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	b662      	cpsie	i
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	e7fe      	b.n	8004e0a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d044      	beq.n	8004eac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d140      	bne.n	8004eac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe fc7e 	bl	8003730 <uxListRemove>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d115      	bne.n	8004e66 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	491f      	ldr	r1, [pc, #124]	; (8004ebc <xTaskPriorityDisinherit+0x108>)
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xTaskPriorityDisinherit+0xb2>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	2201      	movs	r2, #1
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <xTaskPriorityDisinherit+0x10c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4013      	ands	r3, r2
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <xTaskPriorityDisinherit+0x10c>)
 8004e64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	f1c3 0207 	rsb	r2, r3, #7
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	2201      	movs	r2, #1
 8004e80:	409a      	lsls	r2, r3
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <xTaskPriorityDisinherit+0x10c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <xTaskPriorityDisinherit+0x10c>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <xTaskPriorityDisinherit+0x108>)
 8004e9a:	441a      	add	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f7fe fbe7 	bl	8003676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004eac:	697b      	ldr	r3, [r7, #20]
	}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000280 	.word	0x20000280
 8004ebc:	20000284 	.word	0x20000284
 8004ec0:	20000388 	.word	0x20000388

08004ec4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fc28 	bl	8003730 <uxListRemove>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	2201      	movs	r2, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004efc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d10a      	bne.n	8004f1c <prvAddCurrentTaskToDelayedList+0x58>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	481a      	ldr	r0, [pc, #104]	; (8004f80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f16:	f7fe fbae 	bl	8003676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f1a:	e026      	b.n	8004f6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d209      	bcs.n	8004f48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7fe fbbc 	bl	80036be <vListInsert>
}
 8004f46:	e010      	b.n	8004f6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f7fe fbb2 	bl	80036be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d202      	bcs.n	8004f6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f64:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6013      	str	r3, [r2, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000384 	.word	0x20000384
 8004f78:	20000280 	.word	0x20000280
 8004f7c:	20000388 	.word	0x20000388
 8004f80:	2000036c 	.word	0x2000036c
 8004f84:	2000033c 	.word	0x2000033c
 8004f88:	20000338 	.word	0x20000338
 8004f8c:	200003a0 	.word	0x200003a0

08004f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b04      	subs	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <pxPortInitialiseStack+0x64>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3b14      	subs	r3, #20
 8004fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b04      	subs	r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f06f 0202 	mvn.w	r2, #2
 8004fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b20      	subs	r3, #32
 8004fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	08004ff9 	.word	0x08004ff9

08004ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <prvTaskExitError+0x58>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d00b      	beq.n	8005024 <prvTaskExitError+0x2c>
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	b672      	cpsid	i
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	b662      	cpsie	i
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e7fe      	b.n	8005022 <prvTaskExitError+0x2a>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	b672      	cpsid	i
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	b662      	cpsie	i
 8005038:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800503a:	bf00      	nop
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0fc      	beq.n	800503c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c
	...

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	4770      	bx	lr
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst2>:
 8005080:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005088:	4808      	ldr	r0, [pc, #32]	; (80050ac <prvPortStartFirstTask+0x24>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8814 	msr	CONTROL, r0
 800509a:	b662      	cpsie	i
 800509c:	b661      	cpsie	f
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	df00      	svc	0
 80050a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050aa:	bf00      	nop
 80050ac:	e000ed08 	.word	0xe000ed08

080050b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050b6:	4b36      	ldr	r3, [pc, #216]	; (8005190 <xPortStartScheduler+0xe0>)
 80050b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <xPortStartScheduler+0xe4>)
 80050dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050de:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <xPortStartScheduler+0xe8>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e4:	e009      	b.n	80050fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050e6:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <xPortStartScheduler+0xe8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <xPortStartScheduler+0xe8>)
 80050ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d0ef      	beq.n	80050e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <xPortStartScheduler+0xe8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00b      	beq.n	800512a <xPortStartScheduler+0x7a>
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	b672      	cpsid	i
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	b662      	cpsie	i
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	e7fe      	b.n	8005128 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800512a:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <xPortStartScheduler+0xe8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	4a19      	ldr	r2, [pc, #100]	; (8005198 <xPortStartScheduler+0xe8>)
 8005132:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <xPortStartScheduler+0xe8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800513c:	4a16      	ldr	r2, [pc, #88]	; (8005198 <xPortStartScheduler+0xe8>)
 800513e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005148:	4b14      	ldr	r3, [pc, #80]	; (800519c <xPortStartScheduler+0xec>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <xPortStartScheduler+0xec>)
 800514e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005152:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005154:	4b11      	ldr	r3, [pc, #68]	; (800519c <xPortStartScheduler+0xec>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a10      	ldr	r2, [pc, #64]	; (800519c <xPortStartScheduler+0xec>)
 800515a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800515e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005160:	f000 f8d4 	bl	800530c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <xPortStartScheduler+0xf0>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800516a:	f000 f8f3 	bl	8005354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <xPortStartScheduler+0xf4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <xPortStartScheduler+0xf4>)
 8005174:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005178:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800517a:	f7ff ff85 	bl	8005088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800517e:	f7ff fbbb 	bl	80048f8 <vTaskSwitchContext>
	prvTaskExitError();
 8005182:	f7ff ff39 	bl	8004ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	e000e400 	.word	0xe000e400
 8005194:	200003ac 	.word	0x200003ac
 8005198:	200003b0 	.word	0x200003b0
 800519c:	e000ed20 	.word	0xe000ed20
 80051a0:	2000000c 	.word	0x2000000c
 80051a4:	e000ef34 	.word	0xe000ef34

080051a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <vPortEnterCritical+0x5c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <vPortEnterCritical+0x5c>)
 80051cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <vPortEnterCritical+0x5c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d110      	bne.n	80051f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <vPortEnterCritical+0x60>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <vPortEnterCritical+0x50>
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	b672      	cpsid	i
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	b662      	cpsie	i
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	e7fe      	b.n	80051f6 <vPortEnterCritical+0x4e>
	}
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	2000000c 	.word	0x2000000c
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <vPortExitCritical+0x50>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <vPortExitCritical+0x26>
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	b672      	cpsid	i
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	b662      	cpsie	i
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	e7fe      	b.n	8005230 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <vPortExitCritical+0x50>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3b01      	subs	r3, #1
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <vPortExitCritical+0x50>)
 800523a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <vPortExitCritical+0x50>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <vPortExitCritical+0x42>
 8005244:	2300      	movs	r3, #0
 8005246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000000c 	.word	0x2000000c

08005260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005260:	f3ef 8009 	mrs	r0, PSP
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <pxCurrentTCBConst>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f01e 0f10 	tst.w	lr, #16
 8005270:	bf08      	it	eq
 8005272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	6010      	str	r0, [r2, #0]
 800527c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005284:	b672      	cpsid	i
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	b662      	cpsie	i
 8005294:	f7ff fb30 	bl	80048f8 <vTaskSwitchContext>
 8005298:	f04f 0000 	mov.w	r0, #0
 800529c:	f380 8811 	msr	BASEPRI, r0
 80052a0:	bc09      	pop	{r0, r3}
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	f01e 0f10 	tst.w	lr, #16
 80052ae:	bf08      	it	eq
 80052b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052b4:	f380 8809 	msr	PSP, r0
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop

080052c0 <pxCurrentTCBConst>:
 80052c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	b672      	cpsid	i
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	b662      	cpsie	i
 80052e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052e4:	f7ff fa4e 	bl	8004784 <xTaskIncrementTick>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <SysTick_Handler+0x40>)
 80052f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <vPortSetupTimerInterrupt+0x34>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <vPortSetupTimerInterrupt+0x38>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <vPortSetupTimerInterrupt+0x3c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <vPortSetupTimerInterrupt+0x40>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <vPortSetupTimerInterrupt+0x44>)
 800532a:	3b01      	subs	r3, #1
 800532c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <vPortSetupTimerInterrupt+0x34>)
 8005330:	2207      	movs	r2, #7
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e010 	.word	0xe000e010
 8005344:	e000e018 	.word	0xe000e018
 8005348:	20000000 	.word	0x20000000
 800534c:	10624dd3 	.word	0x10624dd3
 8005350:	e000e014 	.word	0xe000e014

08005354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005364 <vPortEnableVFP+0x10>
 8005358:	6801      	ldr	r1, [r0, #0]
 800535a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800535e:	6001      	str	r1, [r0, #0]
 8005360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005362:	bf00      	nop
 8005364:	e000ed88 	.word	0xe000ed88

08005368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800536e:	f3ef 8305 	mrs	r3, IPSR
 8005372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	d915      	bls.n	80053a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <vPortValidateInterruptPriority+0x74>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <vPortValidateInterruptPriority+0x78>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	7afa      	ldrb	r2, [r7, #11]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20b      	bcs.n	80053a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	b672      	cpsid	i
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	b662      	cpsie	i
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	e7fe      	b.n	80053a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <vPortValidateInterruptPriority+0x7c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ae:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <vPortValidateInterruptPriority+0x80>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d90b      	bls.n	80053ce <vPortValidateInterruptPriority+0x66>
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	b672      	cpsid	i
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	b662      	cpsie	i
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	e7fe      	b.n	80053cc <vPortValidateInterruptPriority+0x64>
	}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e3f0 	.word	0xe000e3f0
 80053e0:	200003ac 	.word	0x200003ac
 80053e4:	e000ed0c 	.word	0xe000ed0c
 80053e8:	200003b0 	.word	0x200003b0

080053ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053f8:	f7ff f918 	bl	800462c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053fc:	4b5a      	ldr	r3, [pc, #360]	; (8005568 <pvPortMalloc+0x17c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005404:	f000 f916 	bl	8005634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005408:	4b58      	ldr	r3, [pc, #352]	; (800556c <pvPortMalloc+0x180>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 8090 	bne.w	8005536 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01e      	beq.n	800545a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800541c:	2208      	movs	r2, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b00      	cmp	r3, #0
 800542c:	d015      	beq.n	800545a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f023 0307 	bic.w	r3, r3, #7
 8005434:	3308      	adds	r3, #8
 8005436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <pvPortMalloc+0x6e>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	b672      	cpsid	i
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	b662      	cpsie	i
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e7fe      	b.n	8005458 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d06a      	beq.n	8005536 <pvPortMalloc+0x14a>
 8005460:	4b43      	ldr	r3, [pc, #268]	; (8005570 <pvPortMalloc+0x184>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d865      	bhi.n	8005536 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800546a:	4b42      	ldr	r3, [pc, #264]	; (8005574 <pvPortMalloc+0x188>)
 800546c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800546e:	4b41      	ldr	r3, [pc, #260]	; (8005574 <pvPortMalloc+0x188>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005474:	e004      	b.n	8005480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d903      	bls.n	8005492 <pvPortMalloc+0xa6>
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f1      	bne.n	8005476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005492:	4b35      	ldr	r3, [pc, #212]	; (8005568 <pvPortMalloc+0x17c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	429a      	cmp	r2, r3
 800549a:	d04c      	beq.n	8005536 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2208      	movs	r2, #8
 80054a2:	4413      	add	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	2308      	movs	r3, #8
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d920      	bls.n	8005500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <pvPortMalloc+0xfc>
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e7fe      	b.n	80054e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054fa:	69b8      	ldr	r0, [r7, #24]
 80054fc:	f000 f8fc 	bl	80056f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <pvPortMalloc+0x184>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	4a19      	ldr	r2, [pc, #100]	; (8005570 <pvPortMalloc+0x184>)
 800550c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800550e:	4b18      	ldr	r3, [pc, #96]	; (8005570 <pvPortMalloc+0x184>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b19      	ldr	r3, [pc, #100]	; (8005578 <pvPortMalloc+0x18c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d203      	bcs.n	8005522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <pvPortMalloc+0x184>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <pvPortMalloc+0x18c>)
 8005520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <pvPortMalloc+0x180>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	431a      	orrs	r2, r3
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005536:	f7ff f887 	bl	8004648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <pvPortMalloc+0x170>
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	b672      	cpsid	i
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	b662      	cpsie	i
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e7fe      	b.n	800555a <pvPortMalloc+0x16e>
	return pvReturn;
 800555c:	69fb      	ldr	r3, [r7, #28]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20003fbc 	.word	0x20003fbc
 800556c:	20003fc8 	.word	0x20003fc8
 8005570:	20003fc0 	.word	0x20003fc0
 8005574:	20003fb4 	.word	0x20003fb4
 8005578:	20003fc4 	.word	0x20003fc4

0800557c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d04a      	beq.n	8005624 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800558e:	2308      	movs	r3, #8
 8005590:	425b      	negs	r3, r3
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4413      	add	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b22      	ldr	r3, [pc, #136]	; (800562c <vPortFree+0xb0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4013      	ands	r3, r2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <vPortFree+0x46>
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	b672      	cpsid	i
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	b662      	cpsie	i
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e7fe      	b.n	80055c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <vPortFree+0x66>
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	b672      	cpsid	i
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	b662      	cpsie	i
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	e7fe      	b.n	80055e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <vPortFree+0xb0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d019      	beq.n	8005624 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <vPortFree+0xb0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005608:	f7ff f810 	bl	800462c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <vPortFree+0xb4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4413      	add	r3, r2
 8005616:	4a06      	ldr	r2, [pc, #24]	; (8005630 <vPortFree+0xb4>)
 8005618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 f86c 	bl	80056f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005620:	f7ff f812 	bl	8004648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005624:	bf00      	nop
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20003fc8 	.word	0x20003fc8
 8005630:	20003fc0 	.word	0x20003fc0

08005634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800563a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800563e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005640:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <prvHeapInit+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3307      	adds	r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0307 	bic.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <prvHeapInit+0xac>)
 8005664:	4413      	add	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <prvHeapInit+0xb0>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <prvHeapInit+0xb0>)
 8005674:	2200      	movs	r2, #0
 8005676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4413      	add	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005680:	2208      	movs	r2, #8
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <prvHeapInit+0xb4>)
 8005694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <prvHeapInit+0xb4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2200      	movs	r2, #0
 800569c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <prvHeapInit+0xb4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvHeapInit+0xb4>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <prvHeapInit+0xb8>)
 80056c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <prvHeapInit+0xbc>)
 80056ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <prvHeapInit+0xc0>)
 80056ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	200003b4 	.word	0x200003b4
 80056e4:	20003fb4 	.word	0x20003fb4
 80056e8:	20003fbc 	.word	0x20003fbc
 80056ec:	20003fc4 	.word	0x20003fc4
 80056f0:	20003fc0 	.word	0x20003fc0
 80056f4:	20003fc8 	.word	0x20003fc8

080056f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005700:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <prvInsertBlockIntoFreeList+0xac>)
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e002      	b.n	800570c <prvInsertBlockIntoFreeList+0x14>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d8f7      	bhi.n	8005706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4413      	add	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d108      	bne.n	800573a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	441a      	add	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d118      	bne.n	8005780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d00d      	beq.n	8005776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e008      	b.n	8005788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e003      	b.n	8005788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d002      	beq.n	8005796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20003fb4 	.word	0x20003fb4
 80057a8:	20003fbc 	.word	0x20003fbc

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0d      	ldr	r6, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1ba4      	subs	r4, r4, r6
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2500      	movs	r5, #0
 80057b8:	42a5      	cmp	r5, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4e0b      	ldr	r6, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f000 f82c 	bl	800581c <_init>
 80057c4:	1ba4      	subs	r4, r4, r6
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2500      	movs	r5, #0
 80057ca:	42a5      	cmp	r5, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057d4:	4798      	blx	r3
 80057d6:	3501      	adds	r5, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057de:	4798      	blx	r3
 80057e0:	3501      	adds	r5, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08005970 	.word	0x08005970
 80057e8:	08005970 	.word	0x08005970
 80057ec:	08005970 	.word	0x08005970
 80057f0:	08005974 	.word	0x08005974

080057f4 <memcpy>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	1e43      	subs	r3, r0, #1
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005808:	e7f7      	b.n	80057fa <memcpy+0x6>

0800580a <memset>:
 800580a:	4402      	add	r2, r0
 800580c:	4603      	mov	r3, r0
 800580e:	4293      	cmp	r3, r2
 8005810:	d100      	bne.n	8005814 <memset+0xa>
 8005812:	4770      	bx	lr
 8005814:	f803 1b01 	strb.w	r1, [r3], #1
 8005818:	e7f9      	b.n	800580e <memset+0x4>
	...

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
