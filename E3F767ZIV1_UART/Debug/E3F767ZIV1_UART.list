
E3F767ZIV1_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a3c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c54  08004c54  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000030  08004c8c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08004c8c  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ad0  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028de  00000000  00000000  00034b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  000385e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a03  00000000  00000000  00039678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1fe  00000000  00000000  0006207b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001000ac  00000000  00000000  00070279  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  001703a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	08004c1c 	.word	0x08004c1c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	08004c1c 	.word	0x08004c1c

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <__aeabi_uldivmod>:
 800024c:	b953      	cbnz	r3, 8000264 <__aeabi_uldivmod+0x18>
 800024e:	b94a      	cbnz	r2, 8000264 <__aeabi_uldivmod+0x18>
 8000250:	2900      	cmp	r1, #0
 8000252:	bf08      	it	eq
 8000254:	2800      	cmpeq	r0, #0
 8000256:	bf1c      	itt	ne
 8000258:	f04f 31ff 	movne.w	r1, #4294967295
 800025c:	f04f 30ff 	movne.w	r0, #4294967295
 8000260:	f000 b972 	b.w	8000548 <__aeabi_idiv0>
 8000264:	f1ad 0c08 	sub.w	ip, sp, #8
 8000268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800026c:	f000 f806 	bl	800027c <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4770      	bx	lr

0800027c <__udivmoddi4>:
 800027c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000280:	9e08      	ldr	r6, [sp, #32]
 8000282:	4604      	mov	r4, r0
 8000284:	4688      	mov	r8, r1
 8000286:	2b00      	cmp	r3, #0
 8000288:	d14b      	bne.n	8000322 <__udivmoddi4+0xa6>
 800028a:	428a      	cmp	r2, r1
 800028c:	4615      	mov	r5, r2
 800028e:	d967      	bls.n	8000360 <__udivmoddi4+0xe4>
 8000290:	fab2 f282 	clz	r2, r2
 8000294:	b14a      	cbz	r2, 80002aa <__udivmoddi4+0x2e>
 8000296:	f1c2 0720 	rsb	r7, r2, #32
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	fa20 f707 	lsr.w	r7, r0, r7
 80002a2:	4095      	lsls	r5, r2
 80002a4:	ea47 0803 	orr.w	r8, r7, r3
 80002a8:	4094      	lsls	r4, r2
 80002aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b4:	fa1f fc85 	uxth.w	ip, r5
 80002b8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c0:	fb07 f10c 	mul.w	r1, r7, ip
 80002c4:	4299      	cmp	r1, r3
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x60>
 80002c8:	18eb      	adds	r3, r5, r3
 80002ca:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ce:	f080 811b 	bcs.w	8000508 <__udivmoddi4+0x28c>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 8118 	bls.w	8000508 <__udivmoddi4+0x28c>
 80002d8:	3f02      	subs	r7, #2
 80002da:	442b      	add	r3, r5
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f0:	45a4      	cmp	ip, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x8c>
 80002f4:	192c      	adds	r4, r5, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x290>
 80002fe:	45a4      	cmp	ip, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x290>
 8000304:	3802      	subs	r0, #2
 8000306:	442c      	add	r4, r5
 8000308:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800030c:	eba4 040c 	sub.w	r4, r4, ip
 8000310:	2700      	movs	r7, #0
 8000312:	b11e      	cbz	r6, 800031c <__udivmoddi4+0xa0>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c6 4300 	strd	r4, r3, [r6]
 800031c:	4639      	mov	r1, r7
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xbe>
 8000326:	2e00      	cmp	r6, #0
 8000328:	f000 80eb 	beq.w	8000502 <__udivmoddi4+0x286>
 800032c:	2700      	movs	r7, #0
 800032e:	e9c6 0100 	strd	r0, r1, [r6]
 8000332:	4638      	mov	r0, r7
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f783 	clz	r7, r3
 800033e:	2f00      	cmp	r7, #0
 8000340:	d147      	bne.n	80003d2 <__udivmoddi4+0x156>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd0>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2c4>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	4698      	mov	r8, r3
 8000356:	2e00      	cmp	r6, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa0>
 800035a:	e9c6 4800 	strd	r4, r8, [r6]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa0>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xe8>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 808f 	bne.w	800048c <__udivmoddi4+0x210>
 800036e:	1b49      	subs	r1, r1, r5
 8000370:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000374:	fa1f f885 	uxth.w	r8, r5
 8000378:	2701      	movs	r7, #1
 800037a:	fbb1 fcfe 	udiv	ip, r1, lr
 800037e:	0c23      	lsrs	r3, r4, #16
 8000380:	fb0e 111c 	mls	r1, lr, ip, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb08 f10c 	mul.w	r1, r8, ip
 800038c:	4299      	cmp	r1, r3
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x124>
 8000390:	18eb      	adds	r3, r5, r3
 8000392:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x122>
 8000398:	4299      	cmp	r1, r3
 800039a:	f200 80cd 	bhi.w	8000538 <__udivmoddi4+0x2bc>
 800039e:	4684      	mov	ip, r0
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	b2a3      	uxth	r3, r4
 80003a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b0:	fb08 f800 	mul.w	r8, r8, r0
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x14c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x14a>
 80003c0:	45a0      	cmp	r8, r4
 80003c2:	f200 80b6 	bhi.w	8000532 <__udivmoddi4+0x2b6>
 80003c6:	4618      	mov	r0, r3
 80003c8:	eba4 0408 	sub.w	r4, r4, r8
 80003cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d0:	e79f      	b.n	8000312 <__udivmoddi4+0x96>
 80003d2:	f1c7 0c20 	rsb	ip, r7, #32
 80003d6:	40bb      	lsls	r3, r7
 80003d8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003dc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e0:	fa01 f407 	lsl.w	r4, r1, r7
 80003e4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f0:	4325      	orrs	r5, r4
 80003f2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f6:	0c2c      	lsrs	r4, r5, #16
 80003f8:	fb08 3319 	mls	r3, r8, r9, r3
 80003fc:	fa1f fa8e 	uxth.w	sl, lr
 8000400:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000404:	fb09 f40a 	mul.w	r4, r9, sl
 8000408:	429c      	cmp	r4, r3
 800040a:	fa02 f207 	lsl.w	r2, r2, r7
 800040e:	fa00 f107 	lsl.w	r1, r0, r7
 8000412:	d90b      	bls.n	800042c <__udivmoddi4+0x1b0>
 8000414:	eb1e 0303 	adds.w	r3, lr, r3
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	f080 8087 	bcs.w	800052e <__udivmoddi4+0x2b2>
 8000420:	429c      	cmp	r4, r3
 8000422:	f240 8084 	bls.w	800052e <__udivmoddi4+0x2b2>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4473      	add	r3, lr
 800042c:	1b1b      	subs	r3, r3, r4
 800042e:	b2ad      	uxth	r5, r5
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3310 	mls	r3, r8, r0, r3
 8000438:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800043c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000440:	45a2      	cmp	sl, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x1da>
 8000444:	eb1e 0404 	adds.w	r4, lr, r4
 8000448:	f100 33ff 	add.w	r3, r0, #4294967295
 800044c:	d26b      	bcs.n	8000526 <__udivmoddi4+0x2aa>
 800044e:	45a2      	cmp	sl, r4
 8000450:	d969      	bls.n	8000526 <__udivmoddi4+0x2aa>
 8000452:	3802      	subs	r0, #2
 8000454:	4474      	add	r4, lr
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	eba4 040a 	sub.w	r4, r4, sl
 8000462:	454c      	cmp	r4, r9
 8000464:	46c2      	mov	sl, r8
 8000466:	464b      	mov	r3, r9
 8000468:	d354      	bcc.n	8000514 <__udivmoddi4+0x298>
 800046a:	d051      	beq.n	8000510 <__udivmoddi4+0x294>
 800046c:	2e00      	cmp	r6, #0
 800046e:	d069      	beq.n	8000544 <__udivmoddi4+0x2c8>
 8000470:	ebb1 050a 	subs.w	r5, r1, sl
 8000474:	eb64 0403 	sbc.w	r4, r4, r3
 8000478:	fa04 fc0c 	lsl.w	ip, r4, ip
 800047c:	40fd      	lsrs	r5, r7
 800047e:	40fc      	lsrs	r4, r7
 8000480:	ea4c 0505 	orr.w	r5, ip, r5
 8000484:	e9c6 5400 	strd	r5, r4, [r6]
 8000488:	2700      	movs	r7, #0
 800048a:	e747      	b.n	800031c <__udivmoddi4+0xa0>
 800048c:	f1c2 0320 	rsb	r3, r2, #32
 8000490:	fa20 f703 	lsr.w	r7, r0, r3
 8000494:	4095      	lsls	r5, r2
 8000496:	fa01 f002 	lsl.w	r0, r1, r2
 800049a:	fa21 f303 	lsr.w	r3, r1, r3
 800049e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a2:	4338      	orrs	r0, r7
 80004a4:	0c01      	lsrs	r1, r0, #16
 80004a6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004aa:	fa1f f885 	uxth.w	r8, r5
 80004ae:	fb0e 3317 	mls	r3, lr, r7, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb07 f308 	mul.w	r3, r7, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	fa04 f402 	lsl.w	r4, r4, r2
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x256>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004c8:	d22f      	bcs.n	800052a <__udivmoddi4+0x2ae>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d92d      	bls.n	800052a <__udivmoddi4+0x2ae>
 80004ce:	3f02      	subs	r7, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	1acb      	subs	r3, r1, r3
 80004d4:	b281      	uxth	r1, r0
 80004d6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004da:	fb0e 3310 	mls	r3, lr, r0, r3
 80004de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e2:	fb00 f308 	mul.w	r3, r0, r8
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x27e>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f0:	d217      	bcs.n	8000522 <__udivmoddi4+0x2a6>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d915      	bls.n	8000522 <__udivmoddi4+0x2a6>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000500:	e73b      	b.n	800037a <__udivmoddi4+0xfe>
 8000502:	4637      	mov	r7, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e709      	b.n	800031c <__udivmoddi4+0xa0>
 8000508:	4607      	mov	r7, r0
 800050a:	e6e7      	b.n	80002dc <__udivmoddi4+0x60>
 800050c:	4618      	mov	r0, r3
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x8c>
 8000510:	4541      	cmp	r1, r8
 8000512:	d2ab      	bcs.n	800046c <__udivmoddi4+0x1f0>
 8000514:	ebb8 0a02 	subs.w	sl, r8, r2
 8000518:	eb69 020e 	sbc.w	r2, r9, lr
 800051c:	3801      	subs	r0, #1
 800051e:	4613      	mov	r3, r2
 8000520:	e7a4      	b.n	800046c <__udivmoddi4+0x1f0>
 8000522:	4660      	mov	r0, ip
 8000524:	e7e9      	b.n	80004fa <__udivmoddi4+0x27e>
 8000526:	4618      	mov	r0, r3
 8000528:	e795      	b.n	8000456 <__udivmoddi4+0x1da>
 800052a:	4667      	mov	r7, ip
 800052c:	e7d1      	b.n	80004d2 <__udivmoddi4+0x256>
 800052e:	4681      	mov	r9, r0
 8000530:	e77c      	b.n	800042c <__udivmoddi4+0x1b0>
 8000532:	3802      	subs	r0, #2
 8000534:	442c      	add	r4, r5
 8000536:	e747      	b.n	80003c8 <__udivmoddi4+0x14c>
 8000538:	f1ac 0c02 	sub.w	ip, ip, #2
 800053c:	442b      	add	r3, r5
 800053e:	e72f      	b.n	80003a0 <__udivmoddi4+0x124>
 8000540:	4638      	mov	r0, r7
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xda>
 8000544:	4637      	mov	r7, r6
 8000546:	e6e9      	b.n	800031c <__udivmoddi4+0xa0>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f8f8 	bl	8000746 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	2000      	movs	r0, #0
 8000558:	f004 fa18 	bl	800498c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f004 f892 	bl	8004684 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	2000004c 	.word	0x2000004c

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000004c 	.word	0x2000004c

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d005      	beq.n	80005ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_Delay+0x40>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ce:	bf00      	nop
 80005d0:	f7ff ffde 	bl	8000590 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d8f7      	bhi.n	80005d0 <HAL_Delay+0x28>
  {
  }
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000

080005ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <__NVIC_SetPriorityGrouping+0x40>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	4313      	orrs	r3, r2
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x40>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00
 8000630:	05fa0000 	.word	0x05fa0000

08000634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <__NVIC_GetPriorityGrouping+0x18>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	f003 0307 	and.w	r3, r3, #7
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	db0b      	blt.n	800067a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f003 021f 	and.w	r2, r3, #31
 8000668:	4907      	ldr	r1, [pc, #28]	; (8000688 <__NVIC_EnableIRQ+0x38>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	095b      	lsrs	r3, r3, #5
 8000670:	2001      	movs	r0, #1
 8000672:	fa00 f202 	lsl.w	r2, r0, r2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff4c 	bl	80005ec <__NVIC_SetPriorityGrouping>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800076e:	f7ff ff61 	bl	8000634 <__NVIC_GetPriorityGrouping>
 8000772:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	6978      	ldr	r0, [r7, #20]
 800077a:	f7ff ffb1 	bl	80006e0 <NVIC_EncodePriority>
 800077e:	4602      	mov	r2, r0
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff80 	bl	800068c <__NVIC_SetPriority>
}
 800078c:	bf00      	nop
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff54 	bl	8000650 <__NVIC_EnableIRQ>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d004      	beq.n	80007ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00c      	b.n	80007e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2205      	movs	r2, #5
 80007d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f022 0201 	bic.w	r2, r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000804:	4ba9      	ldr	r3, [pc, #676]	; (8000aac <HAL_ETH_Init+0x2b8>)
 8000806:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e183      	b.n	8000b22 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d106      	bne.n	8000834 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f003 ff4c 	bl	80046cc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000834:	4b9e      	ldr	r3, [pc, #632]	; (8000ab0 <HAL_ETH_Init+0x2bc>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a9d      	ldr	r2, [pc, #628]	; (8000ab0 <HAL_ETH_Init+0x2bc>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
 8000840:	4b9b      	ldr	r3, [pc, #620]	; (8000ab0 <HAL_ETH_Init+0x2bc>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800084c:	4b99      	ldr	r3, [pc, #612]	; (8000ab4 <HAL_ETH_Init+0x2c0>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4a98      	ldr	r2, [pc, #608]	; (8000ab4 <HAL_ETH_Init+0x2c0>)
 8000852:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000856:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000858:	4b96      	ldr	r3, [pc, #600]	; (8000ab4 <HAL_ETH_Init+0x2c0>)
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	4994      	ldr	r1, [pc, #592]	; (8000ab4 <HAL_ETH_Init+0x2c0>)
 8000862:	4313      	orrs	r3, r2
 8000864:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800087e:	f7ff fe87 	bl	8000590 <HAL_GetTick>
 8000882:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000884:	e011      	b.n	80008aa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000886:	f7ff fe83 	bl	8000590 <HAL_GetTick>
 800088a:	4602      	mov	r2, r0
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000894:	d909      	bls.n	80008aa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2203      	movs	r2, #3
 800089a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e13b      	b.n	8000b22 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e4      	bne.n	8000886 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f023 031c 	bic.w	r3, r3, #28
 80008ca:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80008cc:	f001 fb90 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 80008d0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4a78      	ldr	r2, [pc, #480]	; (8000ab8 <HAL_ETH_Init+0x2c4>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d908      	bls.n	80008ec <HAL_ETH_Init+0xf8>
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	4a77      	ldr	r2, [pc, #476]	; (8000abc <HAL_ETH_Init+0x2c8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d804      	bhi.n	80008ec <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	e027      	b.n	800093c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	4a73      	ldr	r2, [pc, #460]	; (8000abc <HAL_ETH_Init+0x2c8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d908      	bls.n	8000906 <HAL_ETH_Init+0x112>
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	4a72      	ldr	r2, [pc, #456]	; (8000ac0 <HAL_ETH_Init+0x2cc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d804      	bhi.n	8000906 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f043 030c 	orr.w	r3, r3, #12
 8000902:	61fb      	str	r3, [r7, #28]
 8000904:	e01a      	b.n	800093c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	4a6d      	ldr	r2, [pc, #436]	; (8000ac0 <HAL_ETH_Init+0x2cc>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d903      	bls.n	8000916 <HAL_ETH_Init+0x122>
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	4a6c      	ldr	r2, [pc, #432]	; (8000ac4 <HAL_ETH_Init+0x2d0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d911      	bls.n	800093a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	4a6a      	ldr	r2, [pc, #424]	; (8000ac4 <HAL_ETH_Init+0x2d0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d908      	bls.n	8000930 <HAL_ETH_Init+0x13c>
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4a69      	ldr	r2, [pc, #420]	; (8000ac8 <HAL_ETH_Init+0x2d4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d804      	bhi.n	8000930 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	61fb      	str	r3, [r7, #28]
 800092e:	e005      	b.n	800093c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	e000      	b.n	800093c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800093a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f956 	bl	8000bfc <HAL_ETH_WritePHYRegister>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00b      	beq.n	800096e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800095a:	6939      	ldr	r1, [r7, #16]
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f9b3 	bl	8000cc8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e0d9      	b.n	8000b22 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800096e:	20ff      	movs	r0, #255	; 0xff
 8000970:	f7ff fe1a 	bl	80005a8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80a7 	beq.w	8000acc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800097e:	f7ff fe07 	bl	8000590 <HAL_GetTick>
 8000982:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	461a      	mov	r2, r3
 800098a:	2101      	movs	r1, #1
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f8cd 	bl	8000b2c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000992:	f7ff fdfd 	bl	8000590 <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	f241 3288 	movw	r2, #5000	; 0x1388
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d90f      	bls.n	80009c4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009a8:	6939      	ldr	r1, [r7, #16]
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f98c 	bl	8000cc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009c0:	2303      	movs	r3, #3
 80009c2:	e0ae      	b.n	8000b22 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0da      	beq.n	8000984 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80009ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d2:	2100      	movs	r1, #0
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f911 	bl	8000bfc <HAL_ETH_WritePHYRegister>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00b      	beq.n	80009f8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80009e4:	6939      	ldr	r1, [r7, #16]
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f96e 	bl	8000cc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80009f4:	2301      	movs	r3, #1
 80009f6:	e094      	b.n	8000b22 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80009f8:	f7ff fdca 	bl	8000590 <HAL_GetTick>
 80009fc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	461a      	mov	r2, r3
 8000a04:	2101      	movs	r1, #1
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f890 	bl	8000b2c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a0c:	f7ff fdc0 	bl	8000590 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d90f      	bls.n	8000a3e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a22:	6939      	ldr	r1, [r7, #16]
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f94f 	bl	8000cc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e071      	b.n	8000b22 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f003 0320 	and.w	r3, r3, #32
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0da      	beq.n	80009fe <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	211f      	movs	r1, #31
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f86b 	bl	8000b2c <HAL_ETH_ReadPHYRegister>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00b      	beq.n	8000a74 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 f930 	bl	8000cc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a70:	2301      	movs	r3, #1
 8000a72:	e056      	b.n	8000b22 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	e002      	b.n	8000a8e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	e037      	b.n	8000b10 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	e032      	b.n	8000b10 <HAL_ETH_Init+0x31c>
 8000aaa:	bf00      	nop
 8000aac:	03938700 	.word	0x03938700
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	01312cff 	.word	0x01312cff
 8000abc:	02160ebf 	.word	0x02160ebf
 8000ac0:	039386ff 	.word	0x039386ff
 8000ac4:	05f5e0ff 	.word	0x05f5e0ff
 8000ac8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f889 	bl	8000bfc <HAL_ETH_WritePHYRegister>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000af4:	6939      	ldr	r1, [r7, #16]
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f8e6 	bl	8000cc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e00c      	b.n	8000b22 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b08:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b0c:	f7ff fd4c 	bl	80005a8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b10:	6939      	ldr	r1, [r7, #16]
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f8d8 	bl	8000cc8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop

08000b2c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	460b      	mov	r3, r1
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b82      	cmp	r3, #130	; 0x82
 8000b4c:	d101      	bne.n	8000b52 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e050      	b.n	8000bf4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2282      	movs	r2, #130	; 0x82
 8000b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f003 031c 	and.w	r3, r3, #28
 8000b68:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	8a1b      	ldrh	r3, [r3, #16]
 8000b6e:	02db      	lsls	r3, r3, #11
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b78:	897b      	ldrh	r3, [r7, #10]
 8000b7a:	019b      	lsls	r3, r3, #6
 8000b7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f023 0302 	bic.w	r3, r3, #2
 8000b8c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000b9e:	f7ff fcf7 	bl	8000590 <HAL_GetTick>
 8000ba2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000ba4:	e015      	b.n	8000bd2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000ba6:	f7ff fcf3 	bl	8000590 <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb4:	d309      	bcc.n	8000bca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e014      	b.n	8000bf4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e4      	bne.n	8000ba6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	460b      	mov	r3, r1
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b42      	cmp	r3, #66	; 0x42
 8000c1c:	d101      	bne.n	8000c22 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e04e      	b.n	8000cc0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2242      	movs	r2, #66	; 0x42
 8000c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 031c 	and.w	r3, r3, #28
 8000c38:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	8a1b      	ldrh	r3, [r3, #16]
 8000c3e:	02db      	lsls	r3, r3, #11
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c48:	897b      	ldrh	r3, [r7, #10]
 8000c4a:	019b      	lsls	r3, r3, #6
 8000c4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c78:	f7ff fc8a 	bl	8000590 <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c7e:	e015      	b.n	8000cac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c80:	f7ff fc86 	bl	8000590 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8e:	d309      	bcc.n	8000ca4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e00d      	b.n	8000cc0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1e4      	bne.n	8000c80 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0b0      	sub	sp, #192	; 0xc0
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d103      	bne.n	8000d16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
 8000d14:	e001      	b.n	8000d1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000d34:	2340      	movs	r3, #64	; 0x40
 8000d36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000da0:	4bab      	ldr	r3, [pc, #684]	; (8001050 <ETH_MACDMAConfig+0x388>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000dac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000db0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000db4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000dba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000dbe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000dc2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000dc8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000dcc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000dd0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000dd4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000dd8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000ddc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000dde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000df0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fbd3 	bl	80005a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000e14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000e1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000e20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000e26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000e2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000e30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000e38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fbae 	bl	80005a8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000e5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000e68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000e74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000e8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000e92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000e98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000e9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000ea4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000eb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff fb6f 	bl	80005a8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ed2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000ed4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff fb5a 	bl	80005a8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000efc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f06:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f10:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000f22:	2304      	movs	r3, #4
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <ETH_MACDMAConfig+0x38c>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000f66:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000f68:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000f6a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000f6c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000f6e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000f70:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000f72:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8000f74:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8000f76:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8000f78:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8000f7a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8000f7e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8000f82:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8000f86:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000f88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fa0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000faa:	4413      	add	r3, r2
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff faf8 	bl	80005a8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fc6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000fcc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8000fd0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8000fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8000fd4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8000fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8000fd8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8000fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fdc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8000fde:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8000fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8000fe2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ff0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fad1 	bl	80005a8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001012:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d10d      	bne.n	8001038 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f241 031c 	movw	r3, #4124	; 0x101c
 8001024:	4413      	add	r3, r2
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6811      	ldr	r1, [r2, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <ETH_MACDMAConfig+0x390>)
 800102e:	431a      	orrs	r2, r3
 8001030:	f241 031c 	movw	r3, #4124	; 0x101c
 8001034:	440b      	add	r3, r1
 8001036:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	461a      	mov	r2, r3
 800103e:	2100      	movs	r1, #0
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f80b 	bl	800105c <ETH_MACAddressConfig>
}
 8001046:	bf00      	nop
 8001048:	37c0      	adds	r7, #192	; 0xc0
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	ff20810f 	.word	0xff20810f
 8001054:	f8de3f23 	.word	0xf8de3f23
 8001058:	00010040 	.word	0x00010040

0800105c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3305      	adds	r3, #5
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	3204      	adds	r2, #4
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	4313      	orrs	r3, r2
 8001078:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <ETH_MACAddressConfig+0x68>)
 800107e:	4413      	add	r3, r2
 8001080:	461a      	mov	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3303      	adds	r3, #3
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	061a      	lsls	r2, r3, #24
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3302      	adds	r3, #2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <ETH_MACAddressConfig+0x6c>)
 80010ae:	4413      	add	r3, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	6013      	str	r3, [r2, #0]
}
 80010b6:	bf00      	nop
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40028040 	.word	0x40028040
 80010c8:	40028044 	.word	0x40028044

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e175      	b.n	80013d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8164 	bne.w	80013d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x4e>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b12      	cmp	r3, #18
 8001118:	d123      	bne.n	8001162 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	69b9      	ldr	r1, [r7, #24]
 800115e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0203 	and.w	r2, r3, #3
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0xea>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80be 	beq.w	80013d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_GPIO_Init+0x320>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a64      	ldr	r2, [pc, #400]	; (80013ec <HAL_GPIO_Init+0x320>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_GPIO_Init+0x320>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800126e:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <HAL_GPIO_Init+0x324>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_GPIO_Init+0x328>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d037      	beq.n	800130a <HAL_GPIO_Init+0x23e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a56      	ldr	r2, [pc, #344]	; (80013f8 <HAL_GPIO_Init+0x32c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d031      	beq.n	8001306 <HAL_GPIO_Init+0x23a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a55      	ldr	r2, [pc, #340]	; (80013fc <HAL_GPIO_Init+0x330>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02b      	beq.n	8001302 <HAL_GPIO_Init+0x236>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a54      	ldr	r2, [pc, #336]	; (8001400 <HAL_GPIO_Init+0x334>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x232>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a53      	ldr	r2, [pc, #332]	; (8001404 <HAL_GPIO_Init+0x338>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x22e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x33c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x22a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x340>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x344>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x222>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x348>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x21e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x34c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x21a>
 80012e2:	2309      	movs	r3, #9
 80012e4:	e012      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012e6:	230a      	movs	r3, #10
 80012e8:	e010      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e00e      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00c      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012f2:	2306      	movs	r3, #6
 80012f4:	e00a      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x240>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x240>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x240>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x240>
 800130a:	2300      	movs	r3, #0
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800131c:	4934      	ldr	r1, [pc, #208]	; (80013f0 <HAL_GPIO_Init+0x324>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <HAL_GPIO_Init+0x350>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <HAL_GPIO_Init+0x350>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_GPIO_Init+0x350>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001378:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_GPIO_Init+0x350>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_GPIO_Init+0x350>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_GPIO_Init+0x350>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_GPIO_Init+0x350>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <HAL_GPIO_Init+0x350>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f67f ae86 	bls.w	80010ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	3724      	adds	r7, #36	; 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40021400 	.word	0x40021400
 800140c:	40021800 	.word	0x40021800
 8001410:	40021c00 	.word	0x40021c00
 8001414:	40022000 	.word	0x40022000
 8001418:	40022400 	.word	0x40022400
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001454:	b08f      	sub	sp, #60	; 0x3c
 8001456:	af0a      	add	r7, sp, #40	; 0x28
 8001458:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e10a      	b.n	800167a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f003 fa2b 	bl	80048d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fc68 	bl	8003d60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	687e      	ldr	r6, [r7, #4]
 8001498:	466d      	mov	r5, sp
 800149a:	f106 0410 	add.w	r4, r6, #16
 800149e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ae:	1d33      	adds	r3, r6, #4
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f002 fbfc 	bl	8003cb0 <USB_CoreInit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2202      	movs	r2, #2
 80014c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0d7      	b.n	800167a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fc56 	bl	8003d82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e04a      	b.n	8001572 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	333d      	adds	r3, #61	; 0x3d
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	333c      	adds	r3, #60	; 0x3c
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b298      	uxth	r0, r3
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3342      	adds	r3, #66	; 0x42
 8001518:	4602      	mov	r2, r0
 800151a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	333f      	adds	r3, #63	; 0x3f
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3344      	adds	r3, #68	; 0x44
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3348      	adds	r3, #72	; 0x48
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3350      	adds	r3, #80	; 0x50
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3af      	bcc.n	80014dc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e044      	b.n	800160c <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3b5      	bcc.n	8001582 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	687e      	ldr	r6, [r7, #4]
 800161e:	466d      	mov	r5, sp
 8001620:	f106 0410 	add.w	r4, r6, #16
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001630:	e885 0003 	stmia.w	r5, {r0, r1}
 8001634:	1d33      	adds	r3, r6, #4
 8001636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f002 fbcd 	bl	8003dd8 <USB_DevInit>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e014      	b.n	800167a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f80b 	bl	8001684 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fd8d 	bl	8004192 <USB_DevDisconnect>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	10000003 	.word	0x10000003

080016cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_PWREx_EnableOverDrive+0x98>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <HAL_PWREx_EnableOverDrive+0x98>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_PWREx_EnableOverDrive+0x98>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800171a:	f7fe ff39 	bl	8000590 <HAL_GetTick>
 800171e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001720:	e009      	b.n	8001736 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001722:	f7fe ff35 	bl	8000590 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001730:	d901      	bls.n	8001736 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e022      	b.n	800177c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001742:	d1ee      	bne.n	8001722 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_PWREx_EnableOverDrive+0x9c>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001750:	f7fe ff1e 	bl	8000590 <HAL_GetTick>
 8001754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001756:	e009      	b.n	800176c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001758:	f7fe ff1a 	bl	8000590 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001766:	d901      	bls.n	800176c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e007      	b.n	800177c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_PWREx_EnableOverDrive+0x9c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001778:	d1ee      	bne.n	8001758 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000

0800178c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e25e      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b0:	4b96      	ldr	r3, [pc, #600]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d00c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017bc:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d112      	bne.n	80017ee <HAL_RCC_OscConfig+0x62>
 80017c8:	4b90      	ldr	r3, [pc, #576]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d06c      	beq.n	80018bc <HAL_RCC_OscConfig+0x130>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d168      	bne.n	80018bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e238      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x7a>
 80017f8:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a83      	ldr	r2, [pc, #524]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e02e      	b.n	8001864 <HAL_RCC_OscConfig+0xd8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x9c>
 800180e:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a7e      	ldr	r2, [pc, #504]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7b      	ldr	r2, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xd8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0xc0>
 8001832:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a75      	ldr	r2, [pc, #468]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xd8>
 800184c:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6b      	ldr	r2, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7fe fe90 	bl	8000590 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001874:	f7fe fe8c 	bl	8000590 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1ec      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xe8>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7fe fe7c 	bl	8000590 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189c:	f7fe fe78 	bl	8000590 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1d8      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x110>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d069      	beq.n	800199e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d11c      	bne.n	800191c <HAL_RCC_OscConfig+0x190>
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x17a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1ac      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	493d      	ldr	r1, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	e040      	b.n	800199e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7fe fe2e 	bl	8000590 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001938:	f7fe fe2a 	bl	8000590 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e18a      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4929      	ldr	r1, [pc, #164]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7fe fe0a 	bl	8000590 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7fe fe06 	bl	8000590 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e166      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d038      	beq.n	8001a1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d019      	beq.n	80019e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7fe fde7 	bl	8000590 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c6:	f7fe fde3 	bl	8000590 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e143      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80019da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x23a>
 80019e4:	e01a      	b.n	8001a1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7fe fdcd 	bl	8000590 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f7fe fdc9 	bl	8000590 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d903      	bls.n	8001a10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e129      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
 8001a0c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b95      	ldr	r3, [pc, #596]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ee      	bne.n	80019fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a4 	beq.w	8001b72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10d      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a8b      	ldr	r2, [pc, #556]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a52:	4b86      	ldr	r3, [pc, #536]	; (8001c6c <HAL_RCC_OscConfig+0x4e0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a5e:	4b83      	ldr	r3, [pc, #524]	; (8001c6c <HAL_RCC_OscConfig+0x4e0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a82      	ldr	r2, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x4e0>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6a:	f7fe fd91 	bl	8000590 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7fe fd8d 	bl	8000590 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0ed      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a84:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <HAL_RCC_OscConfig+0x4e0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x31a>
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a72      	ldr	r2, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	e02d      	b.n	8001b02 <HAL_RCC_OscConfig+0x376>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x33c>
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a6d      	ldr	r2, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac6:	e01c      	b.n	8001b02 <HAL_RCC_OscConfig+0x376>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x35e>
 8001ad0:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad4:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6713      	str	r3, [r2, #112]	; 0x70
 8001adc:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a61      	ldr	r2, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	e00b      	b.n	8001b02 <HAL_RCC_OscConfig+0x376>
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001afc:	f023 0304 	bic.w	r3, r3, #4
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d015      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7fe fd41 	bl	8000590 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe fd3d 	bl	8000590 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e09b      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ee      	beq.n	8001b12 <HAL_RCC_OscConfig+0x386>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7fe fd2b 	bl	8000590 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7fe fd27 	bl	8000590 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e085      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ee      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d071      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d069      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d14b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fcf9 	bl	8000590 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7fe fcf5 	bl	8000590 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e055      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	019b      	lsls	r3, r3, #6
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	061b      	lsls	r3, r3, #24
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	071b      	lsls	r3, r3, #28
 8001bec:	491e      	ldr	r1, [pc, #120]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fcc7 	bl	8000590 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c06:	f7fe fcc3 	bl	8000590 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e023      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x47a>
 8001c24:	e01b      	b.n	8001c5e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7fe fcad 	bl	8000590 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7fe fca9 	bl	8000590 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e009      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x4dc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x4ae>
 8001c58:	e001      	b.n	8001c5e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0ce      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b69      	ldr	r3, [pc, #420]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	4964      	ldr	r1, [pc, #400]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0b6      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd0:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce8:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	494c      	ldr	r1, [pc, #304]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d040      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e07d      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e071      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e069      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d64:	f7fe fc14 	bl	8000590 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7fe fc10 	bl	8000590 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e051      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d210      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 020f 	bic.w	r2, r3, #15
 8001daa:	4921      	ldr	r1, [pc, #132]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e030      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4915      	ldr	r1, [pc, #84]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	490d      	ldr	r1, [pc, #52]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e02:	f000 f81d 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001e06:	4601      	mov	r1, r0
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	fa21 f303 	lsr.w	r3, r1, r3
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_RCC_ClockConfig+0x1cc>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f002 fdb4 	bl	800498c <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08004c34 	.word	0x08004c34
 8001e3c:	2000002c 	.word	0x2000002c

08001e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e56:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d007      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x32>
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d008      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x38>
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 80b4 	bne.w	8001fd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e6e:	60bb      	str	r3, [r7, #8]
       break;
 8001e70:	e0b3      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e72:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e74:	60bb      	str	r3, [r7, #8]
      break;
 8001e76:	e0b0      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e82:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d04a      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8e:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	f04f 0400 	mov.w	r4, #0
 8001e98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	ea03 0501 	and.w	r5, r3, r1
 8001ea4:	ea04 0602 	and.w	r6, r4, r2
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	4632      	mov	r2, r6
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f04f 0400 	mov.w	r4, #0
 8001eb4:	0154      	lsls	r4, r2, #5
 8001eb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eba:	014b      	lsls	r3, r1, #5
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	1b49      	subs	r1, r1, r5
 8001ec2:	eb62 0206 	sbc.w	r2, r2, r6
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f04f 0400 	mov.w	r4, #0
 8001ece:	0194      	lsls	r4, r2, #6
 8001ed0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ed4:	018b      	lsls	r3, r1, #6
 8001ed6:	1a5b      	subs	r3, r3, r1
 8001ed8:	eb64 0402 	sbc.w	r4, r4, r2
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	00e2      	lsls	r2, r4, #3
 8001ee6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eea:	00d9      	lsls	r1, r3, #3
 8001eec:	460b      	mov	r3, r1
 8001eee:	4614      	mov	r4, r2
 8001ef0:	195b      	adds	r3, r3, r5
 8001ef2:	eb44 0406 	adc.w	r4, r4, r6
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	0262      	lsls	r2, r4, #9
 8001f00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f04:	0259      	lsls	r1, r3, #9
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f04f 0400 	mov.w	r4, #0
 8001f14:	461a      	mov	r2, r3
 8001f16:	4623      	mov	r3, r4
 8001f18:	f7fe f998 	bl	800024c <__aeabi_uldivmod>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e049      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	f04f 0400 	mov.w	r4, #0
 8001f2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	ea03 0501 	and.w	r5, r3, r1
 8001f3a:	ea04 0602 	and.w	r6, r4, r2
 8001f3e:	4629      	mov	r1, r5
 8001f40:	4632      	mov	r2, r6
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	f04f 0400 	mov.w	r4, #0
 8001f4a:	0154      	lsls	r4, r2, #5
 8001f4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f50:	014b      	lsls	r3, r1, #5
 8001f52:	4619      	mov	r1, r3
 8001f54:	4622      	mov	r2, r4
 8001f56:	1b49      	subs	r1, r1, r5
 8001f58:	eb62 0206 	sbc.w	r2, r2, r6
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f04f 0400 	mov.w	r4, #0
 8001f64:	0194      	lsls	r4, r2, #6
 8001f66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f6a:	018b      	lsls	r3, r1, #6
 8001f6c:	1a5b      	subs	r3, r3, r1
 8001f6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	00e2      	lsls	r2, r4, #3
 8001f7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f80:	00d9      	lsls	r1, r3, #3
 8001f82:	460b      	mov	r3, r1
 8001f84:	4614      	mov	r4, r2
 8001f86:	195b      	adds	r3, r3, r5
 8001f88:	eb44 0406 	adc.w	r4, r4, r6
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	02a2      	lsls	r2, r4, #10
 8001f96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f9a:	0299      	lsls	r1, r3, #10
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	f7fe f94d 	bl	800024c <__aeabi_uldivmod>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	60bb      	str	r3, [r7, #8]
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fd6:	60bb      	str	r3, [r7, #8]
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	68bb      	ldr	r3, [r7, #8]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	007a1200 	.word	0x007a1200

08001ff0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000002c 	.word	0x2000002c

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002010:	4601      	mov	r1, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	08004c44 	.word	0x08004c44

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002034:	f7ff ffdc 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002038:	4601      	mov	r1, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0b5b      	lsrs	r3, r3, #13
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	08004c44 	.word	0x08004c44

08002058 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	220f      	movs	r2, #15
 8002066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_RCC_GetClockConfig+0x60>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40023c00 	.word	0x40023c00

080020bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020ee:	6093      	str	r3, [r2, #8]
 80020f0:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	4964      	ldr	r1, [pc, #400]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d017      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	4959      	ldr	r1, [pc, #356]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002134:	d101      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d017      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002152:	4b4e      	ldr	r3, [pc, #312]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	494a      	ldr	r1, [pc, #296]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002170:	d101      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 808b 	beq.w	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a34      	ldr	r2, [pc, #208]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c4:	f7fe f9e4 	bl	8000590 <HAL_GetTick>
 80021c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021cc:	f7fe f9e0 	bl	8000590 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e38d      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d035      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d02e      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d114      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe f9a8 	bl	8000590 <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe f9a4 	bl	8000590 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e34f      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ee      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002272:	d111      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002282:	400b      	ands	r3, r1
 8002284:	4901      	ldr	r1, [pc, #4]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
 800228a:	e00b      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	0ffffcff 	.word	0x0ffffcff
 8002298:	4bb3      	ldr	r3, [pc, #716]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4ab2      	ldr	r2, [pc, #712]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022a2:	6093      	str	r3, [r2, #8]
 80022a4:	4bb0      	ldr	r3, [pc, #704]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	49ad      	ldr	r1, [pc, #692]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022c2:	4ba9      	ldr	r3, [pc, #676]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c8:	4aa7      	ldr	r2, [pc, #668]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022d2:	4ba5      	ldr	r3, [pc, #660]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	49a2      	ldr	r1, [pc, #648]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f0:	4b9d      	ldr	r3, [pc, #628]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fe:	499a      	ldr	r1, [pc, #616]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002312:	4b95      	ldr	r3, [pc, #596]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002320:	4991      	ldr	r1, [pc, #580]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002334:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002342:	4989      	ldr	r1, [pc, #548]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002356:	4b84      	ldr	r3, [pc, #528]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4980      	ldr	r1, [pc, #512]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002378:	4b7b      	ldr	r3, [pc, #492]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4978      	ldr	r1, [pc, #480]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239a:	4b73      	ldr	r3, [pc, #460]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	f023 020c 	bic.w	r2, r3, #12
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	496f      	ldr	r1, [pc, #444]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	4967      	ldr	r1, [pc, #412]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023de:	4b62      	ldr	r3, [pc, #392]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ec:	495e      	ldr	r1, [pc, #376]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	4956      	ldr	r1, [pc, #344]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002422:	4b51      	ldr	r3, [pc, #324]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002428:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	4945      	ldr	r1, [pc, #276]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002474:	493c      	ldr	r1, [pc, #240]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002496:	4934      	ldr	r1, [pc, #208]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d011      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b8:	492b      	ldr	r1, [pc, #172]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f8:	491b      	ldr	r1, [pc, #108]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800251c:	4912      	ldr	r1, [pc, #72]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002540:	4909      	ldr	r1, [pc, #36]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00f      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	e002      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	4985      	ldr	r1, [pc, #532]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002580:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002586:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002590:	497c      	ldr	r1, [pc, #496]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d005      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a6:	f040 80d6 	bne.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025aa:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a75      	ldr	r2, [pc, #468]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b6:	f7fd ffeb 	bl	8000590 <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025be:	f7fd ffe7 	bl	8000590 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b64      	cmp	r3, #100	; 0x64
 80025ca:	d901      	bls.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e194      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025d0:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d021      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11d      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025f0:	4b64      	ldr	r3, [pc, #400]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	019a      	lsls	r2, r3, #6
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	071b      	lsls	r3, r3, #28
 8002624:	4957      	ldr	r1, [pc, #348]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800264a:	2b00      	cmp	r3, #0
 800264c:	d02e      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002656:	d129      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266c:	0f1b      	lsrs	r3, r3, #28
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	019a      	lsls	r2, r3, #6
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	431a      	orrs	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	071b      	lsls	r3, r3, #28
 800268c:	493d      	ldr	r1, [pc, #244]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269a:	f023 021f 	bic.w	r2, r3, #31
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	3b01      	subs	r3, #1
 80026a4:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01d      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	0e1b      	lsrs	r3, r3, #24
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026c6:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026cc:	0f1b      	lsrs	r3, r3, #28
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	019a      	lsls	r2, r3, #6
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	4925      	ldr	r1, [pc, #148]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d011      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	019a      	lsls	r2, r3, #6
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	071b      	lsls	r3, r3, #28
 800271c:	4919      	ldr	r1, [pc, #100]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800272a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800272e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fd ff2e 	bl	8000590 <HAL_GetTick>
 8002734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002738:	f7fd ff2a 	bl	8000590 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0d7      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	f040 80cd 	bne.w	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a08      	ldr	r2, [pc, #32]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276a:	f7fd ff11 	bl	8000590 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002772:	f7fd ff0d 	bl	8000590 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b64      	cmp	r3, #100	; 0x64
 800277e:	d903      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0ba      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002784:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002794:	d0ed      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02e      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d12a      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027cc:	4b4d      	ldr	r3, [pc, #308]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	0f1b      	lsrs	r3, r3, #28
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	019a      	lsls	r2, r3, #6
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	061b      	lsls	r3, r3, #24
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	071b      	lsls	r3, r3, #28
 80027f2:	4944      	ldr	r1, [pc, #272]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027fa:	4b42      	ldr	r3, [pc, #264]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002800:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	493d      	ldr	r1, [pc, #244]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d022      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002828:	d11d      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	0e1b      	lsrs	r3, r3, #24
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	0f1b      	lsrs	r3, r3, #28
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	019a      	lsls	r2, r3, #6
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	071b      	lsls	r3, r3, #28
 800285e:	4929      	ldr	r1, [pc, #164]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d028      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	0e1b      	lsrs	r3, r3, #24
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	019a      	lsls	r2, r3, #6
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	071b      	lsls	r3, r3, #28
 80028a6:	4917      	ldr	r1, [pc, #92]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	4911      	ldr	r1, [pc, #68]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fd fe5e 	bl	8000590 <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028d8:	f7fd fe5a 	bl	8000590 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e007      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f6:	d1ef      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e01d      	b.n	8002956 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f815 	bl	800295e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 f986 	bl	8002c58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_TIM_Base_Start_IT+0x50>)
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d00b      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x42>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d007      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	00010007 	.word	0x00010007

080029c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0202 	mvn.w	r2, #2
 80029f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f905 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8f7 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f908 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0204 	mvn.w	r2, #4
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8db 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8cd 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f8de 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0208 	mvn.w	r2, #8
 8002a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b1 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8a3 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8b4 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0210 	mvn.w	r2, #16
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2208      	movs	r2, #8
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f887 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f879 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f88a 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f001 fd82 	bl	8004650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f91a 	bl	8002dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b86:	d10e      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f90d 	bl	8002dc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f838 	bl	8002c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d10e      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0220 	mvn.w	r2, #32
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8cd 	bl	8002d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a40      	ldr	r2, [pc, #256]	; (8002d6c <TIM_Base_SetConfig+0x114>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c76:	d00f      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	; (8002d70 <TIM_Base_SetConfig+0x118>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3c      	ldr	r2, [pc, #240]	; (8002d74 <TIM_Base_SetConfig+0x11c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <TIM_Base_SetConfig+0x120>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3a      	ldr	r2, [pc, #232]	; (8002d7c <TIM_Base_SetConfig+0x124>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d108      	bne.n	8002caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2f      	ldr	r2, [pc, #188]	; (8002d6c <TIM_Base_SetConfig+0x114>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02b      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d027      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <TIM_Base_SetConfig+0x118>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d023      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <TIM_Base_SetConfig+0x11c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <TIM_Base_SetConfig+0x120>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <TIM_Base_SetConfig+0x124>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <TIM_Base_SetConfig+0x128>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <TIM_Base_SetConfig+0x12c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <TIM_Base_SetConfig+0x130>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <TIM_Base_SetConfig+0x134>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <TIM_Base_SetConfig+0x138>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <TIM_Base_SetConfig+0x13c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <TIM_Base_SetConfig+0x114>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0xf8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <TIM_Base_SetConfig+0x124>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40010400 	.word	0x40010400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800
 8002d8c:	40001800 	.word	0x40001800
 8002d90:	40001c00 	.word	0x40001c00
 8002d94:	40002000 	.word	0x40002000

08002d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e040      	b.n	8002e68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f001 fd20 	bl	800483c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa9a 	bl	800334c <UART_SetConfig>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e022      	b.n	8002e68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fd32 	bl	8003894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e4e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fdb9 	bl	80039d8 <UART_CheckIdleState>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d17f      	bne.n	8002f88 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_UART_Transmit+0x24>
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e078      	b.n	8002f8a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit+0x36>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e071      	b.n	8002f8a <HAL_UART_Transmit+0x11a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2221      	movs	r2, #33	; 0x21
 8002eb8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002eba:	f7fd fb69 	bl	8000590 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d108      	bne.n	8002eec <HAL_UART_Transmit+0x7c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e003      	b.n	8002ef4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef4:	e02c      	b.n	8002f50 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fd98 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e03c      	b.n	8002f8a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e007      	b.n	8002f3e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1cc      	bne.n	8002ef6 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fd65 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e009      	b.n	8002f8a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	f040 808a 	bne.w	80030c0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_UART_Receive_IT+0x24>
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e082      	b.n	80030c2 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Receive_IT+0x36>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e07b      	b.n	80030c2 <HAL_UART_Receive_IT+0x12e>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	d10e      	bne.n	8003016 <HAL_UART_Receive_IT+0x82>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_UART_Receive_IT+0x78>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800300a:	e02d      	b.n	8003068 <HAL_UART_Receive_IT+0xd4>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003014:	e028      	b.n	8003068 <HAL_UART_Receive_IT+0xd4>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <HAL_UART_Receive_IT+0xa6>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_UART_Receive_IT+0x9c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800302e:	e01b      	b.n	8003068 <HAL_UART_Receive_IT+0xd4>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	227f      	movs	r2, #127	; 0x7f
 8003034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003038:	e016      	b.n	8003068 <HAL_UART_Receive_IT+0xd4>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003042:	d10d      	bne.n	8003060 <HAL_UART_Receive_IT+0xcc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <HAL_UART_Receive_IT+0xc2>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	227f      	movs	r2, #127	; 0x7f
 8003050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003054:	e008      	b.n	8003068 <HAL_UART_Receive_IT+0xd4>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	223f      	movs	r2, #63	; 0x3f
 800305a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800305e:	e003      	b.n	8003068 <HAL_UART_Receive_IT+0xd4>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2222      	movs	r2, #34	; 0x22
 8003072:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d107      	bne.n	800309e <HAL_UART_Receive_IT+0x10a>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_UART_Receive_IT+0x13c>)
 800309a:	661a      	str	r2, [r3, #96]	; 0x60
 800309c:	e002      	b.n	80030a4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <HAL_UART_Receive_IT+0x140>)
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80030ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	08003c0b 	.word	0x08003c0b
 80030d4:	08003b65 	.word	0x08003b65

080030d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80eb 	beq.w	80032fa <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
      }
      return;
 800312c:	e0e5      	b.n	80032fa <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80c0 	beq.w	80032b6 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80b5 	beq.w	80032b6 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <HAL_UART_IRQHandler+0x9c>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00e      	beq.n	800319c <HAL_UART_IRQHandler+0xc4>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2202      	movs	r2, #2
 800318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <HAL_UART_IRQHandler+0xec>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2204      	movs	r2, #4
 80031b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031bc:	f043 0202 	orr.w	r2, r3, #2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d013      	beq.n	80031f6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2208      	movs	r2, #8
 80031e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ee:	f043 0208 	orr.w	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d07f      	beq.n	80032fe <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00c      	beq.n	8003222 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003226:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d004      	beq.n	8003240 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800323c:	2b00      	cmp	r3, #0
 800323e:	d031      	beq.n	80032a4 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fc40 	bl	8003ac6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d123      	bne.n	800329c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003262:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003270:	4a26      	ldr	r2, [pc, #152]	; (800330c <HAL_UART_IRQHandler+0x234>)
 8003272:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fa99 	bl	80007b0 <HAL_DMA_Abort_IT>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d016      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800328e:	4610      	mov	r0, r2
 8003290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003292:	e00e      	b.n	80032b2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f84f 	bl	8003338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	e00a      	b.n	80032b2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f84b 	bl	8003338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a2:	e006      	b.n	80032b2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f847 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80032b0:	e025      	b.n	80032fe <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b2:	bf00      	nop
    return;
 80032b4:	e023      	b.n	80032fe <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d017      	beq.n	8003302 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
    }
    return;
 80032da:	e012      	b.n	8003302 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <HAL_UART_IRQHandler+0x22c>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fc1e 	bl	8003b32 <UART_EndTransmit_IT>
    return;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <HAL_UART_IRQHandler+0x22c>
      return;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <HAL_UART_IRQHandler+0x22c>
    return;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <HAL_UART_IRQHandler+0x22c>
    return;
 8003302:	bf00      	nop
  }

}
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	08003b07 	.word	0x08003b07

08003310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4bb1      	ldr	r3, [pc, #708]	; (8003640 <UART_SetConfig+0x2f4>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	430b      	orrs	r3, r1
 8003386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a9f      	ldr	r2, [pc, #636]	; (8003644 <UART_SetConfig+0x2f8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d121      	bne.n	8003410 <UART_SetConfig+0xc4>
 80033cc:	4b9e      	ldr	r3, [pc, #632]	; (8003648 <UART_SetConfig+0x2fc>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d816      	bhi.n	8003408 <UART_SetConfig+0xbc>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x94>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033fd 	.word	0x080033fd
 80033e8:	080033f7 	.word	0x080033f7
 80033ec:	08003403 	.word	0x08003403
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e151      	b.n	800369a <UART_SetConfig+0x34e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e14e      	b.n	800369a <UART_SetConfig+0x34e>
 80033fc:	2304      	movs	r3, #4
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e14b      	b.n	800369a <UART_SetConfig+0x34e>
 8003402:	2308      	movs	r3, #8
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	e148      	b.n	800369a <UART_SetConfig+0x34e>
 8003408:	2310      	movs	r3, #16
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	bf00      	nop
 800340e:	e144      	b.n	800369a <UART_SetConfig+0x34e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a8d      	ldr	r2, [pc, #564]	; (800364c <UART_SetConfig+0x300>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d134      	bne.n	8003484 <UART_SetConfig+0x138>
 800341a:	4b8b      	ldr	r3, [pc, #556]	; (8003648 <UART_SetConfig+0x2fc>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d829      	bhi.n	800347c <UART_SetConfig+0x130>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0xe4>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003465 	.word	0x08003465
 8003434:	0800347d 	.word	0x0800347d
 8003438:	0800347d 	.word	0x0800347d
 800343c:	0800347d 	.word	0x0800347d
 8003440:	08003471 	.word	0x08003471
 8003444:	0800347d 	.word	0x0800347d
 8003448:	0800347d 	.word	0x0800347d
 800344c:	0800347d 	.word	0x0800347d
 8003450:	0800346b 	.word	0x0800346b
 8003454:	0800347d 	.word	0x0800347d
 8003458:	0800347d 	.word	0x0800347d
 800345c:	0800347d 	.word	0x0800347d
 8003460:	08003477 	.word	0x08003477
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e117      	b.n	800369a <UART_SetConfig+0x34e>
 800346a:	2302      	movs	r3, #2
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e114      	b.n	800369a <UART_SetConfig+0x34e>
 8003470:	2304      	movs	r3, #4
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e111      	b.n	800369a <UART_SetConfig+0x34e>
 8003476:	2308      	movs	r3, #8
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e10e      	b.n	800369a <UART_SetConfig+0x34e>
 800347c:	2310      	movs	r3, #16
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	bf00      	nop
 8003482:	e10a      	b.n	800369a <UART_SetConfig+0x34e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a71      	ldr	r2, [pc, #452]	; (8003650 <UART_SetConfig+0x304>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d120      	bne.n	80034d0 <UART_SetConfig+0x184>
 800348e:	4b6e      	ldr	r3, [pc, #440]	; (8003648 <UART_SetConfig+0x2fc>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003498:	2b10      	cmp	r3, #16
 800349a:	d00f      	beq.n	80034bc <UART_SetConfig+0x170>
 800349c:	2b10      	cmp	r3, #16
 800349e:	d802      	bhi.n	80034a6 <UART_SetConfig+0x15a>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <UART_SetConfig+0x164>
 80034a4:	e010      	b.n	80034c8 <UART_SetConfig+0x17c>
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d005      	beq.n	80034b6 <UART_SetConfig+0x16a>
 80034aa:	2b30      	cmp	r3, #48	; 0x30
 80034ac:	d009      	beq.n	80034c2 <UART_SetConfig+0x176>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x17c>
 80034b0:	2300      	movs	r3, #0
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0f1      	b.n	800369a <UART_SetConfig+0x34e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e0ee      	b.n	800369a <UART_SetConfig+0x34e>
 80034bc:	2304      	movs	r3, #4
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e0eb      	b.n	800369a <UART_SetConfig+0x34e>
 80034c2:	2308      	movs	r3, #8
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e0e8      	b.n	800369a <UART_SetConfig+0x34e>
 80034c8:	2310      	movs	r3, #16
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	bf00      	nop
 80034ce:	e0e4      	b.n	800369a <UART_SetConfig+0x34e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5f      	ldr	r2, [pc, #380]	; (8003654 <UART_SetConfig+0x308>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d120      	bne.n	800351c <UART_SetConfig+0x1d0>
 80034da:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <UART_SetConfig+0x2fc>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d00f      	beq.n	8003508 <UART_SetConfig+0x1bc>
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d802      	bhi.n	80034f2 <UART_SetConfig+0x1a6>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <UART_SetConfig+0x1b0>
 80034f0:	e010      	b.n	8003514 <UART_SetConfig+0x1c8>
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d005      	beq.n	8003502 <UART_SetConfig+0x1b6>
 80034f6:	2bc0      	cmp	r3, #192	; 0xc0
 80034f8:	d009      	beq.n	800350e <UART_SetConfig+0x1c2>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x1c8>
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e0cb      	b.n	800369a <UART_SetConfig+0x34e>
 8003502:	2302      	movs	r3, #2
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e0c8      	b.n	800369a <UART_SetConfig+0x34e>
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e0c5      	b.n	800369a <UART_SetConfig+0x34e>
 800350e:	2308      	movs	r3, #8
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e0c2      	b.n	800369a <UART_SetConfig+0x34e>
 8003514:	2310      	movs	r3, #16
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	bf00      	nop
 800351a:	e0be      	b.n	800369a <UART_SetConfig+0x34e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4d      	ldr	r2, [pc, #308]	; (8003658 <UART_SetConfig+0x30c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d124      	bne.n	8003570 <UART_SetConfig+0x224>
 8003526:	4b48      	ldr	r3, [pc, #288]	; (8003648 <UART_SetConfig+0x2fc>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d012      	beq.n	800355c <UART_SetConfig+0x210>
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d802      	bhi.n	8003542 <UART_SetConfig+0x1f6>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <UART_SetConfig+0x204>
 8003540:	e012      	b.n	8003568 <UART_SetConfig+0x21c>
 8003542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003546:	d006      	beq.n	8003556 <UART_SetConfig+0x20a>
 8003548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800354c:	d009      	beq.n	8003562 <UART_SetConfig+0x216>
 800354e:	e00b      	b.n	8003568 <UART_SetConfig+0x21c>
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e0a1      	b.n	800369a <UART_SetConfig+0x34e>
 8003556:	2302      	movs	r3, #2
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e09e      	b.n	800369a <UART_SetConfig+0x34e>
 800355c:	2304      	movs	r3, #4
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e09b      	b.n	800369a <UART_SetConfig+0x34e>
 8003562:	2308      	movs	r3, #8
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e098      	b.n	800369a <UART_SetConfig+0x34e>
 8003568:	2310      	movs	r3, #16
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	bf00      	nop
 800356e:	e094      	b.n	800369a <UART_SetConfig+0x34e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a39      	ldr	r2, [pc, #228]	; (800365c <UART_SetConfig+0x310>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d124      	bne.n	80035c4 <UART_SetConfig+0x278>
 800357a:	4b33      	ldr	r3, [pc, #204]	; (8003648 <UART_SetConfig+0x2fc>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d012      	beq.n	80035b0 <UART_SetConfig+0x264>
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d802      	bhi.n	8003596 <UART_SetConfig+0x24a>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <UART_SetConfig+0x258>
 8003594:	e012      	b.n	80035bc <UART_SetConfig+0x270>
 8003596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359a:	d006      	beq.n	80035aa <UART_SetConfig+0x25e>
 800359c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a0:	d009      	beq.n	80035b6 <UART_SetConfig+0x26a>
 80035a2:	e00b      	b.n	80035bc <UART_SetConfig+0x270>
 80035a4:	2301      	movs	r3, #1
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e077      	b.n	800369a <UART_SetConfig+0x34e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e074      	b.n	800369a <UART_SetConfig+0x34e>
 80035b0:	2304      	movs	r3, #4
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e071      	b.n	800369a <UART_SetConfig+0x34e>
 80035b6:	2308      	movs	r3, #8
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e06e      	b.n	800369a <UART_SetConfig+0x34e>
 80035bc:	2310      	movs	r3, #16
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	bf00      	nop
 80035c2:	e06a      	b.n	800369a <UART_SetConfig+0x34e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	; (8003660 <UART_SetConfig+0x314>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d124      	bne.n	8003618 <UART_SetConfig+0x2cc>
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <UART_SetConfig+0x2fc>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d012      	beq.n	8003604 <UART_SetConfig+0x2b8>
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d802      	bhi.n	80035ea <UART_SetConfig+0x29e>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <UART_SetConfig+0x2ac>
 80035e8:	e012      	b.n	8003610 <UART_SetConfig+0x2c4>
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ee:	d006      	beq.n	80035fe <UART_SetConfig+0x2b2>
 80035f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035f4:	d009      	beq.n	800360a <UART_SetConfig+0x2be>
 80035f6:	e00b      	b.n	8003610 <UART_SetConfig+0x2c4>
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e04d      	b.n	800369a <UART_SetConfig+0x34e>
 80035fe:	2302      	movs	r3, #2
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e04a      	b.n	800369a <UART_SetConfig+0x34e>
 8003604:	2304      	movs	r3, #4
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e047      	b.n	800369a <UART_SetConfig+0x34e>
 800360a:	2308      	movs	r3, #8
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e044      	b.n	800369a <UART_SetConfig+0x34e>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	bf00      	nop
 8003616:	e040      	b.n	800369a <UART_SetConfig+0x34e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a11      	ldr	r2, [pc, #68]	; (8003664 <UART_SetConfig+0x318>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d139      	bne.n	8003696 <UART_SetConfig+0x34a>
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <UART_SetConfig+0x2fc>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800362c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003630:	d027      	beq.n	8003682 <UART_SetConfig+0x336>
 8003632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003636:	d817      	bhi.n	8003668 <UART_SetConfig+0x31c>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01c      	beq.n	8003676 <UART_SetConfig+0x32a>
 800363c:	e027      	b.n	800368e <UART_SetConfig+0x342>
 800363e:	bf00      	nop
 8003640:	efff69f3 	.word	0xefff69f3
 8003644:	40011000 	.word	0x40011000
 8003648:	40023800 	.word	0x40023800
 800364c:	40004400 	.word	0x40004400
 8003650:	40004800 	.word	0x40004800
 8003654:	40004c00 	.word	0x40004c00
 8003658:	40005000 	.word	0x40005000
 800365c:	40011400 	.word	0x40011400
 8003660:	40007800 	.word	0x40007800
 8003664:	40007c00 	.word	0x40007c00
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	d006      	beq.n	800367c <UART_SetConfig+0x330>
 800366e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003672:	d009      	beq.n	8003688 <UART_SetConfig+0x33c>
 8003674:	e00b      	b.n	800368e <UART_SetConfig+0x342>
 8003676:	2300      	movs	r3, #0
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e00e      	b.n	800369a <UART_SetConfig+0x34e>
 800367c:	2302      	movs	r3, #2
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e00b      	b.n	800369a <UART_SetConfig+0x34e>
 8003682:	2304      	movs	r3, #4
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e008      	b.n	800369a <UART_SetConfig+0x34e>
 8003688:	2308      	movs	r3, #8
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e005      	b.n	800369a <UART_SetConfig+0x34e>
 800368e:	2310      	movs	r3, #16
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	bf00      	nop
 8003694:	e001      	b.n	800369a <UART_SetConfig+0x34e>
 8003696:	2310      	movs	r3, #16
 8003698:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a2:	d17c      	bne.n	800379e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d859      	bhi.n	800375e <UART_SetConfig+0x412>
 80036aa:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0x364>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	080036f3 	.word	0x080036f3
 80036b8:	08003711 	.word	0x08003711
 80036bc:	0800375f 	.word	0x0800375f
 80036c0:	08003729 	.word	0x08003729
 80036c4:	0800375f 	.word	0x0800375f
 80036c8:	0800375f 	.word	0x0800375f
 80036cc:	0800375f 	.word	0x0800375f
 80036d0:	08003747 	.word	0x08003747
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036d4:	f7fe fc98 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 80036d8:	4603      	mov	r3, r0
 80036da:	005a      	lsls	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	441a      	add	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	61bb      	str	r3, [r7, #24]
        break;
 80036f0:	e038      	b.n	8003764 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036f2:	f7fe fc9d 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 80036f6:	4603      	mov	r3, r0
 80036f8:	005a      	lsls	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	61bb      	str	r3, [r7, #24]
        break;
 800370e:	e029      	b.n	8003764 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	085a      	lsrs	r2, r3, #1
 8003716:	4b5d      	ldr	r3, [pc, #372]	; (800388c <UART_SetConfig+0x540>)
 8003718:	4413      	add	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6852      	ldr	r2, [r2, #4]
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	61bb      	str	r3, [r7, #24]
        break;
 8003726:	e01d      	b.n	8003764 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003728:	f7fe fb8a 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 800372c:	4603      	mov	r3, r0
 800372e:	005a      	lsls	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	441a      	add	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e00e      	b.n	8003764 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	b29b      	uxth	r3, r3
 800375a:	61bb      	str	r3, [r7, #24]
        break;
 800375c:	e002      	b.n	8003764 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
        break;
 8003762:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	d916      	bls.n	8003798 <UART_SetConfig+0x44c>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003770:	d212      	bcs.n	8003798 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f023 030f 	bic.w	r3, r3, #15
 800377a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	b29a      	uxth	r2, r3
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	4313      	orrs	r3, r2
 800378c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	89fa      	ldrh	r2, [r7, #14]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	e06e      	b.n	8003876 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	75fb      	strb	r3, [r7, #23]
 800379c:	e06b      	b.n	8003876 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d857      	bhi.n	8003854 <UART_SetConfig+0x508>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0x460>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037ed 	.word	0x080037ed
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003855 	.word	0x08003855
 80037bc:	08003821 	.word	0x08003821
 80037c0:	08003855 	.word	0x08003855
 80037c4:	08003855 	.word	0x08003855
 80037c8:	08003855 	.word	0x08003855
 80037cc:	0800383d 	.word	0x0800383d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037d0:	f7fe fc1a 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	61bb      	str	r3, [r7, #24]
        break;
 80037ea:	e036      	b.n	800385a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037ec:	f7fe fc20 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	b29b      	uxth	r3, r3
 8003804:	61bb      	str	r3, [r7, #24]
        break;
 8003806:	e028      	b.n	800385a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	085a      	lsrs	r2, r3, #1
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <UART_SetConfig+0x544>)
 8003810:	4413      	add	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6852      	ldr	r2, [r2, #4]
 8003816:	fbb3 f3f2 	udiv	r3, r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	61bb      	str	r3, [r7, #24]
        break;
 800381e:	e01c      	b.n	800385a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003820:	f7fe fb0e 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	61bb      	str	r3, [r7, #24]
        break;
 800383a:	e00e      	b.n	800385a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	b29b      	uxth	r3, r3
 8003850:	61bb      	str	r3, [r7, #24]
        break;
 8003852:	e002      	b.n	800385a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
        break;
 8003858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0f      	cmp	r3, #15
 800385e:	d908      	bls.n	8003872 <UART_SetConfig+0x526>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d204      	bcs.n	8003872 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	e001      	b.n	8003876 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003882:	7dfb      	ldrb	r3, [r7, #23]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	01e84800 	.word	0x01e84800
 8003890:	00f42400 	.word	0x00f42400

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01a      	beq.n	80039aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d10a      	bne.n	80039aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039e6:	f7fc fdd3 	bl	8000590 <HAL_GetTick>
 80039ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d10e      	bne.n	8003a18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f814 	bl	8003a36 <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e00a      	b.n	8003a2e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	e02a      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d026      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7fc fd9e 	bl	8000590 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11b      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d0c5      	beq.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003adc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff fc07 	bl	8003338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b48:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fbda 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b72:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b78:	2b22      	cmp	r3, #34	; 0x22
 8003b7a:	d13a      	bne.n	8003bf2 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b84:	89bb      	ldrh	r3, [r7, #12]
 8003b86:	b2d9      	uxtb	r1, r3
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	400a      	ands	r2, r1
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d121      	bne.n	8003c02 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fb9a 	bl	8003324 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bf0:	e007      	b.n	8003c02 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0208 	orr.w	r2, r2, #8
 8003c00:	619a      	str	r2, [r3, #24]
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c18:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1e:	2b22      	cmp	r3, #34	; 0x22
 8003c20:	d13a      	bne.n	8003c98 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c30:	89ba      	ldrh	r2, [r7, #12]
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d121      	bne.n	8003ca8 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c72:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fb47 	bl	8003324 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c96:	e007      	b.n	8003ca8 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0208 	orr.w	r2, r2, #8
 8003ca6:	619a      	str	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	f107 001c 	add.w	r0, r7, #28
 8003cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d120      	bne.n	8003d0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <USB_CoreInit+0xac>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa60 	bl	80041c4 <USB_CoreReset>
 8003d04:	4603      	mov	r3, r0
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	e010      	b.n	8003d2c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa54 	bl	80041c4 <USB_CoreReset>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10b      	bne.n	8003d4a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f043 0206 	orr.w	r2, r3, #6
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d56:	b004      	add	sp, #16
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	ffbdffbf 	.word	0xffbdffbf

08003d60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 0201 	bic.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	e00b      	b.n	8003dc6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e001      	b.n	8003dc6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e003      	b.n	8003dce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003dc6:	2032      	movs	r0, #50	; 0x32
 8003dc8:	f7fc fbee 	bl	80005a8 <HAL_Delay>

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dd8:	b084      	sub	sp, #16
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	e009      	b.n	8003e0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3340      	adds	r3, #64	; 0x40
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	2200      	movs	r2, #0
 8003e04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0e      	cmp	r3, #14
 8003e10:	d9f2      	bls.n	8003df8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d112      	bne.n	8003e3e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e005      	b.n	8003e4a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	461a      	mov	r2, r3
 8003e66:	680b      	ldr	r3, [r1, #0]
 8003e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d104      	bne.n	8003e80 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e76:	2100      	movs	r1, #0
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f971 	bl	8004160 <USB_SetDevSpeed>
 8003e7e:	e018      	b.n	8003eb2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e80:	2101      	movs	r1, #1
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f96c 	bl	8004160 <USB_SetDevSpeed>
 8003e88:	e013      	b.n	8003eb2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d10c      	bne.n	8003eaa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e96:	2100      	movs	r1, #0
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f961 	bl	8004160 <USB_SetDevSpeed>
 8003e9e:	e008      	b.n	8003eb2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f95c 	bl	8004160 <USB_SetDevSpeed>
 8003ea8:	e003      	b.n	8003eb2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eaa:	2103      	movs	r1, #3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f957 	bl	8004160 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003eb2:	2110      	movs	r1, #16
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f90b 	bl	80040d0 <USB_FlushTxFifo>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f929 	bl	800411c <USB_FlushRxFifo>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	461a      	mov	r2, r3
 8003edc:	2300      	movs	r3, #0
 8003ede:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	e043      	b.n	8003f86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f14:	d118      	bne.n	8003f48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	e013      	b.n	8003f5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e008      	b.n	8003f5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	461a      	mov	r2, r3
 8003f56:	2300      	movs	r3, #0
 8003f58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	3301      	adds	r3, #1
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3b7      	bcc.n	8003efe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e043      	b.n	800401c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003faa:	d118      	bne.n	8003fde <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e013      	b.n	8003ff0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e008      	b.n	8003ff0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	461a      	mov	r2, r3
 8004010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004014:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	3301      	adds	r3, #1
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3b7      	bcc.n	8003f94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004036:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	2b01      	cmp	r3, #1
 800403c:	d110      	bne.n	8004060 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004044:	461a      	mov	r2, r3
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <USB_DevInit+0x2e8>)
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004058:	4619      	mov	r1, r3
 800405a:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <USB_DevInit+0x2ec>)
 800405c:	4313      	orrs	r3, r2
 800405e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800406c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f043 0210 	orr.w	r2, r3, #16
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <USB_DevInit+0x2f0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800408c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f043 0208 	orr.w	r2, r3, #8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800409e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <USB_DevInit+0x2f4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040bc:	b004      	add	sp, #16
 80040be:	4770      	bx	lr
 80040c0:	00800100 	.word	0x00800100
 80040c4:	00010003 	.word	0x00010003
 80040c8:	803c3800 	.word	0x803c3800
 80040cc:	40000004 	.word	0x40000004

080040d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <USB_FlushTxFifo+0x48>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e006      	b.n	800410a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b20      	cmp	r3, #32
 8004106:	d0f0      	beq.n	80040ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	00030d40 	.word	0x00030d40

0800411c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2210      	movs	r2, #16
 800412c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <USB_FlushRxFifo+0x40>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e006      	b.n	800414e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b10      	cmp	r3, #16
 800414a:	d0f0      	beq.n	800412e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	00030d40 	.word	0x00030d40

08004160 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f7fc f9f8 	bl	80005a8 <HAL_Delay>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a13      	ldr	r2, [pc, #76]	; (8004228 <USB_CoreReset+0x64>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e01b      	b.n	800421a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	daf2      	bge.n	80041d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <USB_CoreReset+0x64>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e006      	b.n	800421a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d0f0      	beq.n	80041fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	00030d40 	.word	0x00030d40

0800422c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004232:	f7fc f98b 	bl	800054c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004236:	f000 f835 	bl	80042a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800423a:	f000 f967 	bl	800450c <MX_GPIO_Init>
  MX_ETH_Init();
 800423e:	f000 f8c7 	bl	80043d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8004242:	f000 f905 	bl	8004450 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004246:	f000 f933 	bl	80044b0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE); //Enables the receive interrupt.
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <main+0x6c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <main+0x6c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0220 	orr.w	r2, r2, #32
 8004258:	601a      	str	r2, [r3, #0]


  /* USER CODE END 2 */
 
 
  uint8_t ch[] = "\n";
 800425a:	230a      	movs	r3, #10
 800425c:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if(strcmp(send_msg, recv_msg) != 0){	// Evaluate if the strings are different (0)
 800425e:	490f      	ldr	r1, [pc, #60]	; (800429c <main+0x70>)
 8004260:	480f      	ldr	r0, [pc, #60]	; (80042a0 <main+0x74>)
 8004262:	f7fb ffe9 	bl	8000238 <strcmp>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <main+0x54>
		  strncat(recv_msg, &ch, 2);		// Add the string termination character
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	2202      	movs	r2, #2
 8004270:	4619      	mov	r1, r3
 8004272:	480a      	ldr	r0, [pc, #40]	; (800429c <main+0x70>)
 8004274:	f000 fcbe 	bl	8004bf4 <strncat>
		  strcpy(send_msg, recv_msg);       // Replace the send msg buffer with that of the received string
 8004278:	4908      	ldr	r1, [pc, #32]	; (800429c <main+0x70>)
 800427a:	4809      	ldr	r0, [pc, #36]	; (80042a0 <main+0x74>)
 800427c:	f000 fcb2 	bl	8004be4 <strcpy>
	  }

	  HAL_UART_Transmit(&huart3, send_msg, sizeof(send_msg), 100);
 8004280:	2364      	movs	r3, #100	; 0x64
 8004282:	2211      	movs	r2, #17
 8004284:	4906      	ldr	r1, [pc, #24]	; (80042a0 <main+0x74>)
 8004286:	4804      	ldr	r0, [pc, #16]	; (8004298 <main+0x6c>)
 8004288:	f7fe fdf2 	bl	8002e70 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800428c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004290:	f7fc f98a 	bl	80005a8 <HAL_Delay>
	if(strcmp(send_msg, recv_msg) != 0){	// Evaluate if the strings are different (0)
 8004294:	e7e3      	b.n	800425e <main+0x32>
 8004296:	bf00      	nop
 8004298:	20000050 	.word	0x20000050
 800429c:	20000018 	.word	0x20000018
 80042a0:	20000004 	.word	0x20000004

080042a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b0b8      	sub	sp, #224	; 0xe0
 80042a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042ae:	2234      	movs	r2, #52	; 0x34
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fc8e 	bl	8004bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042c8:	f107 0308 	add.w	r3, r7, #8
 80042cc:	2290      	movs	r2, #144	; 0x90
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fc7f 	bl	8004bd4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80042d6:	f7fd f9f9 	bl	80016cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <SystemClock_Config+0x120>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	4a39      	ldr	r2, [pc, #228]	; (80043c4 <SystemClock_Config+0x120>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	; 0x40
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <SystemClock_Config+0x120>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80042f2:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <SystemClock_Config+0x124>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80042fa:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <SystemClock_Config+0x124>)
 80042fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <SystemClock_Config+0x124>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800430e:	2301      	movs	r3, #1
 8004310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004314:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800431c:	2302      	movs	r3, #2
 800431e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800432a:	2304      	movs	r3, #4
 800432c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8004330:	2360      	movs	r3, #96	; 0x60
 8004332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004336:	2302      	movs	r3, #2
 8004338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800433c:	2304      	movs	r3, #4
 800433e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004342:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd fa20 	bl	800178c <HAL_RCC_OscConfig>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004352:	f000 f98f 	bl	8004674 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004356:	f7fd f9c9 	bl	80016ec <HAL_PWREx_EnableOverDrive>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004360:	f000 f988 	bl	8004674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004364:	230f      	movs	r3, #15
 8004366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800436a:	2302      	movs	r3, #2
 800436c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004384:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004388:	2103      	movs	r1, #3
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd fc70 	bl	8001c70 <HAL_RCC_ClockConfig>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8004396:	f000 f96d 	bl	8004674 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <SystemClock_Config+0x128>)
 800439c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800439e:	2300      	movs	r3, #0
 80043a0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043a8:	f107 0308 	add.w	r3, r7, #8
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fd fe85 	bl	80020bc <HAL_RCCEx_PeriphCLKConfig>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <SystemClock_Config+0x118>
  {
    Error_Handler();
 80043b8:	f000 f95c 	bl	8004674 <Error_Handler>
  }
}
 80043bc:	bf00      	nop
 80043be:	37e0      	adds	r7, #224	; 0xe0
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	00200100 	.word	0x00200100

080043d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <MX_ETH_Init+0x78>)
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <MX_ETH_Init+0x7c>)
 80043d8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <MX_ETH_Init+0x78>)
 80043dc:	2201      	movs	r2, #1
 80043de:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <MX_ETH_Init+0x78>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <MX_ETH_Init+0x78>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <MX_ETH_Init+0x78>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	3301      	adds	r3, #1
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80043f8:	4b13      	ldr	r3, [pc, #76]	; (8004448 <MX_ETH_Init+0x78>)
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	3302      	adds	r3, #2
 80043fe:	22e1      	movs	r2, #225	; 0xe1
 8004400:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <MX_ETH_Init+0x78>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	3303      	adds	r3, #3
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <MX_ETH_Init+0x78>)
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	3304      	adds	r3, #4
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <MX_ETH_Init+0x78>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	3305      	adds	r3, #5
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <MX_ETH_Init+0x78>)
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <MX_ETH_Init+0x78>)
 8004428:	2200      	movs	r2, #0
 800442a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <MX_ETH_Init+0x78>)
 800442e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004432:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8004434:	4804      	ldr	r0, [pc, #16]	; (8004448 <MX_ETH_Init+0x78>)
 8004436:	f7fc f9dd 	bl	80007f4 <HAL_ETH_Init>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8004440:	f000 f918 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}
 8004448:	200004d4 	.word	0x200004d4
 800444c:	40028000 	.word	0x40028000

08004450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <MX_USART3_UART_Init+0x5c>)
 8004458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 800445c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004464:	2200      	movs	r2, #0
 8004466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 800446a:	2200      	movs	r2, #0
 800446c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004476:	220c      	movs	r2, #12
 8004478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 800447c:	2200      	movs	r2, #0
 800447e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004488:	2200      	movs	r2, #0
 800448a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 800448e:	2200      	movs	r2, #0
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004492:	4805      	ldr	r0, [pc, #20]	; (80044a8 <MX_USART3_UART_Init+0x58>)
 8004494:	f7fe fc9e 	bl	8002dd4 <HAL_UART_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800449e:	f000 f8e9 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000050 	.word	0x20000050
 80044ac:	40004800 	.word	0x40004800

080044b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80044ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044be:	2206      	movs	r2, #6
 80044c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044c4:	2202      	movs	r2, #2
 80044c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044d0:	2202      	movs	r2, #2
 80044d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044dc:	2200      	movs	r2, #0
 80044de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80044f2:	4805      	ldr	r0, [pc, #20]	; (8004508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044f4:	f7fc ffad 	bl	8001452 <HAL_PCD_Init>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80044fe:	f000 f8b9 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	200000d0 	.word	0x200000d0

0800450c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08c      	sub	sp, #48	; 0x30
 8004510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004522:	4b46      	ldr	r3, [pc, #280]	; (800463c <MX_GPIO_Init+0x130>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a45      	ldr	r2, [pc, #276]	; (800463c <MX_GPIO_Init+0x130>)
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b43      	ldr	r3, [pc, #268]	; (800463c <MX_GPIO_Init+0x130>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <MX_GPIO_Init+0x130>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	4a3f      	ldr	r2, [pc, #252]	; (800463c <MX_GPIO_Init+0x130>)
 8004540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004544:	6313      	str	r3, [r2, #48]	; 0x30
 8004546:	4b3d      	ldr	r3, [pc, #244]	; (800463c <MX_GPIO_Init+0x130>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004552:	4b3a      	ldr	r3, [pc, #232]	; (800463c <MX_GPIO_Init+0x130>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a39      	ldr	r2, [pc, #228]	; (800463c <MX_GPIO_Init+0x130>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <MX_GPIO_Init+0x130>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800456a:	4b34      	ldr	r3, [pc, #208]	; (800463c <MX_GPIO_Init+0x130>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	4a33      	ldr	r2, [pc, #204]	; (800463c <MX_GPIO_Init+0x130>)
 8004570:	f043 0302 	orr.w	r3, r3, #2
 8004574:	6313      	str	r3, [r2, #48]	; 0x30
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <MX_GPIO_Init+0x130>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004582:	4b2e      	ldr	r3, [pc, #184]	; (800463c <MX_GPIO_Init+0x130>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	4a2d      	ldr	r2, [pc, #180]	; (800463c <MX_GPIO_Init+0x130>)
 8004588:	f043 0308 	orr.w	r3, r3, #8
 800458c:	6313      	str	r3, [r2, #48]	; 0x30
 800458e:	4b2b      	ldr	r3, [pc, #172]	; (800463c <MX_GPIO_Init+0x130>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800459a:	4b28      	ldr	r3, [pc, #160]	; (800463c <MX_GPIO_Init+0x130>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a27      	ldr	r2, [pc, #156]	; (800463c <MX_GPIO_Init+0x130>)
 80045a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
 80045a6:	4b25      	ldr	r3, [pc, #148]	; (800463c <MX_GPIO_Init+0x130>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80045b2:	2200      	movs	r2, #0
 80045b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80045b8:	4821      	ldr	r0, [pc, #132]	; (8004640 <MX_GPIO_Init+0x134>)
 80045ba:	f7fc ff31 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80045be:	2200      	movs	r2, #0
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	4820      	ldr	r0, [pc, #128]	; (8004644 <MX_GPIO_Init+0x138>)
 80045c4:	f7fc ff2c 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80045c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <MX_GPIO_Init+0x13c>)
 80045d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80045d6:	f107 031c 	add.w	r3, r7, #28
 80045da:	4619      	mov	r1, r3
 80045dc:	481b      	ldr	r0, [pc, #108]	; (800464c <MX_GPIO_Init+0x140>)
 80045de:	f7fc fd75 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80045e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80045e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 031c 	add.w	r3, r7, #28
 80045f8:	4619      	mov	r1, r3
 80045fa:	4811      	ldr	r0, [pc, #68]	; (8004640 <MX_GPIO_Init+0x134>)
 80045fc:	f7fc fd66 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004600:	2340      	movs	r3, #64	; 0x40
 8004602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004604:	2301      	movs	r3, #1
 8004606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004610:	f107 031c 	add.w	r3, r7, #28
 8004614:	4619      	mov	r1, r3
 8004616:	480b      	ldr	r0, [pc, #44]	; (8004644 <MX_GPIO_Init+0x138>)
 8004618:	f7fc fd58 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004620:	2300      	movs	r3, #0
 8004622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004628:	f107 031c 	add.w	r3, r7, #28
 800462c:	4619      	mov	r1, r3
 800462e:	4805      	ldr	r0, [pc, #20]	; (8004644 <MX_GPIO_Init+0x138>)
 8004630:	f7fc fd4c 	bl	80010cc <HAL_GPIO_Init>

}
 8004634:	bf00      	nop
 8004636:	3730      	adds	r7, #48	; 0x30
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40023800 	.word	0x40023800
 8004640:	40020400 	.word	0x40020400
 8004644:	40021800 	.word	0x40021800
 8004648:	10110000 	.word	0x10110000
 800464c:	40020800 	.word	0x40020800

08004650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004662:	f7fb ff81 	bl	8000568 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000

08004674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_MspInit+0x44>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <HAL_MspInit+0x44>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_MspInit+0x44>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_MspInit+0x44>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <HAL_MspInit+0x44>)
 80046a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ac:	6453      	str	r3, [r2, #68]	; 0x44
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_MspInit+0x44>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08e      	sub	sp, #56	; 0x38
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a4e      	ldr	r2, [pc, #312]	; (8004824 <HAL_ETH_MspInit+0x158>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	f040 8096 	bne.w	800481c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046f0:	4b4d      	ldr	r3, [pc, #308]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	4a4c      	ldr	r2, [pc, #304]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 80046f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046fa:	6313      	str	r3, [r2, #48]	; 0x30
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	4b47      	ldr	r3, [pc, #284]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4a46      	ldr	r2, [pc, #280]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800470e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004712:	6313      	str	r3, [r2, #48]	; 0x30
 8004714:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	4a40      	ldr	r2, [pc, #256]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800472a:	6313      	str	r3, [r2, #48]	; 0x30
 800472c:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a3a      	ldr	r2, [pc, #232]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6313      	str	r3, [r2, #48]	; 0x30
 8004744:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004750:	4b35      	ldr	r3, [pc, #212]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a34      	ldr	r2, [pc, #208]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6313      	str	r3, [r2, #48]	; 0x30
 800475c:	4b32      	ldr	r3, [pc, #200]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004768:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	4a2e      	ldr	r2, [pc, #184]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800476e:	f043 0302 	orr.w	r3, r3, #2
 8004772:	6313      	str	r3, [r2, #48]	; 0x30
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004780:	4b29      	ldr	r3, [pc, #164]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 8004786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800478a:	6313      	str	r3, [r2, #48]	; 0x30
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <HAL_ETH_MspInit+0x15c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004798:	2332      	movs	r3, #50	; 0x32
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a4:	2303      	movs	r3, #3
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047a8:	230b      	movs	r3, #11
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b0:	4619      	mov	r1, r3
 80047b2:	481e      	ldr	r0, [pc, #120]	; (800482c <HAL_ETH_MspInit+0x160>)
 80047b4:	f7fc fc8a 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80047b8:	2386      	movs	r3, #134	; 0x86
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c4:	2303      	movs	r3, #3
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047c8:	230b      	movs	r3, #11
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d0:	4619      	mov	r1, r3
 80047d2:	4817      	ldr	r0, [pc, #92]	; (8004830 <HAL_ETH_MspInit+0x164>)
 80047d4:	f7fc fc7a 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80047d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047ea:	230b      	movs	r3, #11
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	4619      	mov	r1, r3
 80047f4:	480f      	ldr	r0, [pc, #60]	; (8004834 <HAL_ETH_MspInit+0x168>)
 80047f6:	f7fc fc69 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80047fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004808:	2303      	movs	r3, #3
 800480a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800480c:	230b      	movs	r3, #11
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004814:	4619      	mov	r1, r3
 8004816:	4808      	ldr	r0, [pc, #32]	; (8004838 <HAL_ETH_MspInit+0x16c>)
 8004818:	f7fc fc58 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800481c:	bf00      	nop
 800481e:	3738      	adds	r7, #56	; 0x38
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40028000 	.word	0x40028000
 8004828:	40023800 	.word	0x40023800
 800482c:	40020800 	.word	0x40020800
 8004830:	40020000 	.word	0x40020000
 8004834:	40020400 	.word	0x40020400
 8004838:	40021800 	.word	0x40021800

0800483c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1b      	ldr	r2, [pc, #108]	; (80048c8 <HAL_UART_MspInit+0x8c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d130      	bne.n	80048c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_UART_MspInit+0x90>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_UART_MspInit+0x90>)
 8004864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b18      	ldr	r3, [pc, #96]	; (80048cc <HAL_UART_MspInit+0x90>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_UART_MspInit+0x90>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <HAL_UART_MspInit+0x90>)
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_UART_MspInit+0x90>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800488e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004894:	2302      	movs	r3, #2
 8004896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800489c:	2303      	movs	r3, #3
 800489e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048a0:	2307      	movs	r3, #7
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	4619      	mov	r1, r3
 80048aa:	4809      	ldr	r0, [pc, #36]	; (80048d0 <HAL_UART_MspInit+0x94>)
 80048ac:	f7fc fc0e 	bl	80010cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80048b0:	2200      	movs	r2, #0
 80048b2:	2100      	movs	r1, #0
 80048b4:	2027      	movs	r0, #39	; 0x27
 80048b6:	f7fb ff51 	bl	800075c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048ba:	2027      	movs	r0, #39	; 0x27
 80048bc:	f7fb ff6a 	bl	8000794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048c0:	bf00      	nop
 80048c2:	3728      	adds	r7, #40	; 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40004800 	.word	0x40004800
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40020c00 	.word	0x40020c00

080048d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f4:	d141      	bne.n	800497a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a22      	ldr	r2, [pc, #136]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6313      	str	r3, [r2, #48]	; 0x30
 8004902:	4b20      	ldr	r3, [pc, #128]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800490e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491c:	2303      	movs	r3, #3
 800491e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004920:	230a      	movs	r3, #10
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	4619      	mov	r1, r3
 800492a:	4817      	ldr	r0, [pc, #92]	; (8004988 <HAL_PCD_MspInit+0xb4>)
 800492c:	f7fc fbce 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	4619      	mov	r1, r3
 8004944:	4810      	ldr	r0, [pc, #64]	; (8004988 <HAL_PCD_MspInit+0xb4>)
 8004946:	f7fc fbc1 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 8004950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004954:	6353      	str	r3, [r2, #52]	; 0x34
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 8004968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_PCD_MspInit+0xb0>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800497a:	bf00      	nop
 800497c:	3728      	adds	r7, #40	; 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	40020000 	.word	0x40020000

0800498c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	; 0x30
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800499c:	2200      	movs	r2, #0
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	2019      	movs	r0, #25
 80049a2:	f7fb fedb 	bl	800075c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80049a6:	2019      	movs	r0, #25
 80049a8:	f7fb fef4 	bl	8000794 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80049ac:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <HAL_InitTick+0x9c>)
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_InitTick+0x9c>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6453      	str	r3, [r2, #68]	; 0x44
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_InitTick+0x9c>)
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049c4:	f107 0210 	add.w	r2, r7, #16
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd fb42 	bl	8002058 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fd fb2c 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 80049d8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <HAL_InitTick+0xa0>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0c9b      	lsrs	r3, r3, #18
 80049e4:	3b01      	subs	r3, #1
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_InitTick+0xa4>)
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <HAL_InitTick+0xa8>)
 80049ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <HAL_InitTick+0xa4>)
 80049f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80049f6:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <HAL_InitTick+0xa4>)
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_InitTick+0xa4>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_InitTick+0xa4>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004a08:	4809      	ldr	r0, [pc, #36]	; (8004a30 <HAL_InitTick+0xa4>)
 8004a0a:	f7fd ff7d 	bl	8002908 <HAL_TIM_Base_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004a14:	4806      	ldr	r0, [pc, #24]	; (8004a30 <HAL_InitTick+0xa4>)
 8004a16:	f7fd ffad 	bl	8002974 <HAL_TIM_Base_Start_IT>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	e000      	b.n	8004a20 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3730      	adds	r7, #48	; 0x30
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	431bde83 	.word	0x431bde83
 8004a30:	2000051c 	.word	0x2000051c
 8004a34:	40010000 	.word	0x40010000

08004a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a4a:	e7fe      	b.n	8004a4a <HardFault_Handler+0x4>

08004a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <MemManage_Handler+0x4>

08004a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <BusFault_Handler+0x4>

08004a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a5c:	e7fe      	b.n	8004a5c <UsageFault_Handler+0x4>

08004a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a9e:	f7fd ff93 	bl	80029c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000051c 	.word	0x2000051c

08004aac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ab0:	4804      	ldr	r0, [pc, #16]	; (8004ac4 <USART3_IRQHandler+0x18>)
 8004ab2:	f7fe fb11 	bl	80030d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //memset(recv_msg, 0, sizeof(recv_msg));			// Make the string empty
  //strcpy(recv_msg,"");
  HAL_UART_Receive_IT(&huart3, recv_msg, 17); 	// The interrupt receives a string from terminal
 8004ab6:	2211      	movs	r2, #17
 8004ab8:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <USART3_IRQHandler+0x1c>)
 8004aba:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <USART3_IRQHandler+0x18>)
 8004abc:	f7fe fa6a 	bl	8002f94 <HAL_UART_Receive_IT>

  /* USER CODE END USART3_IRQn 1 */
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000050 	.word	0x20000050
 8004ac8:	20000018 	.word	0x20000018

08004acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <SystemInit+0x5c>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <SystemInit+0x5c>)
 8004ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <SystemInit+0x60>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <SystemInit+0x60>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <SystemInit+0x60>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <SystemInit+0x60>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	490d      	ldr	r1, [pc, #52]	; (8004b2c <SystemInit+0x60>)
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <SystemInit+0x64>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004afe:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <SystemInit+0x60>)
 8004b00:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <SystemInit+0x68>)
 8004b02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <SystemInit+0x60>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <SystemInit+0x60>)
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <SystemInit+0x60>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <SystemInit+0x5c>)
 8004b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b1c:	609a      	str	r2, [r3, #8]
#endif
}
 8004b1e:	bf00      	nop
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	e000ed00 	.word	0xe000ed00
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	fef6ffff 	.word	0xfef6ffff
 8004b34:	24003010 	.word	0x24003010

08004b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b3e:	e003      	b.n	8004b48 <LoopCopyDataInit>

08004b40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b46:	3104      	adds	r1, #4

08004b48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b48:	480b      	ldr	r0, [pc, #44]	; (8004b78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b50:	d3f6      	bcc.n	8004b40 <CopyDataInit>
  ldr  r2, =_sbss
 8004b52:	4a0b      	ldr	r2, [pc, #44]	; (8004b80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b54:	e002      	b.n	8004b5c <LoopFillZerobss>

08004b56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b58:	f842 3b04 	str.w	r3, [r2], #4

08004b5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b60:	d3f9      	bcc.n	8004b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b62:	f7ff ffb3 	bl	8004acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b66:	f000 f811 	bl	8004b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b6a:	f7ff fb5f 	bl	800422c <main>
  bx  lr    
 8004b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b70:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004b74:	08004c5c 	.word	0x08004c5c
  ldr  r0, =_sdata
 8004b78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b7c:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 8004b80:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 8004b84:	2000055c 	.word	0x2000055c

08004b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b88:	e7fe      	b.n	8004b88 <ADC_IRQHandler>
	...

08004b8c <__libc_init_array>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4e0d      	ldr	r6, [pc, #52]	; (8004bc4 <__libc_init_array+0x38>)
 8004b90:	4c0d      	ldr	r4, [pc, #52]	; (8004bc8 <__libc_init_array+0x3c>)
 8004b92:	1ba4      	subs	r4, r4, r6
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	2500      	movs	r5, #0
 8004b98:	42a5      	cmp	r5, r4
 8004b9a:	d109      	bne.n	8004bb0 <__libc_init_array+0x24>
 8004b9c:	4e0b      	ldr	r6, [pc, #44]	; (8004bcc <__libc_init_array+0x40>)
 8004b9e:	4c0c      	ldr	r4, [pc, #48]	; (8004bd0 <__libc_init_array+0x44>)
 8004ba0:	f000 f83c 	bl	8004c1c <_init>
 8004ba4:	1ba4      	subs	r4, r4, r6
 8004ba6:	10a4      	asrs	r4, r4, #2
 8004ba8:	2500      	movs	r5, #0
 8004baa:	42a5      	cmp	r5, r4
 8004bac:	d105      	bne.n	8004bba <__libc_init_array+0x2e>
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bb4:	4798      	blx	r3
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	e7ee      	b.n	8004b98 <__libc_init_array+0xc>
 8004bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bbe:	4798      	blx	r3
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7f2      	b.n	8004baa <__libc_init_array+0x1e>
 8004bc4:	08004c54 	.word	0x08004c54
 8004bc8:	08004c54 	.word	0x08004c54
 8004bcc:	08004c54 	.word	0x08004c54
 8004bd0:	08004c58 	.word	0x08004c58

08004bd4 <memset>:
 8004bd4:	4402      	add	r2, r0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d100      	bne.n	8004bde <memset+0xa>
 8004bdc:	4770      	bx	lr
 8004bde:	f803 1b01 	strb.w	r1, [r3], #1
 8004be2:	e7f9      	b.n	8004bd8 <memset+0x4>

08004be4 <strcpy>:
 8004be4:	4603      	mov	r3, r0
 8004be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bea:	f803 2b01 	strb.w	r2, [r3], #1
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	d1f9      	bne.n	8004be6 <strcpy+0x2>
 8004bf2:	4770      	bx	lr

08004bf4 <strncat>:
 8004bf4:	b530      	push	{r4, r5, lr}
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	781c      	ldrb	r4, [r3, #0]
 8004bfa:	1c5d      	adds	r5, r3, #1
 8004bfc:	b944      	cbnz	r4, 8004c10 <strncat+0x1c>
 8004bfe:	f112 32ff 	adds.w	r2, r2, #4294967295
 8004c02:	d304      	bcc.n	8004c0e <strncat+0x1a>
 8004c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c08:	f803 4b01 	strb.w	r4, [r3], #1
 8004c0c:	b914      	cbnz	r4, 8004c14 <strncat+0x20>
 8004c0e:	bd30      	pop	{r4, r5, pc}
 8004c10:	462b      	mov	r3, r5
 8004c12:	e7f1      	b.n	8004bf8 <strncat+0x4>
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d1f2      	bne.n	8004bfe <strncat+0xa>
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e7f0      	b.n	8004bfe <strncat+0xa>

08004c1c <_init>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr

08004c28 <_fini>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr
