
F767ZIV1_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004818  08004818  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004010  20000014  08004834  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004024  08004834  00024024  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011948  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269b  00000000  00000000  0003198a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00034f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027e2e  00000000  00000000  00035d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbdd  00000000  00000000  0005db8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbf8d  00000000  00000000  0006976b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001656f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e80  00000000  00000000  00165774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000014 	.word	0x20000014
 800021c:	00000000 	.word	0x00000000
 8000220:	0800475c 	.word	0x0800475c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000018 	.word	0x20000018
 800023c:	0800475c 	.word	0x0800475c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000030 	.word	0x20000030
 8000570:	20000084 	.word	0x20000084

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b098      	sub	sp, #96	; 0x60
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fa9e 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f857 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8b1 	bl	80006e8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of sharedFunctionMutex */
  osMutexDef(sharedFunctionMutex);
 8000586:	2300      	movs	r3, #0
 8000588:	65bb      	str	r3, [r7, #88]	; 0x58
 800058a:	2300      	movs	r3, #0
 800058c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sharedFunctionMutexHandle = osMutexCreate(osMutex(sharedFunctionMutex));
 800058e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fd59 	bl	800204a <osMutexCreate>
 8000598:	4602      	mov	r2, r0
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <main+0xa0>)
 800059c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of toggleRed */
  osThreadDef(toggleRed, toggleRedHook, osPriorityNormal, 0, 128);
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <main+0xa4>)
 80005a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleRedHandle = osThreadCreate(osThread(toggleRed), NULL);
 80005b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fce6 	bl	8001f8a <osThreadCreate>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0xa8>)
 80005c2:	601a      	str	r2, [r3, #0]

  /* definition and creation of toggleGreen */
  osThreadDef(toggleGreen, toggleGreenHook, osPriorityNormal, 0, 128);
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <main+0xac>)
 80005c6:	f107 0420 	add.w	r4, r7, #32
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleGreenHandle = osThreadCreate(osThread(toggleGreen), NULL);
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fcd3 	bl	8001f8a <osThreadCreate>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <main+0xb0>)
 80005e8:	601a      	str	r2, [r3, #0]

  /* definition and creation of toggleYellow */
  osThreadDef(toggleYellow, toggleYellowHook, osPriorityAboveNormal, 0, 128);
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <main+0xb4>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleYellowHandle = osThreadCreate(osThread(toggleYellow), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fcc2 	bl	8001f8a <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <main+0xb8>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f001 fcb6 	bl	8001f7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x9c>
 8000612:	bf00      	nop
 8000614:	20003fd0 	.word	0x20003fd0
 8000618:	08004780 	.word	0x08004780
 800061c:	20003fd8 	.word	0x20003fd8
 8000620:	080047a8 	.word	0x080047a8
 8000624:	20003fdc 	.word	0x20003fdc
 8000628:	080047d4 	.word	0x080047d4
 800062c:	20003fd4 	.word	0x20003fd4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f883 	bl	800474a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemClock_Config+0xb4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb4>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd1b 	bl	80010d8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f926 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 ffb3 	bl	8001634 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006d4:	f000 f910 	bl	80008f8 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <MX_GPIO_Init+0xd8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <MX_GPIO_Init+0xd8>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xd8>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xd8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EYellow_GPIO_Port, EYellow_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2108      	movs	r1, #8
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <MX_GPIO_Init+0xdc>)
 800074c:	f000 fc90 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EBlue_Pin|ERed_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2109      	movs	r1, #9
 8000754:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xe0>)
 8000756:	f000 fc8b 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	481b      	ldr	r0, [pc, #108]	; (80007cc <MX_GPIO_Init+0xe4>)
 8000760:	f000 fc86 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EYellow_Pin */
  GPIO_InitStruct.Pin = EYellow_Pin;
 8000764:	2308      	movs	r3, #8
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EYellow_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <MX_GPIO_Init+0xdc>)
 800077c:	f000 face 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : EBlue_Pin ERed_Pin */
  GPIO_InitStruct.Pin = EBlue_Pin|ERed_Pin;
 8000780:	2309      	movs	r3, #9
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0xe0>)
 8000798:	f000 fac0 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : EGreen_Pin */
  GPIO_InitStruct.Pin = EGreen_Pin;
 800079c:	2308      	movs	r3, #8
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EGreen_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_GPIO_Init+0xe4>)
 80007b4:	f000 fab2 	bl	8000d1c <HAL_GPIO_Init>

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40021400 	.word	0x40021400
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <toggleRedHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_toggleRedHook */
void toggleRedHook(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_WritePin(ERed_GPIO_Port, ERed_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2108      	movs	r1, #8
 80007dc:	480f      	ldr	r0, [pc, #60]	; (800081c <toggleRedHook+0x4c>)
 80007de:	f000 fc47 	bl	8001070 <HAL_GPIO_WritePin>
		osMutexWait(sharedFunctionMutexHandle, 1000);
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <toggleRedHook+0x50>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fc46 	bl	800207c <osMutexWait>
		shared_function();
 80007f0:	f000 f84e 	bl	8000890 <shared_function>
		osMutexRelease(sharedFunctionMutexHandle);
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <toggleRedHook+0x50>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fc8d 	bl	8002118 <osMutexRelease>
		osDelay(550);
 80007fe:	f240 2026 	movw	r0, #550	; 0x226
 8000802:	f001 fc0e 	bl	8002022 <osDelay>
		HAL_GPIO_WritePin(ERed_GPIO_Port, ERed_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <toggleRedHook+0x4c>)
 800080c:	f000 fc30 	bl	8001070 <HAL_GPIO_WritePin>
		osDelay(550);
 8000810:	f240 2026 	movw	r0, #550	; 0x226
 8000814:	f001 fc05 	bl	8002022 <osDelay>
		HAL_GPIO_WritePin(ERed_GPIO_Port, ERed_Pin, GPIO_PIN_SET);
 8000818:	e7de      	b.n	80007d8 <toggleRedHook+0x8>
 800081a:	bf00      	nop
 800081c:	40020800 	.word	0x40020800
 8000820:	20003fd0 	.word	0x20003fd0

08000824 <toggleGreenHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleGreenHook */
void toggleGreenHook(void const * argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2108      	movs	r1, #8
 8000830:	480e      	ldr	r0, [pc, #56]	; (800086c <toggleGreenHook+0x48>)
 8000832:	f000 fc1d 	bl	8001070 <HAL_GPIO_WritePin>
		osMutexWait(sharedFunctionMutexHandle, 1000);
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <toggleGreenHook+0x4c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fc1c 	bl	800207c <osMutexWait>
		shared_function();
 8000844:	f000 f824 	bl	8000890 <shared_function>
		osMutexRelease(sharedFunctionMutexHandle);
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <toggleGreenHook+0x4c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fc63 	bl	8002118 <osMutexRelease>
		osDelay(200);
 8000852:	20c8      	movs	r0, #200	; 0xc8
 8000854:	f001 fbe5 	bl	8002022 <osDelay>
		HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2108      	movs	r1, #8
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <toggleGreenHook+0x48>)
 800085e:	f000 fc07 	bl	8001070 <HAL_GPIO_WritePin>
		osDelay(200);
 8000862:	20c8      	movs	r0, #200	; 0xc8
 8000864:	f001 fbdd 	bl	8002022 <osDelay>
		HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_SET);
 8000868:	e7e0      	b.n	800082c <toggleGreenHook+0x8>
 800086a:	bf00      	nop
 800086c:	40020000 	.word	0x40020000
 8000870:	20003fd0 	.word	0x20003fd0

08000874 <toggleYellowHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleYellowHook */
void toggleYellowHook(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(EYellow_GPIO_Port, EYellow_Pin);
 800087c:	2108      	movs	r1, #8
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <toggleYellowHook+0x18>)
 8000880:	f000 fc0f 	bl	80010a2 <HAL_GPIO_TogglePin>
		osDelay(50);
 8000884:	2032      	movs	r0, #50	; 0x32
 8000886:	f001 fbcc 	bl	8002022 <osDelay>
		HAL_GPIO_TogglePin(EYellow_GPIO_Port, EYellow_Pin);
 800088a:	e7f7      	b.n	800087c <toggleYellowHook+0x8>
 800088c:	40021400 	.word	0x40021400

08000890 <shared_function>:
	}
}



void shared_function() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	if( flag == 1 ) {
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <shared_function+0x3c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d10f      	bne.n	80008bc <shared_function+0x2c>
		flag = 0;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <shared_function+0x3c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(EBlue_GPIO_Port, EBlue_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2101      	movs	r1, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <shared_function+0x40>)
 80008a8:	f000 fbe2 	bl	8001070 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f000 f930 	bl	8000b14 <HAL_Delay>
		flag = 1;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <shared_function+0x3c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
	} else {
		// Show an alert turning the blue LED on
		HAL_GPIO_WritePin(EBlue_GPIO_Port, EBlue_Pin, GPIO_PIN_SET);
	}
}
 80008ba:	e004      	b.n	80008c6 <shared_function+0x36>
		HAL_GPIO_WritePin(EBlue_GPIO_Port, EBlue_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <shared_function+0x40>)
 80008c2:	f000 fbd5 	bl	8001070 <HAL_GPIO_WritePin>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000000 	.word	0x20000000
 80008d0:	40020800 	.word	0x40020800

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e6:	f000 f8f5 	bl	8000ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010000 	.word	0x40010000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x6>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 f9c3 	bl	8000cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2019      	movs	r0, #25
 8000966:	f000 f9af 	bl	8000cc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800096a:	2019      	movs	r0, #25
 800096c:	f000 f9c8 	bl	8000d00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_InitTick+0x9c>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <HAL_InitTick+0x9c>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6453      	str	r3, [r2, #68]	; 0x44
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_InitTick+0x9c>)
 800097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f830 	bl	80019f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000998:	f001 f81a 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 800099c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_InitTick+0xa0>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	0c9b      	lsrs	r3, r3, #18
 80009a8:	3b01      	subs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_InitTick+0xa4>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_InitTick+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_InitTick+0xa4>)
 80009b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_InitTick+0xa4>)
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_InitTick+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_InitTick+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <HAL_InitTick+0xa4>)
 80009ce:	f001 f845 	bl	8001a5c <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_InitTick+0xa4>)
 80009da:	f001 f875 	bl	8001ac8 <HAL_TIM_Base_Start_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20003fe0 	.word	0x20003fe0
 80009f8:	40010000 	.word	0x40010000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a2e:	f001 f875 	bl	8001b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20003fe0 	.word	0x20003fe0

08000a3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <SystemInit+0x28>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <SystemInit+0x28>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0x28>)
 8000a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a56:	609a      	str	r2, [r3, #8]
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a6e:	e003      	b.n	8000a78 <LoopCopyDataInit>

08000a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a76:	3104      	adds	r1, #4

08000a78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a80:	d3f6      	bcc.n	8000a70 <CopyDataInit>
  ldr  r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a84:	e002      	b.n	8000a8c <LoopFillZerobss>

08000a86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a88:	f842 3b04 	str.w	r3, [r2], #4

08000a8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a90:	d3f9      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd3 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 fe29 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd6b 	bl	8000574 <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000aa4:	08004820 	.word	0x08004820
  ldr  r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aac:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ab0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000ab4:	20004024 	.word	0x20004024

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>

08000aba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f8f7 	bl	8000cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff ff43 	bl	8000950 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff ff19 	bl	8000900 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	20004020 	.word	0x20004020

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20004020 	.word	0x20004020

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_Delay+0x40>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000000c 	.word	0x2000000c

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x40>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00
 8000b9c:	05fa0000 	.word	0x05fa0000

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff4c 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cda:	f7ff ff61 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff ffb1 	bl	8000c4c <NVIC_EncodePriority>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff80 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff54 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e175      	b.n	8001028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8164 	bne.w	8001022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d00b      	beq.n	8000d7a <HAL_GPIO_Init+0x5e>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6e:	2b11      	cmp	r3, #17
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x100>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80be 	beq.w	8001022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b65      	ldr	r3, [pc, #404]	; (800103c <HAL_GPIO_Init+0x320>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a64      	ldr	r2, [pc, #400]	; (800103c <HAL_GPIO_Init+0x320>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_GPIO_Init+0x320>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ebe:	4a60      	ldr	r2, [pc, #384]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_GPIO_Init+0x328>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d037      	beq.n	8000f5a <HAL_GPIO_Init+0x23e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d031      	beq.n	8000f56 <HAL_GPIO_Init+0x23a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a55      	ldr	r2, [pc, #340]	; (800104c <HAL_GPIO_Init+0x330>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02b      	beq.n	8000f52 <HAL_GPIO_Init+0x236>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a54      	ldr	r2, [pc, #336]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x232>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <HAL_GPIO_Init+0x338>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x22e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x33c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x22a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a51      	ldr	r2, [pc, #324]	; (800105c <HAL_GPIO_Init+0x340>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x226>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_GPIO_Init+0x344>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x222>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x348>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x21e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000f32:	2309      	movs	r3, #9
 8000f34:	e012      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f36:	230a      	movs	r3, #10
 8000f38:	e010      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e00e      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x240>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f6c:	4934      	ldr	r1, [pc, #208]	; (8001040 <HAL_GPIO_Init+0x324>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	; (800106c <HAL_GPIO_Init+0x350>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9e:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc8:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_GPIO_Init+0x350>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_GPIO_Init+0x350>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_GPIO_Init+0x350>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_GPIO_Init+0x350>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f ae86 	bls.w	8000d3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40022000 	.word	0x40022000
 8001068:	40022400 	.word	0x40022400
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e29b      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010fc:	4b96      	ldr	r3, [pc, #600]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	d00c      	beq.n	8001122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d112      	bne.n	800113a <HAL_RCC_OscConfig+0x62>
 8001114:	4b90      	ldr	r3, [pc, #576]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d06c      	beq.n	8001208 <HAL_RCC_OscConfig+0x130>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d168      	bne.n	8001208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e275      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x7a>
 8001144:	4b84      	ldr	r3, [pc, #528]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a83      	ldr	r2, [pc, #524]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e02e      	b.n	80011b0 <HAL_RCC_OscConfig+0xd8>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x9c>
 800115a:	4b7f      	ldr	r3, [pc, #508]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7e      	ldr	r2, [pc, #504]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b7c      	ldr	r3, [pc, #496]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a7b      	ldr	r2, [pc, #492]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xd8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0xc0>
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b73      	ldr	r3, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xd8>
 8001198:	4b6f      	ldr	r3, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6e      	ldr	r2, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a6b      	ldr	r2, [pc, #428]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff fca0 	bl	8000afc <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fc9c 	bl	8000afc <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e229      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b61      	ldr	r3, [pc, #388]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc8c 	bl	8000afc <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fc88 	bl	8000afc <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e215      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b57      	ldr	r3, [pc, #348]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x110>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d069      	beq.n	80012ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x190>
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x17a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1e9      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	493d      	ldr	r1, [pc, #244]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e040      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a38      	ldr	r2, [pc, #224]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fc3e 	bl	8000afc <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fc3a 	bl	8000afc <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1c7      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4929      	ldr	r1, [pc, #164]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
 80012b6:	e018      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc1a 	bl	8000afc <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc16 	bl	8000afc <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1a3      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d038      	beq.n	8001368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d019      	beq.n	8001332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff fbf7 	bl	8000afc <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff fbf3 	bl	8000afc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e180      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x23a>
 8001330:	e01a      	b.n	8001368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fbdd 	bl	8000afc <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fbd9 	bl	8000afc <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d903      	bls.n	800135c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e166      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
 8001358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800135e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ee      	bne.n	8001346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80a4 	beq.w	80014be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a88      	ldr	r2, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b86      	ldr	r3, [pc, #536]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139e:	4b83      	ldr	r3, [pc, #524]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013aa:	4b80      	ldr	r3, [pc, #512]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a7f      	ldr	r2, [pc, #508]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fba1 	bl	8000afc <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013be:	f7ff fb9d 	bl	8000afc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b64      	cmp	r3, #100	; 0x64
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e12a      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x31a>
 80013e4:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a6f      	ldr	r2, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	e02d      	b.n	800144e <HAL_RCC_OscConfig+0x376>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x33c>
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a6a      	ldr	r2, [pc, #424]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a67      	ldr	r2, [pc, #412]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	e01c      	b.n	800144e <HAL_RCC_OscConfig+0x376>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x35e>
 800141c:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a61      	ldr	r2, [pc, #388]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	e00b      	b.n	800144e <HAL_RCC_OscConfig+0x376>
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a5b      	ldr	r2, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d015      	beq.n	8001482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff fb51 	bl	8000afc <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff fb4d 	bl	8000afc <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f241 3288 	movw	r2, #5000	; 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0d8      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ee      	beq.n	800145e <HAL_RCC_OscConfig+0x386>
 8001480:	e014      	b.n	80014ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fb3b 	bl	8000afc <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb37 	bl	8000afc <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0c2      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ee      	bne.n	800148a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d105      	bne.n	80014be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a3c      	ldr	r2, [pc, #240]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80ae 	beq.w	8001624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d06d      	beq.n	80015b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d14b      	bne.n	8001574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb08 	bl	8000afc <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb04 	bl	8000afc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e091      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	3b01      	subs	r3, #1
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	071b      	lsls	r3, r3, #28
 800153a:	491b      	ldr	r1, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fad6 	bl	8000afc <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fad2 	bl	8000afc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e05f      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x47c>
 8001572:	e057      	b.n	8001624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fabc 	bl	8000afc <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fab8 	bl	8000afc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e045      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x4b0>
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x54c>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x558>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d030      	beq.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d129      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d122      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e0:	4013      	ands	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d119      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d10f      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 020f 	bic.w	r2, r3, #15
 8001662:	4965      	ldr	r1, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001728:	f7ff f9e8 	bl	8000afc <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff f9e4 	bl	8000afc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 020f 	bic.w	r2, r3, #15
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4601      	mov	r1, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	fa21 f303 	lsr.w	r3, r1, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1d0>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f8b2 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	080047f8 	.word	0x080047f8
 8001804:	20000004 	.word	0x20000004
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d007      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x32>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d008      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x38>
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 80b4 	bne.w	80019a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800183a:	60bb      	str	r3, [r7, #8]
      break;
 800183c:	e0b3      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001840:	60bb      	str	r3, [r7, #8]
      break;
 8001842:	e0b0      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b5a      	ldr	r3, [pc, #360]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800184e:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d04a      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185a:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	f04f 0400 	mov.w	r4, #0
 8001864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	ea03 0501 	and.w	r5, r3, r1
 8001870:	ea04 0602 	and.w	r6, r4, r2
 8001874:	4629      	mov	r1, r5
 8001876:	4632      	mov	r2, r6
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	0154      	lsls	r4, r2, #5
 8001882:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001886:	014b      	lsls	r3, r1, #5
 8001888:	4619      	mov	r1, r3
 800188a:	4622      	mov	r2, r4
 800188c:	1b49      	subs	r1, r1, r5
 800188e:	eb62 0206 	sbc.w	r2, r2, r6
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	f04f 0400 	mov.w	r4, #0
 800189a:	0194      	lsls	r4, r2, #6
 800189c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018a0:	018b      	lsls	r3, r1, #6
 80018a2:	1a5b      	subs	r3, r3, r1
 80018a4:	eb64 0402 	sbc.w	r4, r4, r2
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	00e2      	lsls	r2, r4, #3
 80018b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018b6:	00d9      	lsls	r1, r3, #3
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	195b      	adds	r3, r3, r5
 80018be:	eb44 0406 	adc.w	r4, r4, r6
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	02a2      	lsls	r2, r4, #10
 80018cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018d0:	0299      	lsls	r1, r3, #10
 80018d2:	460b      	mov	r3, r1
 80018d4:	4614      	mov	r4, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	f7fe fcac 	bl	8000240 <__aeabi_uldivmod>
 80018e8:	4603      	mov	r3, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e049      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	f04f 0400 	mov.w	r4, #0
 80018fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	ea03 0501 	and.w	r5, r3, r1
 8001906:	ea04 0602 	and.w	r6, r4, r2
 800190a:	4629      	mov	r1, r5
 800190c:	4632      	mov	r2, r6
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f04f 0400 	mov.w	r4, #0
 8001916:	0154      	lsls	r4, r2, #5
 8001918:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800191c:	014b      	lsls	r3, r1, #5
 800191e:	4619      	mov	r1, r3
 8001920:	4622      	mov	r2, r4
 8001922:	1b49      	subs	r1, r1, r5
 8001924:	eb62 0206 	sbc.w	r2, r2, r6
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f04f 0400 	mov.w	r4, #0
 8001930:	0194      	lsls	r4, r2, #6
 8001932:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	1a5b      	subs	r3, r3, r1
 800193a:	eb64 0402 	sbc.w	r4, r4, r2
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800194c:	00d9      	lsls	r1, r3, #3
 800194e:	460b      	mov	r3, r1
 8001950:	4614      	mov	r4, r2
 8001952:	195b      	adds	r3, r3, r5
 8001954:	eb44 0406 	adc.w	r4, r4, r6
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	02a2      	lsls	r2, r4, #10
 8001962:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001966:	0299      	lsls	r1, r3, #10
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	4618      	mov	r0, r3
 800196e:	4621      	mov	r1, r4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f04f 0400 	mov.w	r4, #0
 8001976:	461a      	mov	r2, r3
 8001978:	4623      	mov	r3, r4
 800197a:	f7fe fc61 	bl	8000240 <__aeabi_uldivmod>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	60bb      	str	r3, [r7, #8]
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019a2:	60bb      	str	r3, [r7, #8]
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	68bb      	ldr	r3, [r7, #8]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	00f42400 	.word	0x00f42400

080019b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_RCC_GetHCLKFreq+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff fff0 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 80019d8:	4601      	mov	r1, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08004808 	.word	0x08004808

080019f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	220f      	movs	r2, #15
 8001a06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_RCC_GetClockConfig+0x60>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 020f 	and.w	r2, r3, #15
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e01d      	b.n	8001aaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f815 	bl	8001ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 f986 	bl	8001dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_TIM_Base_Start_IT+0x50>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d00b      	beq.n	8001b0a <HAL_TIM_Base_Start_IT+0x42>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d007      	beq.n	8001b0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	00010007 	.word	0x00010007

08001b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d122      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d11b      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f905 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8f7 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f908 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0204 	mvn.w	r2, #4
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8db 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8cd 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8de 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0208 	mvn.w	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8b1 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8a3 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8b4 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0210 	mvn.w	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f887 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f879 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f88a 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0201 	mvn.w	r2, #1
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7fe fe1a 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f91a 	bl	8001f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cda:	d10e      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d107      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f90d 	bl	8001f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	d10e      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f838 	bl	8001d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d10e      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d107      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0220 	mvn.w	r2, #32
 8001d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8cd 	bl	8001eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <TIM_Base_SetConfig+0x114>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d00f      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <TIM_Base_SetConfig+0x118>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00b      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <TIM_Base_SetConfig+0x120>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <TIM_Base_SetConfig+0x40>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d108      	bne.n	8001dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <TIM_Base_SetConfig+0x114>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d027      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <TIM_Base_SetConfig+0x118>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d023      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <TIM_Base_SetConfig+0x11c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01f      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <TIM_Base_SetConfig+0x120>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01b      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d017      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <TIM_Base_SetConfig+0x128>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <TIM_Base_SetConfig+0x12c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00f      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a26      	ldr	r2, [pc, #152]	; (8001edc <TIM_Base_SetConfig+0x130>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <TIM_Base_SetConfig+0x134>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <TIM_Base_SetConfig+0x138>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <TIM_Base_SetConfig+0x13c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d108      	bne.n	8001e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <TIM_Base_SetConfig+0x114>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <TIM_Base_SetConfig+0xf8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <TIM_Base_SetConfig+0x124>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d103      	bne.n	8001eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	615a      	str	r2, [r3, #20]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40000c00 	.word	0x40000c00
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	40001800 	.word	0x40001800
 8001ee4:	40001c00 	.word	0x40001c00
 8001ee8:	40002000 	.word	0x40002000

08001eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3a:	2b84      	cmp	r3, #132	; 0x84
 8001f3c:	d005      	beq.n	8001f4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	3303      	adds	r3, #3
 8001f48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f5e:	f3ef 8305 	mrs	r3, IPSR
 8001f62:	607b      	str	r3, [r7, #4]
  return(result);
 8001f64:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f80:	f001 f964 	bl	800324c <vTaskStartScheduler>
  
  return osOK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8c:	b089      	sub	sp, #36	; 0x24
 8001f8e:	af04      	add	r7, sp, #16
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <osThreadCreate+0x54>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01c      	beq.n	8001fde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685c      	ldr	r4, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681d      	ldr	r5, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691e      	ldr	r6, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffb6 	bl	8001f28 <makeFreeRtosPriority>
 8001fbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fc6:	9202      	str	r2, [sp, #8]
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	9100      	str	r1, [sp, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4632      	mov	r2, r6
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 ff6d 	bl	8002eb2 <xTaskCreateStatic>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e01c      	b.n	8002018 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685c      	ldr	r4, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fea:	b29e      	uxth	r6, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff98 	bl	8001f28 <makeFreeRtosPriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	9200      	str	r2, [sp, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4632      	mov	r2, r6
 8002006:	4629      	mov	r1, r5
 8002008:	4620      	mov	r0, r4
 800200a:	f000 ffb2 	bl	8002f72 <xTaskCreate>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002018:	68fb      	ldr	r3, [r7, #12]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002022 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <osDelay+0x16>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	e000      	b.n	800203a <osDelay+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f001 f8d0 	bl	80031e0 <vTaskDelay>
  
  return osOK;
 8002040:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4619      	mov	r1, r3
 8002060:	2001      	movs	r0, #1
 8002062:	f000 fabc 	bl	80025de <xQueueCreateMutexStatic>
 8002066:	4603      	mov	r3, r0
 8002068:	e003      	b.n	8002072 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800206a:	2001      	movs	r0, #1
 800206c:	f000 fa9f 	bl	80025ae <xQueueCreateMutex>
 8002070:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <osMutexWait+0x18>
    return osErrorParameter;
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	e03a      	b.n	800210a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d103      	bne.n	80020a8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e009      	b.n	80020bc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <osMutexWait+0x40>
      ticks = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80020bc:	f7ff ff4c 	bl	8001f58 <inHandlerMode>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d017      	beq.n	80020f6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	461a      	mov	r2, r3
 80020cc:	2100      	movs	r1, #0
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fd44 	bl	8002b5c <xQueueReceiveFromISR>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <osMutexWait+0x62>
      return osErrorOS;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	e015      	b.n	800210a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d011      	beq.n	8002108 <osMutexWait+0x8c>
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <osMutexWait+0x98>)
 80020e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	e008      	b.n	8002108 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fc1f 	bl	800293c <xQueueSemaphoreTake>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <osMutexWait+0x8c>
    return osErrorOS;
 8002104:	23ff      	movs	r3, #255	; 0xff
 8002106:	e000      	b.n	800210a <osMutexWait+0x8e>
  }
  
  return osOK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000ed04 	.word	0xe000ed04

08002118 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002128:	f7ff ff16 	bl	8001f58 <inHandlerMode>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fb6d 	bl	8002818 <xQueueGiveFromISR>
 800213e:	4603      	mov	r3, r0
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <osMutexRelease+0x30>
      return osErrorOS;
 8002144:	23ff      	movs	r3, #255	; 0xff
 8002146:	e017      	b.n	8002178 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <osMutexRelease+0x5e>
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <osMutexRelease+0x68>)
 8002150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	e00a      	b.n	8002176 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002160:	2300      	movs	r3, #0
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa54 	bl	8002614 <xQueueGenericSend>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002172:	23ff      	movs	r3, #255	; 0xff
 8002174:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	e000ed04 	.word	0xe000ed04

08002184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0208 	add.w	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0208 	add.w	r2, r3, #8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 0208 	add.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d103      	bne.n	8002246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e00c      	b.n	8002260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3308      	adds	r3, #8
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e002      	b.n	8002254 <vListInsert+0x2e>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d2f6      	bcs.n	800224e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6892      	ldr	r2, [r2, #8]
 80022ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6852      	ldr	r2, [r2, #4]
 80022b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d103      	bne.n	80022cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	b672      	cpsid	i
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	b662      	cpsie	i
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	e7fe      	b.n	8002316 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8002318:	f001 fee6 	bl	80040e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	441a      	add	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	3b01      	subs	r3, #1
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	441a      	add	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01a      	beq.n	80023ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3310      	adds	r3, #16
 800237a:	4618      	mov	r0, r3
 800237c:	f001 f9b0 	bl	80036e0 <xTaskRemoveFromEventList>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <xQueueGenericReset+0xd0>)
 8002388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	e009      	b.n	80023ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3310      	adds	r3, #16
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fef1 	bl	8002184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3324      	adds	r3, #36	; 0x24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff feec 	bl	8002184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023ac:	f001 fece 	bl	800414c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000ed04 	.word	0xe000ed04

080023c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <xQueueGenericCreateStatic+0x2c>
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	b672      	cpsid	i
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	b662      	cpsie	i
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ea:	e7fe      	b.n	80023ea <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <xQueueGenericCreateStatic+0x4a>
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	b672      	cpsid	i
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	b662      	cpsie	i
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	e7fe      	b.n	8002408 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <xQueueGenericCreateStatic+0x56>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <xQueueGenericCreateStatic+0x5a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueGenericCreateStatic+0x5c>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <xQueueGenericCreateStatic+0x78>
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	b672      	cpsid	i
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	b662      	cpsie	i
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	e7fe      	b.n	8002436 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <xQueueGenericCreateStatic+0x84>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <xQueueGenericCreateStatic+0x88>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <xQueueGenericCreateStatic+0x8a>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <xQueueGenericCreateStatic+0xa6>
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	b672      	cpsid	i
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	b662      	cpsie	i
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	e7fe      	b.n	8002464 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002466:	2348      	movs	r3, #72	; 0x48
 8002468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b48      	cmp	r3, #72	; 0x48
 800246e:	d00b      	beq.n	8002488 <xQueueGenericCreateStatic+0xc8>
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	b672      	cpsid	i
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	b662      	cpsie	i
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e7fe      	b.n	8002486 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800249c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f846 	bl	800253c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3730      	adds	r7, #48	; 0x30
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08a      	sub	sp, #40	; 0x28
 80024be:	af02      	add	r7, sp, #8
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <xQueueGenericCreate+0x2c>
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	b672      	cpsid	i
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	b662      	cpsie	i
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e004      	b.n	80024fc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3348      	adds	r3, #72	; 0x48
 8002500:	4618      	mov	r0, r3
 8002502:	f001 ff13 	bl	800432c <pvPortMalloc>
 8002506:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d011      	beq.n	8002532 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3348      	adds	r3, #72	; 0x48
 8002516:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f805 	bl	800253c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002532:	69bb      	ldr	r3, [r7, #24]
	}
 8002534:	4618      	mov	r0, r3
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e002      	b.n	800255e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800256a:	2101      	movs	r1, #1
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	f7ff febd 	bl	80022ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800259a:	2300      	movs	r3, #0
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f837 	bl	8002614 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80025b8:	2301      	movs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	461a      	mov	r2, r3
 80025c4:	6939      	ldr	r1, [r7, #16]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff77 	bl	80024ba <xQueueGenericCreate>
 80025cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff ffd3 	bl	800257a <prvInitialiseMutex>

		return xNewQueue;
 80025d4:	68fb      	ldr	r3, [r7, #12]
	}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b088      	sub	sp, #32
 80025e2:	af02      	add	r7, sp, #8
 80025e4:	4603      	mov	r3, r0
 80025e6:	6039      	str	r1, [r7, #0]
 80025e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80025ea:	2301      	movs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7ff fedf 	bl	80023c0 <xQueueGenericCreateStatic>
 8002602:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff ffb8 	bl	800257a <prvInitialiseMutex>

		return xNewQueue;
 800260a:	68fb      	ldr	r3, [r7, #12]
	}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <xQueueGenericSend+0x34>
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	b672      	cpsid	i
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	b662      	cpsie	i
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
 8002646:	e7fe      	b.n	8002646 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <xQueueGenericSend+0x42>
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <xQueueGenericSend+0x46>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <xQueueGenericSend+0x48>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <xQueueGenericSend+0x64>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	b672      	cpsid	i
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	b662      	cpsie	i
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e7fe      	b.n	8002676 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d103      	bne.n	8002686 <xQueueGenericSend+0x72>
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <xQueueGenericSend+0x76>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueGenericSend+0x78>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <xQueueGenericSend+0x94>
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	b672      	cpsid	i
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	b662      	cpsie	i
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	e7fe      	b.n	80026a6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026a8:	f001 f9d8 	bl	8003a5c <xTaskGetSchedulerState>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <xQueueGenericSend+0xa4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <xQueueGenericSend+0xa8>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <xQueueGenericSend+0xaa>
 80026bc:	2300      	movs	r3, #0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <xQueueGenericSend+0xc6>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	b672      	cpsid	i
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	b662      	cpsie	i
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026da:	f001 fd05 	bl	80040e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <xQueueGenericSend+0xdc>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d129      	bne.n	8002744 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f6:	f000 facc 	bl	8002c92 <prvCopyDataToQueue>
 80026fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	3324      	adds	r3, #36	; 0x24
 8002708:	4618      	mov	r0, r3
 800270a:	f000 ffe9 	bl	80036e0 <xTaskRemoveFromEventList>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <xQueueGenericSend+0x200>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	e00a      	b.n	800273c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <xQueueGenericSend+0x200>)
 800272e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800273c:	f001 fd06 	bl	800414c <vPortExitCritical>
				return pdPASS;
 8002740:	2301      	movs	r3, #1
 8002742:	e063      	b.n	800280c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800274a:	f001 fcff 	bl	800414c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800274e:	2300      	movs	r3, #0
 8002750:	e05c      	b.n	800280c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f823 	bl	80037a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002762:	2301      	movs	r3, #1
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002766:	f001 fcf1 	bl	800414c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800276a:	f000 fdd1 	bl	8003310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800276e:	f001 fcbb 	bl	80040e8 <vPortEnterCritical>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002778:	b25b      	sxtb	r3, r3
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d103      	bne.n	8002788 <xQueueGenericSend+0x174>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278e:	b25b      	sxtb	r3, r3
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d103      	bne.n	800279e <xQueueGenericSend+0x18a>
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279e:	f001 fcd5 	bl	800414c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027a2:	1d3a      	adds	r2, r7, #4
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 f812 	bl	80037d4 <xTaskCheckForTimeOut>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d124      	bne.n	8002800 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b8:	f000 fb63 	bl	8002e82 <prvIsQueueFull>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	3310      	adds	r3, #16
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 ff62 	bl	8003694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d2:	f000 faee 	bl	8002db2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027d6:	f000 fda9 	bl	800332c <xTaskResumeAll>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f af7c 	bne.w	80026da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <xQueueGenericSend+0x200>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	e772      	b.n	80026da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f6:	f000 fadc 	bl	8002db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027fa:	f000 fd97 	bl	800332c <xTaskResumeAll>
 80027fe:	e76c      	b.n	80026da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002802:	f000 fad6 	bl	8002db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002806:	f000 fd91 	bl	800332c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800280a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800280c:	4618      	mov	r0, r3
 800280e:	3738      	adds	r7, #56	; 0x38
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <xQueueGiveFromISR+0x2c>
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	b672      	cpsid	i
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	b662      	cpsie	i
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	e7fe      	b.n	8002842 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <xQueueGiveFromISR+0x4c>
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	b672      	cpsid	i
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	b662      	cpsie	i
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e7fe      	b.n	8002862 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <xQueueGiveFromISR+0x5c>
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <xQueueGiveFromISR+0x60>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <xQueueGiveFromISR+0x62>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10b      	bne.n	8002896 <xQueueGiveFromISR+0x7e>
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	b672      	cpsid	i
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	b662      	cpsie	i
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e7fe      	b.n	8002894 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002896:	f001 fd07 	bl	80042a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800289a:	f3ef 8211 	mrs	r2, BASEPRI
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	b672      	cpsid	i
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	b662      	cpsie	i
 80028b2:	617a      	str	r2, [r7, #20]
 80028b4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d22b      	bcs.n	8002922 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d112      	bne.n	800290c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	3324      	adds	r3, #36	; 0x24
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fef4 	bl	80036e0 <xTaskRemoveFromEventList>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00e      	beq.n	800291c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e007      	b.n	800291c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800290c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002910:	3301      	adds	r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	b25a      	sxtb	r2, r3
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800291c:	2301      	movs	r3, #1
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	e001      	b.n	8002926 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002932:	4618      	mov	r0, r3
 8002934:	3738      	adds	r7, #56	; 0x38
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08e      	sub	sp, #56	; 0x38
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800294e:	2300      	movs	r3, #0
 8002950:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10b      	bne.n	8002970 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	b672      	cpsid	i
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	b662      	cpsie	i
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	e7fe      	b.n	800296e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <xQueueSemaphoreTake+0x54>
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	b672      	cpsid	i
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	b662      	cpsie	i
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e7fe      	b.n	800298e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002990:	f001 f864 	bl	8003a5c <xTaskGetSchedulerState>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <xQueueSemaphoreTake+0x64>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <xQueueSemaphoreTake+0x68>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <xQueueSemaphoreTake+0x6a>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <xQueueSemaphoreTake+0x86>
 80029aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ae:	b672      	cpsid	i
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	b662      	cpsie	i
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e7fe      	b.n	80029c0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029c2:	f001 fb91 	bl	80040e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d024      	beq.n	8002a1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80029e2:	f001 f9fd 	bl	8003de0 <pvTaskIncrementMutexHeldCount>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	3310      	adds	r3, #16
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fe71 	bl	80036e0 <xTaskRemoveFromEventList>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a04:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <xQueueSemaphoreTake+0x21c>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a14:	f001 fb9a 	bl	800414c <vPortExitCritical>
				return pdPASS;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e098      	b.n	8002b4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d112      	bne.n	8002a48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <xQueueSemaphoreTake+0x104>
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	b672      	cpsid	i
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	b662      	cpsie	i
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e7fe      	b.n	8002a3e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a40:	f001 fb84 	bl	800414c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e082      	b.n	8002b4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fea8 	bl	80037a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a5c:	f001 fb76 	bl	800414c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a60:	f000 fc56 	bl	8003310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a64:	f001 fb40 	bl	80040e8 <vPortEnterCritical>
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d103      	bne.n	8002a7e <xQueueSemaphoreTake+0x142>
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d103      	bne.n	8002a94 <xQueueSemaphoreTake+0x158>
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a94:	f001 fb5a 	bl	800414c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a98:	463a      	mov	r2, r7
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fe97 	bl	80037d4 <xTaskCheckForTimeOut>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d132      	bne.n	8002b12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aae:	f000 f9d2 	bl	8002e56 <prvIsQueueEmpty>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d026      	beq.n	8002b06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002ac0:	f001 fb12 	bl	80040e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 ffe5 	bl	8003a98 <xTaskPriorityInherit>
 8002ace:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002ad0:	f001 fb3c 	bl	800414c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	3324      	adds	r3, #36	; 0x24
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fdd9 	bl	8003694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ae4:	f000 f965 	bl	8002db2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ae8:	f000 fc20 	bl	800332c <xTaskResumeAll>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f47f af67 	bne.w	80029c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <xQueueSemaphoreTake+0x21c>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	e75d      	b.n	80029c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b08:	f000 f953 	bl	8002db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b0c:	f000 fc0e 	bl	800332c <xTaskResumeAll>
 8002b10:	e757      	b.n	80029c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b14:	f000 f94d 	bl	8002db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b18:	f000 fc08 	bl	800332c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b1e:	f000 f99a 	bl	8002e56 <prvIsQueueEmpty>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f43f af4c 	beq.w	80029c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002b30:	f001 fada 	bl	80040e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b36:	f000 f894 	bl	8002c62 <prvGetDisinheritPriorityAfterTimeout>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 f8b0 	bl	8003ca8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002b48:	f001 fb00 	bl	800414c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3738      	adds	r7, #56	; 0x38
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08e      	sub	sp, #56	; 0x38
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <xQueueReceiveFromISR+0x2e>
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	b672      	cpsid	i
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	b662      	cpsie	i
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	e7fe      	b.n	8002b88 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <xQueueReceiveFromISR+0x3c>
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <xQueueReceiveFromISR+0x40>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <xQueueReceiveFromISR+0x42>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10b      	bne.n	8002bba <xQueueReceiveFromISR+0x5e>
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	b672      	cpsid	i
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	b662      	cpsie	i
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bba:	f001 fb75 	bl	80042a8 <vPortValidateInterruptPriority>
	__asm volatile
 8002bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	b672      	cpsid	i
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	b662      	cpsie	i
 8002bd6:	61ba      	str	r2, [r7, #24]
 8002bd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002bda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02f      	beq.n	8002c4a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf8:	f000 f8b5 	bl	8002d66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d112      	bne.n	8002c34 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	3310      	adds	r3, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fd60 	bl	80036e0 <xTaskRemoveFromEventList>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	b25a      	sxtb	r2, r3
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002c44:	2301      	movs	r3, #1
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
 8002c48:	e001      	b.n	8002c4e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3738      	adds	r7, #56	; 0x38
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1c3 0307 	rsb	r3, r3, #7
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e001      	b.n	8002c84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002c84:	68fb      	ldr	r3, [r7, #12]
	}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d14d      	bne.n	8002d54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 ff6b 	bl	8003b98 <xTaskPriorityDisinherit>
 8002cc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	e043      	b.n	8002d54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d119      	bne.n	8002d06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6858      	ldr	r0, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	f001 fd29 	bl	8004734 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d32b      	bcc.n	8002d54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	e026      	b.n	8002d54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68d8      	ldr	r0, [r3, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	f001 fd0f 	bl	8004734 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	425b      	negs	r3, r3
 8002d20:	441a      	add	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d207      	bcs.n	8002d42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	425b      	negs	r3, r3
 8002d3c:	441a      	add	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d105      	bne.n	8002d54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d5c:	697b      	ldr	r3, [r7, #20]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d018      	beq.n	8002daa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d303      	bcc.n	8002d9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	461a      	mov	r2, r3
 8002da4:	6838      	ldr	r0, [r7, #0]
 8002da6:	f001 fcc5 	bl	8004734 <memcpy>
	}
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002dba:	f001 f995 	bl	80040e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dc6:	e011      	b.n	8002dec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3324      	adds	r3, #36	; 0x24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fc83 	bl	80036e0 <xTaskRemoveFromEventList>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002de0:	f000 fd5c 	bl	800389c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	dce9      	bgt.n	8002dc8 <prvUnlockQueue+0x16>
 8002df4:	e000      	b.n	8002df8 <prvUnlockQueue+0x46>
					break;
 8002df6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	22ff      	movs	r2, #255	; 0xff
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e00:	f001 f9a4 	bl	800414c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e04:	f001 f970 	bl	80040e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e10:	e011      	b.n	8002e36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3310      	adds	r3, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fc5e 	bl	80036e0 <xTaskRemoveFromEventList>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e2a:	f000 fd37 	bl	800389c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	dce9      	bgt.n	8002e12 <prvUnlockQueue+0x60>
 8002e3e:	e000      	b.n	8002e42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	22ff      	movs	r2, #255	; 0xff
 8002e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e4a:	f001 f97f 	bl	800414c <vPortExitCritical>
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e5e:	f001 f943 	bl	80040e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e001      	b.n	8002e74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e74:	f001 f96a 	bl	800414c <vPortExitCritical>

	return xReturn;
 8002e78:	68fb      	ldr	r3, [r7, #12]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e8a:	f001 f92d 	bl	80040e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d102      	bne.n	8002ea0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e001      	b.n	8002ea4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ea4:	f001 f952 	bl	800414c <vPortExitCritical>

	return xReturn;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b08e      	sub	sp, #56	; 0x38
 8002eb6:	af04      	add	r7, sp, #16
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <xTaskCreateStatic+0x2c>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	b672      	cpsid	i
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	b662      	cpsie	i
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	e7fe      	b.n	8002edc <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <xTaskCreateStatic+0x4a>
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	b672      	cpsid	i
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	b662      	cpsie	i
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e7fe      	b.n	8002efa <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002efc:	2354      	movs	r3, #84	; 0x54
 8002efe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b54      	cmp	r3, #84	; 0x54
 8002f04:	d00b      	beq.n	8002f1e <xTaskCreateStatic+0x6c>
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	b672      	cpsid	i
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	b662      	cpsie	i
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	e7fe      	b.n	8002f1c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01e      	beq.n	8002f64 <xTaskCreateStatic+0xb2>
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9303      	str	r3, [sp, #12]
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f850 	bl	8002ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f5e:	f000 f8d5 	bl	800310c <prvAddNewTaskToReadyList>
 8002f62:	e001      	b.n	8002f68 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f68:	697b      	ldr	r3, [r7, #20]
	}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08c      	sub	sp, #48	; 0x30
 8002f76:	af04      	add	r7, sp, #16
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f9d0 	bl	800432c <pvPortMalloc>
 8002f8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f94:	2054      	movs	r0, #84	; 0x54
 8002f96:	f001 f9c9 	bl	800432c <pvPortMalloc>
 8002f9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa8:	e005      	b.n	8002fb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f001 fa86 	bl	80044bc <vPortFree>
 8002fb0:	e001      	b.n	8002fb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9303      	str	r3, [sp, #12]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f80e 	bl	8002ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fe0:	69f8      	ldr	r0, [r7, #28]
 8002fe2:	f000 f893 	bl	800310c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	e002      	b.n	8002ff2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003014:	440b      	add	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f023 0307 	bic.w	r3, r3, #7
 8003022:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <prvInitialiseNewTask+0x4a>
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	b672      	cpsid	i
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	b662      	cpsie	i
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e7fe      	b.n	8003044 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01f      	beq.n	800308c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e012      	b.n	8003078 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	7819      	ldrb	r1, [r3, #0]
 800305a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	3334      	adds	r3, #52	; 0x34
 8003062:	460a      	mov	r2, r1
 8003064:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d9e9      	bls.n	8003052 <prvInitialiseNewTask+0x56>
 800307e:	e000      	b.n	8003082 <prvInitialiseNewTask+0x86>
			{
				break;
 8003080:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800308a:	e003      	b.n	8003094 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	2b06      	cmp	r3, #6
 8003098:	d901      	bls.n	800309e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800309a:	2306      	movs	r3, #6
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	3304      	adds	r3, #4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f885 	bl	80021c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	3318      	adds	r3, #24
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f880 	bl	80021c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	f1c3 0207 	rsb	r2, r3, #7
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	2200      	movs	r2, #0
 80030de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	69b8      	ldr	r0, [r7, #24]
 80030ee:	f000 fef1 	bl	8003ed4 <pxPortInitialiseStack>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003102:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003104:	bf00      	nop
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003114:	f000 ffe8 	bl	80040e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003118:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <prvAddNewTaskToReadyList+0xb8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <prvAddNewTaskToReadyList+0xb8>)
 8003120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <prvAddNewTaskToReadyList+0xbc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800312a:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <prvAddNewTaskToReadyList+0xbc>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <prvAddNewTaskToReadyList+0xb8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d110      	bne.n	800315a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003138:	f000 fbd4 	bl	80038e4 <prvInitialiseTaskLists>
 800313c:	e00d      	b.n	800315a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <prvAddNewTaskToReadyList+0xc0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <prvAddNewTaskToReadyList+0xbc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d802      	bhi.n	800315a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <prvAddNewTaskToReadyList+0xbc>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <prvAddNewTaskToReadyList+0xc4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <prvAddNewTaskToReadyList+0xc4>)
 8003162:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	2201      	movs	r2, #1
 800316a:	409a      	lsls	r2, r3
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <prvAddNewTaskToReadyList+0xcc>)
 8003184:	441a      	add	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f7ff f826 	bl	80021de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003192:	f000 ffdb 	bl	800414c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <prvAddNewTaskToReadyList+0xc0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00e      	beq.n	80031bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <prvAddNewTaskToReadyList+0xbc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d207      	bcs.n	80031bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <prvAddNewTaskToReadyList+0xd0>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000384 	.word	0x20000384
 80031c8:	20000284 	.word	0x20000284
 80031cc:	20000390 	.word	0x20000390
 80031d0:	200003a0 	.word	0x200003a0
 80031d4:	2000038c 	.word	0x2000038c
 80031d8:	20000288 	.word	0x20000288
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <vTaskDelay+0x64>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <vTaskDelay+0x32>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	b672      	cpsid	i
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	b662      	cpsie	i
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e7fe      	b.n	8003210 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003212:	f000 f87d 	bl	8003310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003216:	2100      	movs	r1, #0
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fdf5 	bl	8003e08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800321e:	f000 f885 	bl	800332c <xTaskResumeAll>
 8003222:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <vTaskDelay+0x68>)
 800322c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200003ac 	.word	0x200003ac
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800325a:	463a      	mov	r2, r7
 800325c:	1d39      	adds	r1, r7, #4
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f96c 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003268:	6839      	ldr	r1, [r7, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	9202      	str	r2, [sp, #8]
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	460a      	mov	r2, r1
 800327a:	491f      	ldr	r1, [pc, #124]	; (80032f8 <vTaskStartScheduler+0xac>)
 800327c:	481f      	ldr	r0, [pc, #124]	; (80032fc <vTaskStartScheduler+0xb0>)
 800327e:	f7ff fe18 	bl	8002eb2 <xTaskCreateStatic>
 8003282:	4602      	mov	r2, r0
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <vTaskStartScheduler+0xb4>)
 8003286:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <vTaskStartScheduler+0xb4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e001      	b.n	800329a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d117      	bne.n	80032d0 <vTaskStartScheduler+0x84>
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	b672      	cpsid	i
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	b662      	cpsie	i
 80032b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <vTaskStartScheduler+0xb8>)
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <vTaskStartScheduler+0xbc>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <vTaskStartScheduler+0xc0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032ca:	f000 fe91 	bl	8003ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032ce:	e00f      	b.n	80032f0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d10b      	bne.n	80032f0 <vTaskStartScheduler+0xa4>
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	b672      	cpsid	i
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	b662      	cpsie	i
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e7fe      	b.n	80032ee <vTaskStartScheduler+0xa2>
}
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	080047f0 	.word	0x080047f0
 80032fc:	080038b5 	.word	0x080038b5
 8003300:	200003a8 	.word	0x200003a8
 8003304:	200003a4 	.word	0x200003a4
 8003308:	20000390 	.word	0x20000390
 800330c:	20000388 	.word	0x20000388

08003310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <vTaskSuspendAll+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a03      	ldr	r2, [pc, #12]	; (8003328 <vTaskSuspendAll+0x18>)
 800331c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	200003ac 	.word	0x200003ac

0800332c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800333a:	4b42      	ldr	r3, [pc, #264]	; (8003444 <xTaskResumeAll+0x118>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <xTaskResumeAll+0x2e>
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	b672      	cpsid	i
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	b662      	cpsie	i
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	e7fe      	b.n	8003358 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800335a:	f000 fec5 	bl	80040e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800335e:	4b39      	ldr	r3, [pc, #228]	; (8003444 <xTaskResumeAll+0x118>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	4a37      	ldr	r2, [pc, #220]	; (8003444 <xTaskResumeAll+0x118>)
 8003366:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <xTaskResumeAll+0x118>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d161      	bne.n	8003434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003370:	4b35      	ldr	r3, [pc, #212]	; (8003448 <xTaskResumeAll+0x11c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05d      	beq.n	8003434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003378:	e02e      	b.n	80033d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <xTaskResumeAll+0x120>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3318      	adds	r3, #24
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe ff86 	bl	8002298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3304      	adds	r3, #4
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe ff81 	bl	8002298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <xTaskResumeAll+0x124>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <xTaskResumeAll+0x124>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a27      	ldr	r2, [pc, #156]	; (8003454 <xTaskResumeAll+0x128>)
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fe ff0d 	bl	80021de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <xTaskResumeAll+0x12c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <xTaskResumeAll+0x130>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <xTaskResumeAll+0x120>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1cc      	bne.n	800337a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033e6:	f000 fb19 	bl	8003a1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <xTaskResumeAll+0x134>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033f6:	f000 f837 	bl	8003468 <xTaskIncrementTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <xTaskResumeAll+0x130>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3b01      	subs	r3, #1
 800340a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f1      	bne.n	80033f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <xTaskResumeAll+0x134>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <xTaskResumeAll+0x130>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <xTaskResumeAll+0x138>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003434:	f000 fe8a 	bl	800414c <vPortExitCritical>

	return xAlreadyYielded;
 8003438:	68bb      	ldr	r3, [r7, #8]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200003ac 	.word	0x200003ac
 8003448:	20000384 	.word	0x20000384
 800344c:	20000344 	.word	0x20000344
 8003450:	2000038c 	.word	0x2000038c
 8003454:	20000288 	.word	0x20000288
 8003458:	20000284 	.word	0x20000284
 800345c:	20000398 	.word	0x20000398
 8003460:	20000394 	.word	0x20000394
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003472:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <xTaskIncrementTick+0x148>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 8089 	bne.w	800358e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800347c:	4b4d      	ldr	r3, [pc, #308]	; (80035b4 <xTaskIncrementTick+0x14c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003484:	4a4b      	ldr	r2, [pc, #300]	; (80035b4 <xTaskIncrementTick+0x14c>)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d121      	bne.n	80034d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <xTaskIncrementTick+0x150>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <xTaskIncrementTick+0x4a>
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	b672      	cpsid	i
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	b662      	cpsie	i
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	e7fe      	b.n	80034b0 <xTaskIncrementTick+0x48>
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <xTaskIncrementTick+0x150>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <xTaskIncrementTick+0x154>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <xTaskIncrementTick+0x150>)
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <xTaskIncrementTick+0x154>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <xTaskIncrementTick+0x158>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	4a3c      	ldr	r2, [pc, #240]	; (80035c0 <xTaskIncrementTick+0x158>)
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	f000 faa4 	bl	8003a1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <xTaskIncrementTick+0x15c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d348      	bcc.n	8003570 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <xTaskIncrementTick+0x150>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <xTaskIncrementTick+0x15c>)
 80034ea:	f04f 32ff 	mov.w	r2, #4294967295
 80034ee:	601a      	str	r2, [r3, #0]
					break;
 80034f0:	e03e      	b.n	8003570 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <xTaskIncrementTick+0x150>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d203      	bcs.n	8003512 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800350a:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <xTaskIncrementTick+0x15c>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003510:	e02e      	b.n	8003570 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3304      	adds	r3, #4
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe febe 	bl	8002298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3318      	adds	r3, #24
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe feb5 	bl	8002298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	2201      	movs	r2, #1
 8003534:	409a      	lsls	r2, r3
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <xTaskIncrementTick+0x160>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <xTaskIncrementTick+0x160>)
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <xTaskIncrementTick+0x164>)
 800354e:	441a      	add	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f7fe fe41 	bl	80021de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <xTaskIncrementTick+0x168>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	429a      	cmp	r2, r3
 8003568:	d3b9      	bcc.n	80034de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800356e:	e7b6      	b.n	80034de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <xTaskIncrementTick+0x168>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003576:	4915      	ldr	r1, [pc, #84]	; (80035cc <xTaskIncrementTick+0x164>)
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d907      	bls.n	8003598 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e004      	b.n	8003598 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <xTaskIncrementTick+0x16c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <xTaskIncrementTick+0x16c>)
 8003596:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <xTaskIncrementTick+0x170>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035a4:	697b      	ldr	r3, [r7, #20]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200003ac 	.word	0x200003ac
 80035b4:	20000388 	.word	0x20000388
 80035b8:	2000033c 	.word	0x2000033c
 80035bc:	20000340 	.word	0x20000340
 80035c0:	2000039c 	.word	0x2000039c
 80035c4:	200003a4 	.word	0x200003a4
 80035c8:	2000038c 	.word	0x2000038c
 80035cc:	20000288 	.word	0x20000288
 80035d0:	20000284 	.word	0x20000284
 80035d4:	20000394 	.word	0x20000394
 80035d8:	20000398 	.word	0x20000398

080035dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <vTaskSwitchContext+0xa4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035ea:	4b26      	ldr	r3, [pc, #152]	; (8003684 <vTaskSwitchContext+0xa8>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035f0:	e040      	b.n	8003674 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <vTaskSwitchContext+0xa8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <vTaskSwitchContext+0xac>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003606:	7afb      	ldrb	r3, [r7, #11]
 8003608:	f1c3 031f 	rsb	r3, r3, #31
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	491f      	ldr	r1, [pc, #124]	; (800368c <vTaskSwitchContext+0xb0>)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	b672      	cpsid	i
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	b662      	cpsie	i
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	e7fe      	b.n	8003638 <vTaskSwitchContext+0x5c>
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4a11      	ldr	r2, [pc, #68]	; (800368c <vTaskSwitchContext+0xb0>)
 8003646:	4413      	add	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3308      	adds	r3, #8
 800365c:	429a      	cmp	r2, r3
 800365e:	d104      	bne.n	800366a <vTaskSwitchContext+0x8e>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <vTaskSwitchContext+0xb4>)
 8003672:	6013      	str	r3, [r2, #0]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	200003ac 	.word	0x200003ac
 8003684:	20000398 	.word	0x20000398
 8003688:	2000038c 	.word	0x2000038c
 800368c:	20000288 	.word	0x20000288
 8003690:	20000284 	.word	0x20000284

08003694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <vTaskPlaceOnEventList+0x28>
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	b672      	cpsid	i
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	b662      	cpsie	i
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e7fe      	b.n	80036ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <vTaskPlaceOnEventList+0x48>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3318      	adds	r3, #24
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe fdae 	bl	8002226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036ca:	2101      	movs	r1, #1
 80036cc:	6838      	ldr	r0, [r7, #0]
 80036ce:	f000 fb9b 	bl	8003e08 <prvAddCurrentTaskToDelayedList>
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000284 	.word	0x20000284

080036e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <xTaskRemoveFromEventList+0x2e>
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	b672      	cpsid	i
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	b662      	cpsie	i
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e7fe      	b.n	800370c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	3318      	adds	r3, #24
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fdc0 	bl	8002298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <xTaskRemoveFromEventList+0xb0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11c      	bne.n	800375a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	3304      	adds	r3, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fdb7 	bl	8002298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	2201      	movs	r2, #1
 8003730:	409a      	lsls	r2, r3
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <xTaskRemoveFromEventList+0xb4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	4a16      	ldr	r2, [pc, #88]	; (8003794 <xTaskRemoveFromEventList+0xb4>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4a13      	ldr	r2, [pc, #76]	; (8003798 <xTaskRemoveFromEventList+0xb8>)
 800374a:	441a      	add	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f7fe fd43 	bl	80021de <vListInsertEnd>
 8003758:	e005      	b.n	8003766 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	3318      	adds	r3, #24
 800375e:	4619      	mov	r1, r3
 8003760:	480e      	ldr	r0, [pc, #56]	; (800379c <xTaskRemoveFromEventList+0xbc>)
 8003762:	f7fe fd3c 	bl	80021de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <xTaskRemoveFromEventList+0xc0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	429a      	cmp	r2, r3
 8003772:	d905      	bls.n	8003780 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <xTaskRemoveFromEventList+0xc4>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e001      	b.n	8003784 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003784:	697b      	ldr	r3, [r7, #20]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200003ac 	.word	0x200003ac
 8003794:	2000038c 	.word	0x2000038c
 8003798:	20000288 	.word	0x20000288
 800379c:	20000344 	.word	0x20000344
 80037a0:	20000284 	.word	0x20000284
 80037a4:	20000398 	.word	0x20000398

080037a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <vTaskInternalSetTimeOutState+0x24>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <vTaskInternalSetTimeOutState+0x28>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	605a      	str	r2, [r3, #4]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	2000039c 	.word	0x2000039c
 80037d0:	20000388 	.word	0x20000388

080037d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <xTaskCheckForTimeOut+0x28>
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	b672      	cpsid	i
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	b662      	cpsie	i
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e7fe      	b.n	80037fa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <xTaskCheckForTimeOut+0x46>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	b672      	cpsid	i
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	b662      	cpsie	i
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e7fe      	b.n	8003818 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800381a:	f000 fc65 	bl	80040e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <xTaskCheckForTimeOut+0xc0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d102      	bne.n	800383e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e023      	b.n	8003886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <xTaskCheckForTimeOut+0xc4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d007      	beq.n	800385a <xTaskCheckForTimeOut+0x86>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003854:	2301      	movs	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e015      	b.n	8003886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d20b      	bcs.n	800387c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff99 	bl	80037a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e004      	b.n	8003886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003886:	f000 fc61 	bl	800414c <vPortExitCritical>

	return xReturn;
 800388a:	69fb      	ldr	r3, [r7, #28]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000388 	.word	0x20000388
 8003898:	2000039c 	.word	0x2000039c

0800389c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <vTaskMissedYield+0x14>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000398 	.word	0x20000398

080038b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038bc:	f000 f852 	bl	8003964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <prvIdleTask+0x28>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d9f9      	bls.n	80038bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <prvIdleTask+0x2c>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038d8:	e7f0      	b.n	80038bc <prvIdleTask+0x8>
 80038da:	bf00      	nop
 80038dc:	20000288 	.word	0x20000288
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	e00c      	b.n	800390a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <prvInitialiseTaskLists+0x60>)
 80038fc:	4413      	add	r3, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fc40 	bl	8002184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3301      	adds	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b06      	cmp	r3, #6
 800390e:	d9ef      	bls.n	80038f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003910:	480d      	ldr	r0, [pc, #52]	; (8003948 <prvInitialiseTaskLists+0x64>)
 8003912:	f7fe fc37 	bl	8002184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003916:	480d      	ldr	r0, [pc, #52]	; (800394c <prvInitialiseTaskLists+0x68>)
 8003918:	f7fe fc34 	bl	8002184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800391c:	480c      	ldr	r0, [pc, #48]	; (8003950 <prvInitialiseTaskLists+0x6c>)
 800391e:	f7fe fc31 	bl	8002184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003922:	480c      	ldr	r0, [pc, #48]	; (8003954 <prvInitialiseTaskLists+0x70>)
 8003924:	f7fe fc2e 	bl	8002184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003928:	480b      	ldr	r0, [pc, #44]	; (8003958 <prvInitialiseTaskLists+0x74>)
 800392a:	f7fe fc2b 	bl	8002184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <prvInitialiseTaskLists+0x78>)
 8003930:	4a05      	ldr	r2, [pc, #20]	; (8003948 <prvInitialiseTaskLists+0x64>)
 8003932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <prvInitialiseTaskLists+0x7c>)
 8003936:	4a05      	ldr	r2, [pc, #20]	; (800394c <prvInitialiseTaskLists+0x68>)
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000288 	.word	0x20000288
 8003948:	20000314 	.word	0x20000314
 800394c:	20000328 	.word	0x20000328
 8003950:	20000344 	.word	0x20000344
 8003954:	20000358 	.word	0x20000358
 8003958:	20000370 	.word	0x20000370
 800395c:	2000033c 	.word	0x2000033c
 8003960:	20000340 	.word	0x20000340

08003964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800396a:	e019      	b.n	80039a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800396c:	f000 fbbc 	bl	80040e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <prvCheckTasksWaitingTermination+0x4c>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fc8b 	bl	8002298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <prvCheckTasksWaitingTermination+0x50>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3b01      	subs	r3, #1
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <prvCheckTasksWaitingTermination+0x50>)
 800398a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvCheckTasksWaitingTermination+0x54>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <prvCheckTasksWaitingTermination+0x54>)
 8003994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003996:	f000 fbd9 	bl	800414c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f80e 	bl	80039bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <prvCheckTasksWaitingTermination+0x54>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e1      	bne.n	800396c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000358 	.word	0x20000358
 80039b4:	20000384 	.word	0x20000384
 80039b8:	2000036c 	.word	0x2000036c

080039bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fd72 	bl	80044bc <vPortFree>
				vPortFree( pxTCB );
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fd6f 	bl	80044bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039de:	e019      	b.n	8003a14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d103      	bne.n	80039f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fd66 	bl	80044bc <vPortFree>
	}
 80039f0:	e010      	b.n	8003a14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d00b      	beq.n	8003a14 <prvDeleteTCB+0x58>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	b672      	cpsid	i
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	b662      	cpsie	i
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e7fe      	b.n	8003a12 <prvDeleteTCB+0x56>
	}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <prvResetNextTaskUnblockTime+0x38>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvResetNextTaskUnblockTime+0x3c>)
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a34:	e008      	b.n	8003a48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvResetNextTaskUnblockTime+0x38>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <prvResetNextTaskUnblockTime+0x3c>)
 8003a46:	6013      	str	r3, [r2, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	2000033c 	.word	0x2000033c
 8003a58:	200003a4 	.word	0x200003a4

08003a5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <xTaskGetSchedulerState+0x34>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	e008      	b.n	8003a82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <xTaskGetSchedulerState+0x38>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	e001      	b.n	8003a82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a82:	687b      	ldr	r3, [r7, #4]
	}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000390 	.word	0x20000390
 8003a94:	200003ac 	.word	0x200003ac

08003a98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d069      	beq.n	8003b82 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <xTaskPriorityInherit+0xf4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d259      	bcs.n	8003b70 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db06      	blt.n	8003ad2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac4:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <xTaskPriorityInherit+0xf4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f1c3 0207 	rsb	r2, r3, #7
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6959      	ldr	r1, [r3, #20]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <xTaskPriorityInherit+0xf8>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4299      	cmp	r1, r3
 8003ae8:	d13a      	bne.n	8003b60 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fbd2 	bl	8002298 <uxListRemove>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d115      	bne.n	8003b26 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4924      	ldr	r1, [pc, #144]	; (8003b90 <xTaskPriorityInherit+0xf8>)
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xTaskPriorityInherit+0x8e>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2201      	movs	r2, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <xTaskPriorityInherit+0xfc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4013      	ands	r3, r2
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <xTaskPriorityInherit+0xfc>)
 8003b24:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <xTaskPriorityInherit+0xf4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <xTaskPriorityInherit+0xfc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <xTaskPriorityInherit+0xfc>)
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <xTaskPriorityInherit+0xf8>)
 8003b50:	441a      	add	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7fe fb40 	bl	80021de <vListInsertEnd>
 8003b5e:	e004      	b.n	8003b6a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <xTaskPriorityInherit+0xf4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	e008      	b.n	8003b82 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <xTaskPriorityInherit+0xf4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d201      	bcs.n	8003b82 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b82:	68fb      	ldr	r3, [r7, #12]
	}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000284 	.word	0x20000284
 8003b90:	20000288 	.word	0x20000288
 8003b94:	2000038c 	.word	0x2000038c

08003b98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d070      	beq.n	8003c90 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <xTaskPriorityDisinherit+0x104>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d00b      	beq.n	8003bd0 <xTaskPriorityDisinherit+0x38>
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	b672      	cpsid	i
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	b662      	cpsie	i
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	e7fe      	b.n	8003bce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <xTaskPriorityDisinherit+0x58>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	b672      	cpsid	i
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	b662      	cpsie	i
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	e7fe      	b.n	8003bee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d044      	beq.n	8003c90 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d140      	bne.n	8003c90 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fb40 	bl	8002298 <uxListRemove>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d115      	bne.n	8003c4a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <xTaskPriorityDisinherit+0x108>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xTaskPriorityDisinherit+0xb2>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <xTaskPriorityDisinherit+0x10c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <xTaskPriorityDisinherit+0x10c>)
 8003c48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f1c3 0207 	rsb	r2, r3, #7
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <xTaskPriorityDisinherit+0x10c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <xTaskPriorityDisinherit+0x10c>)
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <xTaskPriorityDisinherit+0x108>)
 8003c7e:	441a      	add	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fe faa9 	bl	80021de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c90:	697b      	ldr	r3, [r7, #20]
	}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000284 	.word	0x20000284
 8003ca0:	20000288 	.word	0x20000288
 8003ca4:	2000038c 	.word	0x2000038c

08003ca8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8085 	beq.w	8003dcc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	b672      	cpsid	i
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	b662      	cpsie	i
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e7fe      	b.n	8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d902      	bls.n	8003cf2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e002      	b.n	8003cf8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d064      	beq.n	8003dcc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d15f      	bne.n	8003dcc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d10b      	bne.n	8003d2e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	b672      	cpsid	i
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	b662      	cpsie	i
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	e7fe      	b.n	8003d2c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db04      	blt.n	8003d4c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f1c3 0207 	rsb	r2, r3, #7
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6959      	ldr	r1, [r3, #20]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	d134      	bne.n	8003dcc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fa96 	bl	8002298 <uxListRemove>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d115      	bne.n	8003d9e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	4918      	ldr	r1, [pc, #96]	; (8003dd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003d9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	4a0b      	ldr	r2, [pc, #44]	; (8003ddc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003dbe:	441a      	add	r2, r3
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe fa09 	bl	80021de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dcc:	bf00      	nop
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000284 	.word	0x20000284
 8003dd8:	20000288 	.word	0x20000288
 8003ddc:	2000038c 	.word	0x2000038c

08003de0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <pvTaskIncrementMutexHeldCount+0x24>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df2:	3201      	adds	r2, #1
 8003df4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003df6:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <pvTaskIncrementMutexHeldCount+0x24>)
 8003df8:	681b      	ldr	r3, [r3, #0]
	}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000284 	.word	0x20000284

08003e08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fa3a 	bl	8002298 <uxListRemove>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	2201      	movs	r2, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43da      	mvns	r2, r3
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d10a      	bne.n	8003e60 <prvAddCurrentTaskToDelayedList+0x58>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e5a:	f7fe f9c0 	bl	80021de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e5e:	e026      	b.n	8003eae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d209      	bcs.n	8003e8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe f9ce 	bl	8002226 <vListInsert>
}
 8003e8a:	e010      	b.n	8003eae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe f9c4 	bl	8002226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d202      	bcs.n	8003eae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6013      	str	r3, [r2, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000388 	.word	0x20000388
 8003ebc:	20000284 	.word	0x20000284
 8003ec0:	2000038c 	.word	0x2000038c
 8003ec4:	20000370 	.word	0x20000370
 8003ec8:	20000340 	.word	0x20000340
 8003ecc:	2000033c 	.word	0x2000033c
 8003ed0:	200003a4 	.word	0x200003a4

08003ed4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3b04      	subs	r3, #4
 8003f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f04:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <pxPortInitialiseStack+0x64>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b14      	subs	r3, #20
 8003f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b04      	subs	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f06f 0202 	mvn.w	r2, #2
 8003f22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b20      	subs	r3, #32
 8003f28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	08003f3d 	.word	0x08003f3d

08003f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <prvTaskExitError+0x58>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d00b      	beq.n	8003f68 <prvTaskExitError+0x2c>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	b672      	cpsid	i
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	b662      	cpsie	i
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	e7fe      	b.n	8003f66 <prvTaskExitError+0x2a>
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	b672      	cpsid	i
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	b662      	cpsie	i
 8003f7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f7e:	bf00      	nop
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0fc      	beq.n	8003f80 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000010 	.word	0x20000010
	...

08003fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <pxCurrentTCBConst2>)
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	6808      	ldr	r0, [r1, #0]
 8003fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003faa:	f380 8809 	msr	PSP, r0
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8811 	msr	BASEPRI, r0
 8003fba:	4770      	bx	lr
 8003fbc:	f3af 8000 	nop.w

08003fc0 <pxCurrentTCBConst2>:
 8003fc0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop

08003fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003fc8:	4808      	ldr	r0, [pc, #32]	; (8003fec <prvPortStartFirstTask+0x24>)
 8003fca:	6800      	ldr	r0, [r0, #0]
 8003fcc:	6800      	ldr	r0, [r0, #0]
 8003fce:	f380 8808 	msr	MSP, r0
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8814 	msr	CONTROL, r0
 8003fda:	b662      	cpsie	i
 8003fdc:	b661      	cpsie	f
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	df00      	svc	0
 8003fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fea:	bf00      	nop
 8003fec:	e000ed08 	.word	0xe000ed08

08003ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <xPortStartScheduler+0xe0>)
 8003ff8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <xPortStartScheduler+0xe4>)
 800401c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <xPortStartScheduler+0xe8>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004024:	e009      	b.n	800403a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004026:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <xPortStartScheduler+0xe8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3b01      	subs	r3, #1
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <xPortStartScheduler+0xe8>)
 800402e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d0ef      	beq.n	8004026 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <xPortStartScheduler+0xe8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	d00b      	beq.n	800406a <xPortStartScheduler+0x7a>
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	b672      	cpsid	i
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	b662      	cpsie	i
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	e7fe      	b.n	8004068 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <xPortStartScheduler+0xe8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <xPortStartScheduler+0xe8>)
 8004072:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004074:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <xPortStartScheduler+0xe8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <xPortStartScheduler+0xe8>)
 800407e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <xPortStartScheduler+0xec>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a13      	ldr	r2, [pc, #76]	; (80040dc <xPortStartScheduler+0xec>)
 800408e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004092:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <xPortStartScheduler+0xec>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a10      	ldr	r2, [pc, #64]	; (80040dc <xPortStartScheduler+0xec>)
 800409a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800409e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040a0:	f000 f8d4 	bl	800424c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <xPortStartScheduler+0xf0>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040aa:	f000 f8f3 	bl	8004294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <xPortStartScheduler+0xf4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <xPortStartScheduler+0xf4>)
 80040b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040ba:	f7ff ff85 	bl	8003fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040be:	f7ff fa8d 	bl	80035dc <vTaskSwitchContext>
	prvTaskExitError();
 80040c2:	f7ff ff3b 	bl	8003f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	e000e400 	.word	0xe000e400
 80040d4:	200003b0 	.word	0x200003b0
 80040d8:	200003b4 	.word	0x200003b4
 80040dc:	e000ed20 	.word	0xe000ed20
 80040e0:	20000010 	.word	0x20000010
 80040e4:	e000ef34 	.word	0xe000ef34

080040e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	b672      	cpsid	i
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	b662      	cpsie	i
 8004102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <vPortEnterCritical+0x5c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <vPortEnterCritical+0x5c>)
 800410c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <vPortEnterCritical+0x5c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d110      	bne.n	8004138 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <vPortEnterCritical+0x60>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <vPortEnterCritical+0x50>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	b672      	cpsid	i
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	b662      	cpsie	i
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	e7fe      	b.n	8004136 <vPortEnterCritical+0x4e>
	}
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	20000010 	.word	0x20000010
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <vPortExitCritical+0x50>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <vPortExitCritical+0x26>
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	b672      	cpsid	i
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	b662      	cpsie	i
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	e7fe      	b.n	8004170 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <vPortExitCritical+0x50>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	4a08      	ldr	r2, [pc, #32]	; (800419c <vPortExitCritical+0x50>)
 800417a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <vPortExitCritical+0x50>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <vPortExitCritical+0x42>
 8004184:	2300      	movs	r3, #0
 8004186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000010 	.word	0x20000010

080041a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041a0:	f3ef 8009 	mrs	r0, PSP
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <pxCurrentTCBConst>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f01e 0f10 	tst.w	lr, #16
 80041b0:	bf08      	it	eq
 80041b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041c4:	b672      	cpsid	i
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	b662      	cpsie	i
 80041d4:	f7ff fa02 	bl	80035dc <vTaskSwitchContext>
 80041d8:	f04f 0000 	mov.w	r0, #0
 80041dc:	f380 8811 	msr	BASEPRI, r0
 80041e0:	bc09      	pop	{r0, r3}
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	f01e 0f10 	tst.w	lr, #16
 80041ee:	bf08      	it	eq
 80041f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041f4:	f380 8809 	msr	PSP, r0
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop

08004200 <pxCurrentTCBConst>:
 8004200:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	b672      	cpsid	i
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	b662      	cpsie	i
 8004222:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004224:	f7ff f920 	bl	8003468 <xTaskIncrementTick>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <SysTick_Handler+0x40>)
 8004230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	603b      	str	r3, [r7, #0]
	__asm volatile
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <vPortSetupTimerInterrupt+0x38>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <vPortSetupTimerInterrupt+0x3c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <vPortSetupTimerInterrupt+0x40>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <vPortSetupTimerInterrupt+0x44>)
 800426a:	3b01      	subs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e010 	.word	0xe000e010
 8004284:	e000e018 	.word	0xe000e018
 8004288:	20000004 	.word	0x20000004
 800428c:	10624dd3 	.word	0x10624dd3
 8004290:	e000e014 	.word	0xe000e014

08004294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042a4 <vPortEnableVFP+0x10>
 8004298:	6801      	ldr	r1, [r0, #0]
 800429a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800429e:	6001      	str	r1, [r0, #0]
 80042a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042a2:	bf00      	nop
 80042a4:	e000ed88 	.word	0xe000ed88

080042a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042ae:	f3ef 8305 	mrs	r3, IPSR
 80042b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	d915      	bls.n	80042e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <vPortValidateInterruptPriority+0x74>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042c4:	4b16      	ldr	r3, [pc, #88]	; (8004320 <vPortValidateInterruptPriority+0x78>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	7afa      	ldrb	r2, [r7, #11]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d20b      	bcs.n	80042e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	b672      	cpsid	i
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	b662      	cpsie	i
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e7fe      	b.n	80042e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <vPortValidateInterruptPriority+0x7c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <vPortValidateInterruptPriority+0x80>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d90b      	bls.n	800430e <vPortValidateInterruptPriority+0x66>
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	b672      	cpsid	i
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	b662      	cpsie	i
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	e7fe      	b.n	800430c <vPortValidateInterruptPriority+0x64>
	}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000e3f0 	.word	0xe000e3f0
 8004320:	200003b0 	.word	0x200003b0
 8004324:	e000ed0c 	.word	0xe000ed0c
 8004328:	200003b4 	.word	0x200003b4

0800432c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004338:	f7fe ffea 	bl	8003310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800433c:	4b5a      	ldr	r3, [pc, #360]	; (80044a8 <pvPortMalloc+0x17c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004344:	f000 f916 	bl	8004574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004348:	4b58      	ldr	r3, [pc, #352]	; (80044ac <pvPortMalloc+0x180>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 8090 	bne.w	8004476 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01e      	beq.n	800439a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800435c:	2208      	movs	r2, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f023 0307 	bic.w	r3, r3, #7
 8004374:	3308      	adds	r3, #8
 8004376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <pvPortMalloc+0x6e>
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	b672      	cpsid	i
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	b662      	cpsie	i
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e7fe      	b.n	8004398 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d06a      	beq.n	8004476 <pvPortMalloc+0x14a>
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <pvPortMalloc+0x184>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d865      	bhi.n	8004476 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <pvPortMalloc+0x188>)
 80043ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <pvPortMalloc+0x188>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043b4:	e004      	b.n	80043c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d903      	bls.n	80043d2 <pvPortMalloc+0xa6>
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f1      	bne.n	80043b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <pvPortMalloc+0x17c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d8:	429a      	cmp	r2, r3
 80043da:	d04c      	beq.n	8004476 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	4413      	add	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	2308      	movs	r3, #8
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d920      	bls.n	8004440 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <pvPortMalloc+0xfc>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	b672      	cpsid	i
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	b662      	cpsie	i
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e7fe      	b.n	8004426 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800443a:	69b8      	ldr	r0, [r7, #24]
 800443c:	f000 f8fc 	bl	8004638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <pvPortMalloc+0x184>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <pvPortMalloc+0x184>)
 800444c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <pvPortMalloc+0x184>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <pvPortMalloc+0x18c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d203      	bcs.n	8004462 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <pvPortMalloc+0x184>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <pvPortMalloc+0x18c>)
 8004460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <pvPortMalloc+0x180>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	431a      	orrs	r2, r3
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004476:	f7fe ff59 	bl	800332c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <pvPortMalloc+0x170>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	b672      	cpsid	i
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	b662      	cpsie	i
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e7fe      	b.n	800449a <pvPortMalloc+0x16e>
	return pvReturn;
 800449c:	69fb      	ldr	r3, [r7, #28]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20003fc0 	.word	0x20003fc0
 80044ac:	20003fcc 	.word	0x20003fcc
 80044b0:	20003fc4 	.word	0x20003fc4
 80044b4:	20003fb8 	.word	0x20003fb8
 80044b8:	20003fc8 	.word	0x20003fc8

080044bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04a      	beq.n	8004564 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044ce:	2308      	movs	r3, #8
 80044d0:	425b      	negs	r3, r3
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b22      	ldr	r3, [pc, #136]	; (800456c <vPortFree+0xb0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <vPortFree+0x46>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	b672      	cpsid	i
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	b662      	cpsie	i
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e7fe      	b.n	8004500 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <vPortFree+0x66>
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	b672      	cpsid	i
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	b662      	cpsie	i
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e7fe      	b.n	8004520 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <vPortFree+0xb0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d019      	beq.n	8004564 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <vPortFree+0xb0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004548:	f7fe fee2 	bl	8003310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <vPortFree+0xb4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4413      	add	r3, r2
 8004556:	4a06      	ldr	r2, [pc, #24]	; (8004570 <vPortFree+0xb4>)
 8004558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800455a:	6938      	ldr	r0, [r7, #16]
 800455c:	f000 f86c 	bl	8004638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004560:	f7fe fee4 	bl	800332c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004564:	bf00      	nop
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20003fcc 	.word	0x20003fcc
 8004570:	20003fc4 	.word	0x20003fc4

08004574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800457a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800457e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <prvHeapInit+0xac>)
 8004582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3307      	adds	r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <prvHeapInit+0xac>)
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <prvHeapInit+0xb0>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <prvHeapInit+0xb0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045c0:	2208      	movs	r2, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <prvHeapInit+0xb4>)
 80045d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <prvHeapInit+0xb4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <prvHeapInit+0xb4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <prvHeapInit+0xb4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <prvHeapInit+0xb8>)
 8004602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <prvHeapInit+0xbc>)
 800460a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <prvHeapInit+0xc0>)
 800460e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	200003b8 	.word	0x200003b8
 8004624:	20003fb8 	.word	0x20003fb8
 8004628:	20003fc0 	.word	0x20003fc0
 800462c:	20003fc8 	.word	0x20003fc8
 8004630:	20003fc4 	.word	0x20003fc4
 8004634:	20003fcc 	.word	0x20003fcc

08004638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <prvInsertBlockIntoFreeList+0xac>)
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e002      	b.n	800464c <prvInsertBlockIntoFreeList+0x14>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d8f7      	bhi.n	8004646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d108      	bne.n	800467a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d118      	bne.n	80046c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d00d      	beq.n	80046b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e008      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e003      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d002      	beq.n	80046d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20003fb8 	.word	0x20003fb8
 80046e8:	20003fc0 	.word	0x20003fc0

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4e0d      	ldr	r6, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1ba4      	subs	r4, r4, r6
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2500      	movs	r5, #0
 80046f8:	42a5      	cmp	r5, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4e0b      	ldr	r6, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f000 f82c 	bl	800475c <_init>
 8004704:	1ba4      	subs	r4, r4, r6
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2500      	movs	r5, #0
 800470a:	42a5      	cmp	r5, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004714:	4798      	blx	r3
 8004716:	3501      	adds	r5, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471e:	4798      	blx	r3
 8004720:	3501      	adds	r5, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08004818 	.word	0x08004818
 8004728:	08004818 	.word	0x08004818
 800472c:	08004818 	.word	0x08004818
 8004730:	0800481c 	.word	0x0800481c

08004734 <memcpy>:
 8004734:	b510      	push	{r4, lr}
 8004736:	1e43      	subs	r3, r0, #1
 8004738:	440a      	add	r2, r1
 800473a:	4291      	cmp	r1, r2
 800473c:	d100      	bne.n	8004740 <memcpy+0xc>
 800473e:	bd10      	pop	{r4, pc}
 8004740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004748:	e7f7      	b.n	800473a <memcpy+0x6>

0800474a <memset>:
 800474a:	4402      	add	r2, r0
 800474c:	4603      	mov	r3, r0
 800474e:	4293      	cmp	r3, r2
 8004750:	d100      	bne.n	8004754 <memset+0xa>
 8004752:	4770      	bx	lr
 8004754:	f803 1b01 	strb.w	r1, [r3], #1
 8004758:	e7f9      	b.n	800474e <memset+0x4>
	...

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
