
F767ZIV1_Priority_inversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004090  20000010  08006014  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a0  08006014  000240a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aee  00000000  00000000  0003451e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  000381c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000288d4  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da33  00000000  00000000  00061afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010159f  00000000  00000000  0006f52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  00170b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08005d6c 	.word	0x08005d6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08005d6c 	.word	0x08005d6c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000002c 	.word	0x2000002c
 8000570:	20000080 	.word	0x20000080

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b098      	sub	sp, #96	; 0x60
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fc42 	bl	8000e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f859 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f903 	bl	800078c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f8d1 	bl	800072c <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of sharedFunctionBS */
  osSemaphoreDef(sharedFunctionBS);
 800058a:	2300      	movs	r3, #0
 800058c:	65bb      	str	r3, [r7, #88]	; 0x58
 800058e:	2300      	movs	r3, #0
 8000590:	65fb      	str	r3, [r7, #92]	; 0x5c
  sharedFunctionBSHandle = osSemaphoreCreate(osSemaphore(sharedFunctionBS), 1);
 8000592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f002 ffea 	bl	8003572 <osSemaphoreCreate>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <main+0xa4>)
 80005a2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of toggleRed */
  osThreadDef(toggleRed, toggleRedHook, osPriorityHigh, 0, 128);
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <main+0xa8>)
 80005a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleRedHandle = osThreadCreate(osThread(toggleRed), NULL);
 80005b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 ff8b 	bl	80034da <osThreadCreate>
 80005c4:	4602      	mov	r2, r0
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <main+0xac>)
 80005c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of toggleGreen */
  osThreadDef(toggleGreen, toggleGreenHook, osPriorityNormal, 0, 128);
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <main+0xb0>)
 80005cc:	f107 0420 	add.w	r4, r7, #32
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleGreenHandle = osThreadCreate(osThread(toggleGreen), NULL);
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ff78 	bl	80034da <osThreadCreate>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0xb4>)
 80005ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of toggleYellow */
  osThreadDef(toggleYellow, toggleYellowHook, osPriorityAboveNormal, 0, 128);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <main+0xb8>)
 80005f2:	1d3c      	adds	r4, r7, #4
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  toggleYellowHandle = osThreadCreate(osThread(toggleYellow), NULL);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 ff67 	bl	80034da <osThreadCreate>
 800060c:	4602      	mov	r2, r0
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <main+0xbc>)
 8000610:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000612:	f002 ff5b 	bl	80034cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0xa2>
 8000618:	20004054 	.word	0x20004054
 800061c:	08005d90 	.word	0x08005d90
 8000620:	20004050 	.word	0x20004050
 8000624:	08005db8 	.word	0x08005db8
 8000628:	20004058 	.word	0x20004058
 800062c:	08005de4 	.word	0x08005de4
 8000630:	2000404c 	.word	0x2000404c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0b8      	sub	sp, #224	; 0xe0
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fb89 	bl	8005d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2290      	movs	r2, #144	; 0x90
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fb7a 	bl	8005d5a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <SystemClock_Config+0xf0>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a2e      	ldr	r2, [pc, #184]	; (8000724 <SystemClock_Config+0xf0>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <SystemClock_Config+0xf0>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xf4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <SystemClock_Config+0xf4>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xf4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe90 	bl	80013dc <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006c2:	f000 fa79 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f923 	bl	8001938 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f8:	f000 fa5e 	bl	8000bb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb3c 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000716:	f000 fa4f 	bl	8000bb8 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	37e0      	adds	r7, #224	; 0xe0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART3_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART3_UART_Init+0x58>)
 8000770:	f002 f996 	bl	8002aa0 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fa1d 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20003fcc 	.word	0x20003fcc
 8000788:	40004800 	.word	0x40004800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a35      	ldr	r2, [pc, #212]	; (800087c <MX_GPIO_Init+0xf0>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_GPIO_Init+0xf0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0320 	and.w	r3, r3, #32
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_GPIO_Init+0xf0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <MX_GPIO_Init+0xf0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a29      	ldr	r2, [pc, #164]	; (800087c <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_GPIO_Init+0xf0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a23      	ldr	r2, [pc, #140]	; (800087c <MX_GPIO_Init+0xf0>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EYellow_GPIO_Port, EYellow_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	481e      	ldr	r0, [pc, #120]	; (8000880 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fdb4 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EBlue_Pin|ERed_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2109      	movs	r1, #9
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_GPIO_Init+0xf8>)
 8000812:	f000 fdaf 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0xfc>)
 800081c:	f000 fdaa 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EYellow_Pin */
  GPIO_InitStruct.Pin = EYellow_Pin;
 8000820:	2308      	movs	r3, #8
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EYellow_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0xf4>)
 8000838:	f000 fbf2 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : EBlue_Pin ERed_Pin */
  GPIO_InitStruct.Pin = EBlue_Pin|ERed_Pin;
 800083c:	2309      	movs	r3, #9
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xf8>)
 8000854:	f000 fbe4 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : EGreen_Pin */
  GPIO_InitStruct.Pin = EGreen_Pin;
 8000858:	2308      	movs	r3, #8
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EGreen_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_GPIO_Init+0xfc>)
 8000870:	f000 fbd6 	bl	8001020 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40021400 	.word	0x40021400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020000 	.word	0x40020000

0800088c <toggleRedHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_toggleRedHook */
void toggleRedHook(void const * argument)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b0aa      	sub	sp, #168	; 0xa8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	uint8_t tm1[50] = "RED: High: started and interrupted\n\r";
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <toggleRedHook+0xc4>)
 8000896:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800089a:	461d      	mov	r5, r3
 800089c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008a8:	6020      	str	r0, [r4, #0]
 80008aa:	3404      	adds	r4, #4
 80008ac:	7021      	strb	r1, [r4, #0]
 80008ae:	f107 0399 	add.w	r3, r7, #153	; 0x99
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	731a      	strb	r2, [r3, #12]
	uint8_t tm2[50] = "RED: High: competing for CS\n\r";
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <toggleRedHook+0xc8>)
 80008be:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008c2:	461d      	mov	r5, r3
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008cc:	c407      	stmia	r4!, {r0, r1, r2}
 80008ce:	8023      	strh	r3, [r4, #0]
 80008d0:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
	uint8_t cm[50] =  "RED: High: acquired critical section\n\r";
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <toggleRedHook+0xcc>)
 80008e2:	f107 040c 	add.w	r4, r7, #12
 80008e6:	461d      	mov	r5, r3
 80008e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008f4:	6020      	str	r0, [r4, #0]
 80008f6:	3404      	adds	r4, #4
 80008f8:	8021      	strh	r1, [r4, #0]
 80008fa:	3402      	adds	r4, #2
 80008fc:	0c0b      	lsrs	r3, r1, #16
 80008fe:	7023      	strb	r3, [r4, #0]
 8000900:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	f8c3 2007 	str.w	r2, [r3, #7]

	HAL_UART_Transmit(&huart3, tm1, sizeof(tm1), 100);
 800090e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	2232      	movs	r2, #50	; 0x32
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <toggleRedHook+0xd0>)
 8000918:	f002 f910 	bl	8002b3c <HAL_UART_Transmit>
	/* Emulate task interruption */
	vTaskDelay(4000);
 800091c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000920:	f003 fec0 	bl	80046a4 <vTaskDelay>
	/* Resume execution and compete for the Critical Section (CS) */
	HAL_UART_Transmit(&huart3, tm2, sizeof(tm2), 100);
 8000924:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2232      	movs	r2, #50	; 0x32
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <toggleRedHook+0xd0>)
 800092e:	f002 f905 	bl	8002b3c <HAL_UART_Transmit>
	shared_function(cm, sizeof(cm),ERed_GPIO_Port, ERed_Pin);
 8000932:	f107 000c 	add.w	r0, r7, #12
 8000936:	2308      	movs	r3, #8
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <toggleRedHook+0xd4>)
 800093a:	2132      	movs	r1, #50	; 0x32
 800093c:	f000 f8da 	bl	8000af4 <shared_function>

	/*A NULL handle will cause the calling task to be suspended */
	vTaskSuspend(NULL);
 8000940:	2000      	movs	r0, #0
 8000942:	f003 fee5 	bl	8004710 <vTaskSuspend>
}
 8000946:	bf00      	nop
 8000948:	37a8      	adds	r7, #168	; 0xa8
 800094a:	46bd      	mov	sp, r7
 800094c:	bdb0      	pop	{r4, r5, r7, pc}
 800094e:	bf00      	nop
 8000950:	08005e00 	.word	0x08005e00
 8000954:	08005e34 	.word	0x08005e34
 8000958:	08005e68 	.word	0x08005e68
 800095c:	20003fcc 	.word	0x20003fcc
 8000960:	40020800 	.word	0x40020800

08000964 <toggleYellowHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleYellowHook */
void toggleYellowHook(void const * argument)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b0aa      	sub	sp, #168	; 0xa8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint8_t tm1[50] = "YELLOW: AboveNormal: started and interrupted\n\r";
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <toggleYellowHook+0xb4>)
 800096e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000972:	461d      	mov	r5, r3
 8000974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000980:	c407      	stmia	r4!, {r0, r1, r2}
 8000982:	8023      	strh	r3, [r4, #0]
 8000984:	3402      	adds	r4, #2
 8000986:	0c1b      	lsrs	r3, r3, #16
 8000988:	7023      	strb	r3, [r4, #0]
 800098a:	f107 03a3 	add.w	r3, r7, #163	; 0xa3
 800098e:	2200      	movs	r2, #0
 8000990:	801a      	strh	r2, [r3, #0]
 8000992:	709a      	strb	r2, [r3, #2]
	uint8_t tm2[50] = "YELLOW: AboveNormal: competing for CS\n\r";
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <toggleYellowHook+0xb8>)
 8000996:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800099a:	461d      	mov	r5, r3
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80009ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	811a      	strh	r2, [r3, #8]
	uint8_t cm[50] =  "YELLOW: AboveNormal: acquired critical section\n\r";
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <toggleYellowHook+0xbc>)
 80009ba:	f107 040c 	add.w	r4, r7, #12
 80009be:	461d      	mov	r5, r3
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	7023      	strb	r3, [r4, #0]
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/* Task starts execution and is interrupted */
	HAL_UART_Transmit(&huart3, tm1, sizeof(tm1), 100);
 80009d6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	2232      	movs	r2, #50	; 0x32
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <toggleYellowHook+0xc0>)
 80009e0:	f002 f8ac 	bl	8002b3c <HAL_UART_Transmit>

	/* Emulate task interruption */
	vTaskDelay(2000);
 80009e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009e8:	f003 fe5c 	bl	80046a4 <vTaskDelay>

	HAL_UART_Transmit(&huart3, tm2, sizeof(tm2), 100);
 80009ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2232      	movs	r2, #50	; 0x32
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <toggleYellowHook+0xc0>)
 80009f6:	f002 f8a1 	bl	8002b3c <HAL_UART_Transmit>
	/* Compete for the CS */
	shared_function(cm,sizeof(cm),EYellow_GPIO_Port, EYellow_Pin);
 80009fa:	f107 000c 	add.w	r0, r7, #12
 80009fe:	2308      	movs	r3, #8
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <toggleYellowHook+0xc4>)
 8000a02:	2132      	movs	r1, #50	; 0x32
 8000a04:	f000 f876 	bl	8000af4 <shared_function>

	/*A NULL handle will cause the calling task to be suspended */
	vTaskSuspend(NULL);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f003 fe81 	bl	8004710 <vTaskSuspend>
}
 8000a0e:	bf00      	nop
 8000a10:	37a8      	adds	r7, #168	; 0xa8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bdb0      	pop	{r4, r5, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08005e9c 	.word	0x08005e9c
 8000a1c:	08005ed0 	.word	0x08005ed0
 8000a20:	08005f04 	.word	0x08005f04
 8000a24:	20003fcc 	.word	0x20003fcc
 8000a28:	40021400 	.word	0x40021400

08000a2c <toggleGreenHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleGreenHook */
void toggleGreenHook(void const * argument)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b0aa      	sub	sp, #168	; 0xa8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	uint8_t tm1[50] = "GREEN: Normal: started\n\r";
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <toggleGreenHook+0xb4>)
 8000a36:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a44:	c403      	stmia	r4!, {r0, r1}
 8000a46:	7022      	strb	r2, [r4, #0]
 8000a48:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	761a      	strb	r2, [r3, #24]
	uint8_t tm2[50] = "GREEN: Normal: competing for CS\n\r";
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <toggleGreenHook+0xb8>)
 8000a5e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	8023      	strh	r3, [r4, #0]
 8000a70:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
	uint8_t cm[50] =  "GREEN: Normal: acquired critical section\n\r";
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <toggleGreenHook+0xbc>)
 8000a80:	f107 040c 	add.w	r4, r7, #12
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	c403      	stmia	r4!, {r0, r1}
 8000a94:	8022      	strh	r2, [r4, #0]
 8000a96:	3402      	adds	r4, #2
 8000a98:	0c13      	lsrs	r3, r2, #16
 8000a9a:	7023      	strb	r3, [r4, #0]
 8000a9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f8c3 2003 	str.w	r2, [r3, #3]

	/* The task is not interrupted and immediately competes for the CS */
	HAL_UART_Transmit(&huart3, tm1, sizeof(tm1), 100);
 8000aa8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	2232      	movs	r2, #50	; 0x32
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <toggleGreenHook+0xc0>)
 8000ab2:	f002 f843 	bl	8002b3c <HAL_UART_Transmit>

	/* Competing for the Critical Section (CS) */
	HAL_UART_Transmit(&huart3, tm2, sizeof(tm2), 100);
 8000ab6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	2232      	movs	r2, #50	; 0x32
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <toggleGreenHook+0xc0>)
 8000ac0:	f002 f83c 	bl	8002b3c <HAL_UART_Transmit>
	shared_function(cm,sizeof(cm),EGreen_GPIO_Port, EGreen_Pin);
 8000ac4:	f107 000c 	add.w	r0, r7, #12
 8000ac8:	2308      	movs	r3, #8
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <toggleGreenHook+0xc4>)
 8000acc:	2132      	movs	r1, #50	; 0x32
 8000ace:	f000 f811 	bl	8000af4 <shared_function>

	/*A NULL handle will cause the calling task to be suspended */
	vTaskSuspend(NULL);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f003 fe1c 	bl	8004710 <vTaskSuspend>
}
 8000ad8:	bf00      	nop
 8000ada:	37a8      	adds	r7, #168	; 0xa8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae0:	08005f38 	.word	0x08005f38
 8000ae4:	08005f6c 	.word	0x08005f6c
 8000ae8:	08005fa0 	.word	0x08005fa0
 8000aec:	20003fcc 	.word	0x20003fcc
 8000af0:	40020000 	.word	0x40020000

08000af4 <shared_function>:





void shared_function(uint8_t* msg, int n, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	807b      	strh	r3, [r7, #2]
	osSemaphoreWait(sharedFunctionBSHandle,  osWaitForever);
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <shared_function+0x90>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fd64 	bl	80035d8 <osSemaphoreWait>
	TickType_t start = xTaskGetTickCount();  // 4s delay
 8000b10:	f003 ffa0 	bl	8004a54 <xTaskGetTickCount>
 8000b14:	6138      	str	r0, [r7, #16]

	do {
			HAL_GPIO_TogglePin(EBlue_GPIO_Port, EBlue_Pin);
 8000b16:	2101      	movs	r1, #1
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <shared_function+0x94>)
 8000b1a:	f000 fc44 	bl	80013a6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 fc3f 	bl	80013a6 <HAL_GPIO_TogglePin>
			for(int i=0; i<=630000; i++);   // Approximate delay of 10 Hz
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e002      	b.n	8000b34 <shared_function+0x40>
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <shared_function+0x98>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	ddf8      	ble.n	8000b2e <shared_function+0x3a>
			HAL_UART_Transmit(&huart3, msg, n, 100);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	68f9      	ldr	r1, [r7, #12]
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <shared_function+0x9c>)
 8000b46:	f001 fff9 	bl	8002b3c <HAL_UART_Transmit>
	} while((xTaskGetTickCount() - start) <= 4000);
 8000b4a:	f003 ff83 	bl	8004a54 <xTaskGetTickCount>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000b58:	d9dd      	bls.n	8000b16 <shared_function+0x22>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fc07 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EBlue_GPIO_Port, EBlue_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <shared_function+0x94>)
 8000b6c:	f000 fc02 	bl	8001374 <HAL_GPIO_WritePin>

	osSemaphoreRelease(sharedFunctionBSHandle);
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <shared_function+0x90>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fd7d 	bl	8003674 <osSemaphoreRelease>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20004054 	.word	0x20004054
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	00099cf0 	.word	0x00099cf0
 8000b90:	20003fcc 	.word	0x20003fcc

08000b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba6:	f000 f939 	bl	8000e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <Error_Handler+0x6>

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f000 f9e5 	bl	8000fcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x7c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d128      	bne.n	8000c84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_UART_MspInit+0x80>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c74:	2307      	movs	r3, #7
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_UART_MspInit+0x84>)
 8000c80:	f000 f9ce 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40004800 	.word	0x40004800
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2019      	movs	r0, #25
 8000cae:	f000 f98d 	bl	8000fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cb2:	2019      	movs	r0, #25
 8000cb4:	f000 f9a6 	bl	8001004 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <HAL_InitTick+0x9c>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <HAL_InitTick+0x9c>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_InitTick+0x9c>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd0:	f107 0210 	add.w	r2, r7, #16
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f822 	bl	8001d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ce0:	f001 f80c 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8000ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_InitTick+0xa0>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	0c9b      	lsrs	r3, r3, #18
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_InitTick+0xa4>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <HAL_InitTick+0xa8>)
 8000cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_InitTick+0xa4>)
 8000cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_InitTick+0xa4>)
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_InitTick+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_InitTick+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_InitTick+0xa4>)
 8000d16:	f001 fc5d 	bl	80025d4 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <HAL_InitTick+0xa4>)
 8000d22:	f001 fc8d 	bl	8002640 <HAL_TIM_Base_Start_IT>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3730      	adds	r7, #48	; 0x30
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	2000405c 	.word	0x2000405c
 8000d40:	40010000 	.word	0x40010000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d76:	f001 fc8d 	bl	8002694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000405c 	.word	0x2000405c

08000d84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <SystemInit+0x28>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <SystemInit+0x28>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SystemInit+0x28>)
 8000d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000db6:	e003      	b.n	8000dc0 <LoopCopyDataInit>

08000db8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dbe:	3104      	adds	r1, #4

08000dc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc0:	480b      	ldr	r0, [pc, #44]	; (8000df0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dc8:	d3f6      	bcc.n	8000db8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dcc:	e002      	b.n	8000dd4 <LoopFillZerobss>

08000dce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd0:	f842 3b04 	str.w	r3, [r2], #4

08000dd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dd8:	d3f9      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dda:	f7ff ffd3 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f004 ff8d 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fbc7 	bl	8000574 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000dec:	08006004 	.word	0x08006004
  ldr  r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000df8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000dfc:	200040a0 	.word	0x200040a0

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>

08000e02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f000 f8d5 	bl	8000fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff43 	bl	8000c98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e12:	f7ff fed5 	bl	8000bc0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	2000409c 	.word	0x2000409c

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2000409c 	.word	0x2000409c

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <__NVIC_SetPriorityGrouping+0x40>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x40>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	05fa0000 	.word	0x05fa0000

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff4c 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fde:	f7ff ff61 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff ffb1 	bl	8000f50 <NVIC_EncodePriority>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff80 	bl	8000efc <__NVIC_SetPriority>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff54 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e175      	b.n	800132c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8164 	bne.w	8001326 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d00b      	beq.n	800107e <HAL_GPIO_Init+0x5e>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001072:	2b11      	cmp	r3, #17
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d130      	bne.n	80010e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 0201 	and.w	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x100>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b12      	cmp	r3, #18
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80be 	beq.w	8001326 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b65      	ldr	r3, [pc, #404]	; (8001340 <HAL_GPIO_Init+0x320>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a64      	ldr	r2, [pc, #400]	; (8001340 <HAL_GPIO_Init+0x320>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_GPIO_Init+0x320>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011c2:	4a60      	ldr	r2, [pc, #384]	; (8001344 <HAL_GPIO_Init+0x324>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_GPIO_Init+0x328>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d037      	beq.n	800125e <HAL_GPIO_Init+0x23e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a56      	ldr	r2, [pc, #344]	; (800134c <HAL_GPIO_Init+0x32c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d031      	beq.n	800125a <HAL_GPIO_Init+0x23a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a55      	ldr	r2, [pc, #340]	; (8001350 <HAL_GPIO_Init+0x330>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x236>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x232>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a53      	ldr	r2, [pc, #332]	; (8001358 <HAL_GPIO_Init+0x338>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x22e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_GPIO_Init+0x33c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x22a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a51      	ldr	r2, [pc, #324]	; (8001360 <HAL_GPIO_Init+0x340>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x226>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <HAL_GPIO_Init+0x344>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x222>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x348>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x21e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x34c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x21a>
 8001236:	2309      	movs	r3, #9
 8001238:	e012      	b.n	8001260 <HAL_GPIO_Init+0x240>
 800123a:	230a      	movs	r3, #10
 800123c:	e010      	b.n	8001260 <HAL_GPIO_Init+0x240>
 800123e:	2308      	movs	r3, #8
 8001240:	e00e      	b.n	8001260 <HAL_GPIO_Init+0x240>
 8001242:	2307      	movs	r3, #7
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x240>
 8001246:	2306      	movs	r3, #6
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x240>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x240>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x240>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x240>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x240>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x240>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001270:	4934      	ldr	r1, [pc, #208]	; (8001344 <HAL_GPIO_Init+0x324>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_GPIO_Init+0x350>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a2:	4a33      	ldr	r2, [pc, #204]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x350>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_GPIO_Init+0x350>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f ae86 	bls.w	8001040 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	3724      	adds	r7, #36	; 0x24
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40023800 	.word	0x40023800
 8001344:	40013800 	.word	0x40013800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400
 8001350:	40020800 	.word	0x40020800
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40021000 	.word	0x40021000
 800135c:	40021400 	.word	0x40021400
 8001360:	40021800 	.word	0x40021800
 8001364:	40021c00 	.word	0x40021c00
 8001368:	40022000 	.word	0x40022000
 800136c:	40022400 	.word	0x40022400
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e29b      	b.n	800192a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b96      	ldr	r3, [pc, #600]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140c:	4b93      	ldr	r3, [pc, #588]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d112      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
 8001418:	4b90      	ldr	r3, [pc, #576]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b8d      	ldr	r3, [pc, #564]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x130>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d168      	bne.n	800150c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e275      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x7a>
 8001448:	4b84      	ldr	r3, [pc, #528]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a83      	ldr	r2, [pc, #524]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x9c>
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a7b      	ldr	r2, [pc, #492]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xc0>
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b73      	ldr	r3, [pc, #460]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a72      	ldr	r2, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 800149c:	4b6f      	ldr	r3, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b6c      	ldr	r3, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a6b      	ldr	r2, [pc, #428]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcc2 	bl	8000e44 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fcbe 	bl	8000e44 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e229      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcae 	bl	8000e44 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fcaa 	bl	8000e44 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e215      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x110>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d069      	beq.n	80015ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x190>
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x17a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1e9      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	493d      	ldr	r1, [pc, #244]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e040      	b.n	80015ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d023      	beq.n	80015bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fc60 	bl	8000e44 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fc5c 	bl	8000e44 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1c7      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4929      	ldr	r1, [pc, #164]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
 80015ba:	e018      	b.n	80015ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fc3c 	bl	8000e44 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc38 	bl	8000e44 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1a3      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d038      	beq.n	800166c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fc19 	bl	8000e44 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fc15 	bl	8000e44 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e180      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x23a>
 8001634:	e01a      	b.n	800166c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_OscConfig+0x280>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_RCC_OscConfig+0x280>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fbff 	bl	8000e44 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fbfb 	bl	8000e44 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d903      	bls.n	8001660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e166      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
 800165c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a4 	beq.w	80017c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167a:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b89      	ldr	r3, [pc, #548]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a88      	ldr	r2, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b86      	ldr	r3, [pc, #536]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016ae:	4b80      	ldr	r3, [pc, #512]	; (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7f      	ldr	r2, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fbc3 	bl	8000e44 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fbbf 	bl	8000e44 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e12a      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x31a>
 80016e8:	4b70      	ldr	r3, [pc, #448]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a6f      	ldr	r2, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	e02d      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x33c>
 80016fe:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	e01c      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x35e>
 8001720:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a61      	ldr	r2, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	; 0x70
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fb73 	bl	8000e44 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fb6f 	bl	8000e44 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0d8      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x386>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fb5d 	bl	8000e44 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb59 	bl	8000e44 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0c2      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80ae 	beq.w	8001928 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017cc:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d06d      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d14b      	bne.n	8001878 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb2a 	bl	8000e44 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb26 	bl	8000e44 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e091      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	071b      	lsls	r3, r3, #28
 800183e:	491b      	ldr	r1, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff faf8 	bl	8000e44 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff faf4 	bl	8000e44 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e05f      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x47c>
 8001876:	e057      	b.n	8001928 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800187e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fade 	bl	8000e44 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fada 	bl	8000e44 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e045      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x4b0>
 80018aa:	e03d      	b.n	8001928 <HAL_RCC_OscConfig+0x54c>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_RCC_OscConfig+0x558>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d030      	beq.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d129      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d122      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d119      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d10f      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d0      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 020f 	bic.w	r2, r3, #15
 8001966:	4965      	ldr	r1, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d040      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e073      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06b      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4936      	ldr	r1, [pc, #216]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fa0a 	bl	8000e44 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff fa06 	bl	8000e44 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e053      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d210      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 020f 	bic.w	r2, r3, #15
 8001a72:	4922      	ldr	r1, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1cc>)
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1d4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8d4 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08005fdc 	.word	0x08005fdc
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d007      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x32>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d008      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x38>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 80b4 	bne.w	8001ca4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b3e:	60bb      	str	r3, [r7, #8]
      break;
 8001b40:	e0b3      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b44:	60bb      	str	r3, [r7, #8]
      break;
 8001b46:	e0b0      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b50:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d04a      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	ea03 0501 	and.w	r5, r3, r1
 8001b74:	ea04 0602 	and.w	r6, r4, r2
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4632      	mov	r2, r6
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	f04f 0400 	mov.w	r4, #0
 8001b84:	0154      	lsls	r4, r2, #5
 8001b86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b8a:	014b      	lsls	r3, r1, #5
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4622      	mov	r2, r4
 8001b90:	1b49      	subs	r1, r1, r5
 8001b92:	eb62 0206 	sbc.w	r2, r2, r6
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	f04f 0400 	mov.w	r4, #0
 8001b9e:	0194      	lsls	r4, r2, #6
 8001ba0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ba4:	018b      	lsls	r3, r1, #6
 8001ba6:	1a5b      	subs	r3, r3, r1
 8001ba8:	eb64 0402 	sbc.w	r4, r4, r2
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	00e2      	lsls	r2, r4, #3
 8001bb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bba:	00d9      	lsls	r1, r3, #3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	195b      	adds	r3, r3, r5
 8001bc2:	eb44 0406 	adc.w	r4, r4, r6
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	02a2      	lsls	r2, r4, #10
 8001bd0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bd4:	0299      	lsls	r1, r3, #10
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f04f 0400 	mov.w	r4, #0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	f7fe fb2a 	bl	8000240 <__aeabi_uldivmod>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e049      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	ea03 0501 	and.w	r5, r3, r1
 8001c0a:	ea04 0602 	and.w	r6, r4, r2
 8001c0e:	4629      	mov	r1, r5
 8001c10:	4632      	mov	r2, r6
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f04f 0400 	mov.w	r4, #0
 8001c1a:	0154      	lsls	r4, r2, #5
 8001c1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c20:	014b      	lsls	r3, r1, #5
 8001c22:	4619      	mov	r1, r3
 8001c24:	4622      	mov	r2, r4
 8001c26:	1b49      	subs	r1, r1, r5
 8001c28:	eb62 0206 	sbc.w	r2, r2, r6
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	f04f 0400 	mov.w	r4, #0
 8001c34:	0194      	lsls	r4, r2, #6
 8001c36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c3a:	018b      	lsls	r3, r1, #6
 8001c3c:	1a5b      	subs	r3, r3, r1
 8001c3e:	eb64 0402 	sbc.w	r4, r4, r2
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	00e2      	lsls	r2, r4, #3
 8001c4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c50:	00d9      	lsls	r1, r3, #3
 8001c52:	460b      	mov	r3, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	195b      	adds	r3, r3, r5
 8001c58:	eb44 0406 	adc.w	r4, r4, r6
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	02a2      	lsls	r2, r4, #10
 8001c66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c6a:	0299      	lsls	r1, r3, #10
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4614      	mov	r4, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	4621      	mov	r1, r4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	f7fe fadf 	bl	8000240 <__aeabi_uldivmod>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	60bb      	str	r3, [r7, #8]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ca6:	60bb      	str	r3, [r7, #8]
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	68bb      	ldr	r3, [r7, #8]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	00f42400 	.word	0x00f42400

08001cbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08005fec 	.word	0x08005fec

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08005fec 	.word	0x08005fec

08001d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	220f      	movs	r2, #15
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCC_GetClockConfig+0x60>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 020f 	and.w	r2, r3, #15
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001db0:	4b69      	ldr	r3, [pc, #420]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a68      	ldr	r2, [pc, #416]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dba:	6093      	str	r3, [r2, #8]
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	4964      	ldr	r1, [pc, #400]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d017      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	4959      	ldr	r1, [pc, #356]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e00:	d101      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d017      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 808b 	beq.w	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e90:	f7fe ffd8 	bl	8000e44 <HAL_GetTick>
 8001e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7fe ffd4 	bl	8000e44 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e38d      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d035      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d02e      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d114      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe ff9c 	bl	8000e44 <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7fe ff98 	bl	8000e44 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e34f      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ee      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f3e:	d111      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	4901      	ldr	r1, [pc, #4]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	0ffffcff 	.word	0x0ffffcff
 8001f64:	4bb3      	ldr	r3, [pc, #716]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4ab2      	ldr	r2, [pc, #712]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f6e:	6093      	str	r3, [r2, #8]
 8001f70:	4bb0      	ldr	r3, [pc, #704]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	49ad      	ldr	r1, [pc, #692]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f94:	4aa7      	ldr	r2, [pc, #668]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f9e:	4ba5      	ldr	r3, [pc, #660]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	49a2      	ldr	r1, [pc, #648]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fbc:	4b9d      	ldr	r3, [pc, #628]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fca:	499a      	ldr	r1, [pc, #616]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fde:	4b95      	ldr	r3, [pc, #596]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fec:	4991      	ldr	r1, [pc, #580]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002000:	4b8c      	ldr	r3, [pc, #560]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	4989      	ldr	r1, [pc, #548]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002022:	4b84      	ldr	r3, [pc, #528]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4980      	ldr	r1, [pc, #512]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4978      	ldr	r1, [pc, #480]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f023 020c 	bic.w	r2, r3, #12
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	496f      	ldr	r1, [pc, #444]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4967      	ldr	r1, [pc, #412]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b8:	495e      	ldr	r1, [pc, #376]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	4956      	ldr	r1, [pc, #344]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	494d      	ldr	r1, [pc, #308]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002110:	4b48      	ldr	r3, [pc, #288]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	4945      	ldr	r1, [pc, #276]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	493c      	ldr	r1, [pc, #240]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002154:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002162:	4934      	ldr	r1, [pc, #208]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d011      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	492b      	ldr	r1, [pc, #172]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002194:	d101      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220c:	4909      	ldr	r1, [pc, #36]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00f      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	e002      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	4985      	ldr	r1, [pc, #532]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800224c:	4b80      	ldr	r3, [pc, #512]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225c:	497c      	ldr	r1, [pc, #496]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002272:	f040 80d6 	bne.w	8002422 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800227c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002282:	f7fe fddf 	bl	8000e44 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800228a:	f7fe fddb 	bl	8000e44 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e194      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800229c:	4b6c      	ldr	r3, [pc, #432]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d021      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11d      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022bc:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022ca:	4b61      	ldr	r3, [pc, #388]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	019a      	lsls	r2, r3, #6
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	071b      	lsls	r3, r3, #28
 80022f0:	4957      	ldr	r1, [pc, #348]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d02e      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d129      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002324:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002338:	0f1b      	lsrs	r3, r3, #28
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	019a      	lsls	r2, r3, #6
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	071b      	lsls	r3, r3, #28
 8002358:	493d      	ldr	r1, [pc, #244]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002366:	f023 021f 	bic.w	r2, r3, #31
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	3b01      	subs	r3, #1
 8002370:	4937      	ldr	r1, [pc, #220]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238a:	0e1b      	lsrs	r3, r3, #24
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002398:	0f1b      	lsrs	r3, r3, #28
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	019a      	lsls	r2, r3, #6
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	431a      	orrs	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	071b      	lsls	r3, r3, #28
 80023b8:	4925      	ldr	r1, [pc, #148]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	019a      	lsls	r2, r3, #6
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	071b      	lsls	r3, r3, #28
 80023e8:	4919      	ldr	r1, [pc, #100]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe fd22 	bl	8000e44 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002404:	f7fe fd1e 	bl	8000e44 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0d7      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80cd 	bne.w	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002436:	f7fe fd05 	bl	8000e44 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800243e:	f7fe fd01 	bl	8000e44 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d903      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0ba      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002450:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002460:	d0ed      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02e      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d12a      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002498:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	0f1b      	lsrs	r3, r3, #28
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4944      	ldr	r1, [pc, #272]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	493d      	ldr	r1, [pc, #244]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d022      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f4:	d11d      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	0e1b      	lsrs	r3, r3, #24
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	0f1b      	lsrs	r3, r3, #28
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	019a      	lsls	r2, r3, #6
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	4929      	ldr	r1, [pc, #164]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d028      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002544:	0e1b      	lsrs	r3, r3, #24
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	019a      	lsls	r2, r3, #6
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	071b      	lsls	r3, r3, #28
 8002572:	4917      	ldr	r1, [pc, #92]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	4911      	ldr	r1, [pc, #68]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259c:	f7fe fc52 	bl	8000e44 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025a4:	f7fe fc4e 	bl	8000e44 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e007      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c2:	d1ef      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01d      	b.n	8002622 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f815 	bl	800262a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 f986 	bl	8002924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_TIM_Base_Start_IT+0x50>)
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b06      	cmp	r3, #6
 8002668:	d00b      	beq.n	8002682 <HAL_TIM_Base_Start_IT+0x42>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d007      	beq.n	8002682 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	00010007 	.word	0x00010007

08002694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d122      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d11b      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0202 	mvn.w	r2, #2
 80026c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f905 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8f7 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f908 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0204 	mvn.w	r2, #4
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8db 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8cd 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8de 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0208 	mvn.w	r2, #8
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8b1 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8a3 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8b4 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0210 	mvn.w	r2, #16
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2208      	movs	r2, #8
 80027c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f887 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f879 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f88a 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0201 	mvn.w	r2, #1
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f9be 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f91a 	bl	8002a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d10e      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d107      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800286a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f90d 	bl	8002a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d10e      	bne.n	800289e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d107      	bne.n	800289e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f838 	bl	800290e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d10e      	bne.n	80028ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0220 	mvn.w	r2, #32
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f8cd 	bl	8002a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <TIM_Base_SetConfig+0x114>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d00f      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a3d      	ldr	r2, [pc, #244]	; (8002a3c <TIM_Base_SetConfig+0x118>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <TIM_Base_SetConfig+0x120>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <TIM_Base_SetConfig+0x114>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02b      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d027      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <TIM_Base_SetConfig+0x118>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d023      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2b      	ldr	r2, [pc, #172]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2a      	ldr	r2, [pc, #168]	; (8002a44 <TIM_Base_SetConfig+0x120>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01b      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d017      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <TIM_Base_SetConfig+0x128>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <TIM_Base_SetConfig+0x12c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00f      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <TIM_Base_SetConfig+0x130>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <TIM_Base_SetConfig+0x134>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <TIM_Base_SetConfig+0x138>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <TIM_Base_SetConfig+0x13c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <TIM_Base_SetConfig+0x114>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0xf8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40010400 	.word	0x40010400
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	40014400 	.word	0x40014400
 8002a54:	40014800 	.word	0x40014800
 8002a58:	40001800 	.word	0x40001800
 8002a5c:	40001c00 	.word	0x40001c00
 8002a60:	40002000 	.word	0x40002000

08002a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e040      	b.n	8002b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe f8a4 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8be 	bl	8002c60 <UART_SetConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fb5c 	bl	80031b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fbe3 	bl	80032f8 <UART_CheckIdleState>
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d17f      	bne.n	8002c54 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_Transmit+0x24>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e078      	b.n	8002c56 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Transmit+0x36>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e071      	b.n	8002c56 <HAL_UART_Transmit+0x11a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2221      	movs	r2, #33	; 0x21
 8002b84:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe f95d 	bl	8000e44 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x7c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002bc8:	e02c      	b.n	8002c24 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fbd4 	bl	8003382 <UART_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e038      	b.n	8002c56 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e007      	b.n	8002c12 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1cc      	bne.n	8002bca <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fba1 	bl	8003382 <UART_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e005      	b.n	8002c56 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4bb1      	ldr	r3, [pc, #708]	; (8002f54 <UART_SetConfig+0x2f4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	6939      	ldr	r1, [r7, #16]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a9f      	ldr	r2, [pc, #636]	; (8002f58 <UART_SetConfig+0x2f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d121      	bne.n	8002d24 <UART_SetConfig+0xc4>
 8002ce0:	4b9e      	ldr	r3, [pc, #632]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d816      	bhi.n	8002d1c <UART_SetConfig+0xbc>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0x94>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d11 	.word	0x08002d11
 8002cfc:	08002d0b 	.word	0x08002d0b
 8002d00:	08002d17 	.word	0x08002d17
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e151      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e14e      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d10:	2304      	movs	r3, #4
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e14b      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d16:	2308      	movs	r3, #8
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e148      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	bf00      	nop
 8002d22:	e144      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a8d      	ldr	r2, [pc, #564]	; (8002f60 <UART_SetConfig+0x300>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d134      	bne.n	8002d98 <UART_SetConfig+0x138>
 8002d2e:	4b8b      	ldr	r3, [pc, #556]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d829      	bhi.n	8002d90 <UART_SetConfig+0x130>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <UART_SetConfig+0xe4>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d91 	.word	0x08002d91
 8002d4c:	08002d91 	.word	0x08002d91
 8002d50:	08002d91 	.word	0x08002d91
 8002d54:	08002d85 	.word	0x08002d85
 8002d58:	08002d91 	.word	0x08002d91
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002d91 	.word	0x08002d91
 8002d64:	08002d7f 	.word	0x08002d7f
 8002d68:	08002d91 	.word	0x08002d91
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08002d91 	.word	0x08002d91
 8002d74:	08002d8b 	.word	0x08002d8b
 8002d78:	2300      	movs	r3, #0
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e117      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	e114      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d84:	2304      	movs	r3, #4
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	e111      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	77fb      	strb	r3, [r7, #31]
 8002d8e:	e10e      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d90:	2310      	movs	r3, #16
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	bf00      	nop
 8002d96:	e10a      	b.n	8002fae <UART_SetConfig+0x34e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a71      	ldr	r2, [pc, #452]	; (8002f64 <UART_SetConfig+0x304>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d120      	bne.n	8002de4 <UART_SetConfig+0x184>
 8002da2:	4b6e      	ldr	r3, [pc, #440]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d00f      	beq.n	8002dd0 <UART_SetConfig+0x170>
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d802      	bhi.n	8002dba <UART_SetConfig+0x15a>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <UART_SetConfig+0x164>
 8002db8:	e010      	b.n	8002ddc <UART_SetConfig+0x17c>
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d005      	beq.n	8002dca <UART_SetConfig+0x16a>
 8002dbe:	2b30      	cmp	r3, #48	; 0x30
 8002dc0:	d009      	beq.n	8002dd6 <UART_SetConfig+0x176>
 8002dc2:	e00b      	b.n	8002ddc <UART_SetConfig+0x17c>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e0f1      	b.n	8002fae <UART_SetConfig+0x34e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e0ee      	b.n	8002fae <UART_SetConfig+0x34e>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	e0eb      	b.n	8002fae <UART_SetConfig+0x34e>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	77fb      	strb	r3, [r7, #31]
 8002dda:	e0e8      	b.n	8002fae <UART_SetConfig+0x34e>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	bf00      	nop
 8002de2:	e0e4      	b.n	8002fae <UART_SetConfig+0x34e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <UART_SetConfig+0x308>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d120      	bne.n	8002e30 <UART_SetConfig+0x1d0>
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d00f      	beq.n	8002e1c <UART_SetConfig+0x1bc>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d802      	bhi.n	8002e06 <UART_SetConfig+0x1a6>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <UART_SetConfig+0x1b0>
 8002e04:	e010      	b.n	8002e28 <UART_SetConfig+0x1c8>
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	d005      	beq.n	8002e16 <UART_SetConfig+0x1b6>
 8002e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e0c:	d009      	beq.n	8002e22 <UART_SetConfig+0x1c2>
 8002e0e:	e00b      	b.n	8002e28 <UART_SetConfig+0x1c8>
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e0cb      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e0c8      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e0c5      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e22:	2308      	movs	r3, #8
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e0c2      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	bf00      	nop
 8002e2e:	e0be      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <UART_SetConfig+0x30c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d124      	bne.n	8002e84 <UART_SetConfig+0x224>
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e48:	d012      	beq.n	8002e70 <UART_SetConfig+0x210>
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	d802      	bhi.n	8002e56 <UART_SetConfig+0x1f6>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <UART_SetConfig+0x204>
 8002e54:	e012      	b.n	8002e7c <UART_SetConfig+0x21c>
 8002e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5a:	d006      	beq.n	8002e6a <UART_SetConfig+0x20a>
 8002e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e60:	d009      	beq.n	8002e76 <UART_SetConfig+0x216>
 8002e62:	e00b      	b.n	8002e7c <UART_SetConfig+0x21c>
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e0a1      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e09e      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e70:	2304      	movs	r3, #4
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e09b      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e76:	2308      	movs	r3, #8
 8002e78:	77fb      	strb	r3, [r7, #31]
 8002e7a:	e098      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	bf00      	nop
 8002e82:	e094      	b.n	8002fae <UART_SetConfig+0x34e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <UART_SetConfig+0x310>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d124      	bne.n	8002ed8 <UART_SetConfig+0x278>
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9c:	d012      	beq.n	8002ec4 <UART_SetConfig+0x264>
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d802      	bhi.n	8002eaa <UART_SetConfig+0x24a>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <UART_SetConfig+0x258>
 8002ea8:	e012      	b.n	8002ed0 <UART_SetConfig+0x270>
 8002eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eae:	d006      	beq.n	8002ebe <UART_SetConfig+0x25e>
 8002eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002eb4:	d009      	beq.n	8002eca <UART_SetConfig+0x26a>
 8002eb6:	e00b      	b.n	8002ed0 <UART_SetConfig+0x270>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e077      	b.n	8002fae <UART_SetConfig+0x34e>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e074      	b.n	8002fae <UART_SetConfig+0x34e>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e071      	b.n	8002fae <UART_SetConfig+0x34e>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e06e      	b.n	8002fae <UART_SetConfig+0x34e>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	bf00      	nop
 8002ed6:	e06a      	b.n	8002fae <UART_SetConfig+0x34e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <UART_SetConfig+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d124      	bne.n	8002f2c <UART_SetConfig+0x2cc>
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d012      	beq.n	8002f18 <UART_SetConfig+0x2b8>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	d802      	bhi.n	8002efe <UART_SetConfig+0x29e>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <UART_SetConfig+0x2ac>
 8002efc:	e012      	b.n	8002f24 <UART_SetConfig+0x2c4>
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	d006      	beq.n	8002f12 <UART_SetConfig+0x2b2>
 8002f04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f08:	d009      	beq.n	8002f1e <UART_SetConfig+0x2be>
 8002f0a:	e00b      	b.n	8002f24 <UART_SetConfig+0x2c4>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e04d      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e04a      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e047      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e044      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f24:	2310      	movs	r3, #16
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	bf00      	nop
 8002f2a:	e040      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <UART_SetConfig+0x318>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d139      	bne.n	8002faa <UART_SetConfig+0x34a>
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f44:	d027      	beq.n	8002f96 <UART_SetConfig+0x336>
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d817      	bhi.n	8002f7c <UART_SetConfig+0x31c>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <UART_SetConfig+0x32a>
 8002f50:	e027      	b.n	8002fa2 <UART_SetConfig+0x342>
 8002f52:	bf00      	nop
 8002f54:	efff69f3 	.word	0xefff69f3
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40004800 	.word	0x40004800
 8002f68:	40004c00 	.word	0x40004c00
 8002f6c:	40005000 	.word	0x40005000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	40007800 	.word	0x40007800
 8002f78:	40007c00 	.word	0x40007c00
 8002f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f80:	d006      	beq.n	8002f90 <UART_SetConfig+0x330>
 8002f82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f86:	d009      	beq.n	8002f9c <UART_SetConfig+0x33c>
 8002f88:	e00b      	b.n	8002fa2 <UART_SetConfig+0x342>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e00e      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e00b      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f96:	2304      	movs	r3, #4
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e008      	b.n	8002fae <UART_SetConfig+0x34e>
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e005      	b.n	8002fae <UART_SetConfig+0x34e>
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	bf00      	nop
 8002fa8:	e001      	b.n	8002fae <UART_SetConfig+0x34e>
 8002faa:	2310      	movs	r3, #16
 8002fac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d17f      	bne.n	80030b8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d85c      	bhi.n	8003078 <UART_SetConfig+0x418>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x364>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08003009 	.word	0x08003009
 8002fcc:	08003029 	.word	0x08003029
 8002fd0:	08003079 	.word	0x08003079
 8002fd4:	08003041 	.word	0x08003041
 8002fd8:	08003079 	.word	0x08003079
 8002fdc:	08003079 	.word	0x08003079
 8002fe0:	08003079 	.word	0x08003079
 8002fe4:	08003061 	.word	0x08003061
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7fe fe74 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002fec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	61bb      	str	r3, [r7, #24]
        break;
 8003006:	e03a      	b.n	800307e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7fe fe78 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 800300c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	005a      	lsls	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	b29b      	uxth	r3, r3
 8003024:	61bb      	str	r3, [r7, #24]
        break;
 8003026:	e02a      	b.n	800307e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085a      	lsrs	r2, r3, #1
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <UART_SetConfig+0x54c>)
 8003030:	4413      	add	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6852      	ldr	r2, [r2, #4]
 8003036:	fbb3 f3f2 	udiv	r3, r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	61bb      	str	r3, [r7, #24]
        break;
 800303e:	e01e      	b.n	800307e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003040:	f7fe fd66 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8003044:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	005a      	lsls	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	441a      	add	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	61bb      	str	r3, [r7, #24]
        break;
 800305e:	e00e      	b.n	800307e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	b29b      	uxth	r3, r3
 8003074:	61bb      	str	r3, [r7, #24]
        break;
 8003076:	e002      	b.n	800307e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
        break;
 800307c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d916      	bls.n	80030b2 <UART_SetConfig+0x452>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308a:	d212      	bcs.n	80030b2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f023 030f 	bic.w	r3, r3, #15
 8003094:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	b29b      	uxth	r3, r3
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	897a      	ldrh	r2, [r7, #10]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e070      	b.n	8003194 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
 80030b6:	e06d      	b.n	8003194 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d859      	bhi.n	8003172 <UART_SetConfig+0x512>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <UART_SetConfig+0x464>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	08003107 	.word	0x08003107
 80030cc:	08003125 	.word	0x08003125
 80030d0:	08003173 	.word	0x08003173
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	08003173 	.word	0x08003173
 80030dc:	08003173 	.word	0x08003173
 80030e0:	08003173 	.word	0x08003173
 80030e4:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7fe fdf4 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	085a      	lsrs	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	61bb      	str	r3, [r7, #24]
        break;
 8003104:	e038      	b.n	8003178 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003106:	f7fe fdf9 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 800310a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	085a      	lsrs	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	b29b      	uxth	r3, r3
 8003120:	61bb      	str	r3, [r7, #24]
        break;
 8003122:	e029      	b.n	8003178 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	085a      	lsrs	r2, r3, #1
 800312a:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <UART_SetConfig+0x550>)
 800312c:	4413      	add	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6852      	ldr	r2, [r2, #4]
 8003132:	fbb3 f3f2 	udiv	r3, r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	61bb      	str	r3, [r7, #24]
        break;
 800313a:	e01d      	b.n	8003178 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313c:	f7fe fce8 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8003140:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	085a      	lsrs	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	b29b      	uxth	r3, r3
 8003156:	61bb      	str	r3, [r7, #24]
        break;
 8003158:	e00e      	b.n	8003178 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	b29b      	uxth	r3, r3
 800316e:	61bb      	str	r3, [r7, #24]
        break;
 8003170:	e002      	b.n	8003178 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
        break;
 8003176:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d908      	bls.n	8003190 <UART_SetConfig+0x530>
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d204      	bcs.n	8003190 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	e001      	b.n	8003194 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	01e84800 	.word	0x01e84800
 80031b0:	00f42400 	.word	0x00f42400

080031b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01a      	beq.n	80032ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d10a      	bne.n	80032ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003306:	f7fd fd9d 	bl	8000e44 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d10e      	bne.n	8003338 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800331a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f82a 	bl	8003382 <UART_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e020      	b.n	800337a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b04      	cmp	r3, #4
 8003344:	d10e      	bne.n	8003364 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003346:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f814 	bl	8003382 <UART_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e00a      	b.n	800337a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003392:	e05d      	b.n	8003450 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d059      	beq.n	8003450 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fd fd52 	bl	8000e44 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11b      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e042      	b.n	8003470 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d02b      	beq.n	8003450 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003406:	d123      	bne.n	8003450 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003410:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003420:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e00f      	b.n	8003470 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d092      	beq.n	8003394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348a:	2b84      	cmp	r3, #132	; 0x84
 800348c:	d005      	beq.n	800349a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800348e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	3303      	adds	r3, #3
 8003498:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034ae:	f3ef 8305 	mrs	r3, IPSR
 80034b2:	607b      	str	r3, [r7, #4]
  return(result);
 80034b4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034d0:	f001 f9b2 	bl	8004838 <vTaskStartScheduler>
  
  return osOK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	bd80      	pop	{r7, pc}

080034da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034dc:	b089      	sub	sp, #36	; 0x24
 80034de:	af04      	add	r7, sp, #16
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <osThreadCreate+0x54>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01c      	beq.n	800352e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685c      	ldr	r4, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681d      	ldr	r5, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691e      	ldr	r6, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ffb6 	bl	8003478 <makeFreeRtosPriority>
 800350c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003516:	9202      	str	r2, [sp, #8]
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	9100      	str	r1, [sp, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4632      	mov	r2, r6
 8003520:	4629      	mov	r1, r5
 8003522:	4620      	mov	r0, r4
 8003524:	f000 ff27 	bl	8004376 <xTaskCreateStatic>
 8003528:	4603      	mov	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e01c      	b.n	8003568 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685c      	ldr	r4, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800353a:	b29e      	uxth	r6, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff98 	bl	8003478 <makeFreeRtosPriority>
 8003548:	4602      	mov	r2, r0
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	9200      	str	r2, [sp, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	4632      	mov	r2, r6
 8003556:	4629      	mov	r1, r5
 8003558:	4620      	mov	r0, r4
 800355a:	f000 ff6c 	bl	8004436 <xTaskCreate>
 800355e:	4603      	mov	r3, r0
 8003560:	2b01      	cmp	r3, #1
 8003562:	d001      	beq.n	8003568 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003568:	68fb      	ldr	r3, [r7, #12]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003572 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af02      	add	r7, sp, #8
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10b      	bne.n	80035a2 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	2303      	movs	r3, #3
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	2001      	movs	r0, #1
 800359a:	f000 f9bf 	bl	800391c <xQueueGenericCreateStatic>
 800359e:	4603      	mov	r3, r0
 80035a0:	e016      	b.n	80035d0 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e014      	b.n	80035d0 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d110      	bne.n	80035ce <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80035ac:	2203      	movs	r2, #3
 80035ae:	2100      	movs	r1, #0
 80035b0:	2001      	movs	r0, #1
 80035b2:	f000 fa30 	bl	8003a16 <xQueueGenericCreate>
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <osSemaphoreCreate+0x58>
 80035be:	2300      	movs	r3, #0
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa87 	bl	8003ad8 <xQueueGenericSend>
      return sema;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	e000      	b.n	80035d0 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80035ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	e03a      	b.n	8003666 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d103      	bne.n	8003604 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e009      	b.n	8003618 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <osSemaphoreWait+0x40>
      ticks = 1;
 8003614:	2301      	movs	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003618:	f7ff ff46 	bl	80034a8 <inHandlerMode>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	461a      	mov	r2, r3
 8003628:	2100      	movs	r1, #0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fcf8 	bl	8004020 <xQueueReceiveFromISR>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003636:	23ff      	movs	r3, #255	; 0xff
 8003638:	e015      	b.n	8003666 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <osSemaphoreWait+0x8c>
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <osSemaphoreWait+0x98>)
 8003642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	e008      	b.n	8003664 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fbd3 	bl	8003e00 <xQueueSemaphoreTake>
 800365a:	4603      	mov	r3, r0
 800365c:	2b01      	cmp	r3, #1
 800365e:	d001      	beq.n	8003664 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003660:	23ff      	movs	r3, #255	; 0xff
 8003662:	e000      	b.n	8003666 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003684:	f7ff ff10 	bl	80034a8 <inHandlerMode>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb21 	bl	8003cdc <xQueueGiveFromISR>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d001      	beq.n	80036a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80036a0:	23ff      	movs	r3, #255	; 0xff
 80036a2:	e017      	b.n	80036d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <osSemaphoreRelease+0x5e>
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <osSemaphoreRelease+0x68>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	e00a      	b.n	80036d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80036bc:	2300      	movs	r3, #0
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa08 	bl	8003ad8 <xQueueGenericSend>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80036ce:	23ff      	movs	r3, #255	; 0xff
 80036d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80036d2:	68fb      	ldr	r3, [r7, #12]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 0208 	add.w	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f103 0208 	add.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d103      	bne.n	80037a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e00c      	b.n	80037bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3308      	adds	r3, #8
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e002      	b.n	80037b0 <vListInsert+0x2e>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d2f6      	bcs.n	80037aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	601a      	str	r2, [r3, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6852      	ldr	r2, [r2, #4]
 8003814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d103      	bne.n	8003828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	b672      	cpsid	i
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	b662      	cpsie	i
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	e7fe      	b.n	8003872 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003874:	f001 ff40 	bl	80056f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	3b01      	subs	r3, #1
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	441a      	add	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	22ff      	movs	r2, #255	; 0xff
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01a      	beq.n	8003908 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3310      	adds	r3, #16
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fa08 	bl	8004cec <xTaskRemoveFromEventList>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <xQueueGenericReset+0xd0>)
 80038e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	e009      	b.n	8003908 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3310      	adds	r3, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fef1 	bl	80036e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3324      	adds	r3, #36	; 0x24
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff feec 	bl	80036e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003908:	f001 ff28 	bl	800575c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08e      	sub	sp, #56	; 0x38
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <xQueueGenericCreateStatic+0x2c>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	b672      	cpsid	i
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	b662      	cpsie	i
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
 8003946:	e7fe      	b.n	8003946 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xQueueGenericCreateStatic+0x4a>
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	b672      	cpsid	i
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	b662      	cpsie	i
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	e7fe      	b.n	8003964 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <xQueueGenericCreateStatic+0x56>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <xQueueGenericCreateStatic+0x5a>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <xQueueGenericCreateStatic+0x5c>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <xQueueGenericCreateStatic+0x78>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	b672      	cpsid	i
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	b662      	cpsie	i
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	e7fe      	b.n	8003992 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <xQueueGenericCreateStatic+0x84>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <xQueueGenericCreateStatic+0x88>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <xQueueGenericCreateStatic+0x8a>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <xQueueGenericCreateStatic+0xa6>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	b672      	cpsid	i
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	b662      	cpsie	i
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039c2:	2348      	movs	r3, #72	; 0x48
 80039c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b48      	cmp	r3, #72	; 0x48
 80039ca:	d00b      	beq.n	80039e4 <xQueueGenericCreateStatic+0xc8>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	b672      	cpsid	i
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	b662      	cpsie	i
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e7fe      	b.n	80039e2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f846 	bl	8003a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3730      	adds	r7, #48	; 0x30
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08a      	sub	sp, #40	; 0x28
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <xQueueGenericCreate+0x2c>
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	b672      	cpsid	i
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	b662      	cpsie	i
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	e7fe      	b.n	8003a40 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	e004      	b.n	8003a58 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	3348      	adds	r3, #72	; 0x48
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 ff6d 	bl	800593c <pvPortMalloc>
 8003a62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d011      	beq.n	8003a8e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3348      	adds	r3, #72	; 0x48
 8003a72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a7c:	79fa      	ldrb	r2, [r7, #7]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f805 	bl	8003a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e002      	b.n	8003aba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	69b8      	ldr	r0, [r7, #24]
 8003aca:	f7ff febd 	bl	8003848 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <xQueueGenericSend+0x34>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	b672      	cpsid	i
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	b662      	cpsie	i
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0a:	e7fe      	b.n	8003b0a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <xQueueGenericSend+0x42>
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <xQueueGenericSend+0x46>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueGenericSend+0x48>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xQueueGenericSend+0x64>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	b672      	cpsid	i
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	b662      	cpsie	i
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	e7fe      	b.n	8003b3a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d103      	bne.n	8003b4a <xQueueGenericSend+0x72>
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericSend+0x76>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericSend+0x78>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <xQueueGenericSend+0x94>
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	b672      	cpsid	i
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	b662      	cpsie	i
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	e7fe      	b.n	8003b6a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b6c:	f001 fa7c 	bl	8005068 <xTaskGetSchedulerState>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <xQueueGenericSend+0xa4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <xQueueGenericSend+0xa8>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <xQueueGenericSend+0xaa>
 8003b80:	2300      	movs	r3, #0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <xQueueGenericSend+0xc6>
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	b672      	cpsid	i
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	b662      	cpsie	i
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e7fe      	b.n	8003b9c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b9e:	f001 fdab 	bl	80056f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <xQueueGenericSend+0xdc>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d129      	bne.n	8003c08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f000 facc 	bl	8004156 <prvCopyDataToQueue>
 8003bbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f88d 	bl	8004cec <xTaskRemoveFromEventList>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <xQueueGenericSend+0x200>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	e00a      	b.n	8003c00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <xQueueGenericSend+0x200>)
 8003bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c00:	f001 fdac 	bl	800575c <vPortExitCritical>
				return pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e063      	b.n	8003cd0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c0e:	f001 fda5 	bl	800575c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e05c      	b.n	8003cd0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f8c7 	bl	8004db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c2a:	f001 fd97 	bl	800575c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c2e:	f000 fe65 	bl	80048fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c32:	f001 fd61 	bl	80056f8 <vPortEnterCritical>
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d103      	bne.n	8003c4c <xQueueGenericSend+0x174>
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d103      	bne.n	8003c62 <xQueueGenericSend+0x18a>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c62:	f001 fd7b 	bl	800575c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c66:	1d3a      	adds	r2, r7, #4
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f8b6 	bl	8004de0 <xTaskCheckForTimeOut>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d124      	bne.n	8003cc4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7c:	f000 fb63 	bl	8004346 <prvIsQueueFull>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	3310      	adds	r3, #16
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 f806 	bl	8004ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c96:	f000 faee 	bl	8004276 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c9a:	f000 fe3d 	bl	8004918 <xTaskResumeAll>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f47f af7c 	bne.w	8003b9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <xQueueGenericSend+0x200>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	e772      	b.n	8003b9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cba:	f000 fadc 	bl	8004276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cbe:	f000 fe2b 	bl	8004918 <xTaskResumeAll>
 8003cc2:	e76c      	b.n	8003b9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cc6:	f000 fad6 	bl	8004276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cca:	f000 fe25 	bl	8004918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3738      	adds	r7, #56	; 0x38
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <xQueueGiveFromISR+0x2c>
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	b672      	cpsid	i
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	b662      	cpsie	i
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	e7fe      	b.n	8003d06 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <xQueueGiveFromISR+0x4c>
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	b672      	cpsid	i
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	b662      	cpsie	i
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e7fe      	b.n	8003d26 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <xQueueGiveFromISR+0x5c>
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <xQueueGiveFromISR+0x60>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <xQueueGiveFromISR+0x62>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <xQueueGiveFromISR+0x7e>
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	b672      	cpsid	i
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	b662      	cpsie	i
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	e7fe      	b.n	8003d58 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d5a:	f001 fdad 	bl	80058b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	b672      	cpsid	i
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	b662      	cpsie	i
 8003d76:	617a      	str	r2, [r7, #20]
 8003d78:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d22b      	bcs.n	8003de6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003da0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d112      	bne.n	8003dd0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	3324      	adds	r3, #36	; 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 ff98 	bl	8004cec <xTaskRemoveFromEventList>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e007      	b.n	8003de0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	b25a      	sxtb	r2, r3
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003de0:	2301      	movs	r3, #1
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
 8003de4:	e001      	b.n	8003dea <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3738      	adds	r7, #56	; 0x38
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	; 0x38
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	b672      	cpsid	i
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	b662      	cpsie	i
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	e7fe      	b.n	8003e32 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <xQueueSemaphoreTake+0x54>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	b672      	cpsid	i
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	b662      	cpsie	i
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e7fe      	b.n	8003e52 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e54:	f001 f908 	bl	8005068 <xTaskGetSchedulerState>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <xQueueSemaphoreTake+0x64>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <xQueueSemaphoreTake+0x68>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <xQueueSemaphoreTake+0x6a>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <xQueueSemaphoreTake+0x86>
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	b672      	cpsid	i
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	b662      	cpsie	i
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e7fe      	b.n	8003e84 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e86:	f001 fc37 	bl	80056f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d024      	beq.n	8003ee0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ea6:	f001 faa1 	bl	80053ec <pvTaskIncrementMutexHeldCount>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ff15 	bl	8004cec <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b54      	ldr	r3, [pc, #336]	; (800401c <xQueueSemaphoreTake+0x21c>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ed8:	f001 fc40 	bl	800575c <vPortExitCritical>
				return pdPASS;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e098      	b.n	8004012 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d112      	bne.n	8003f0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <xQueueSemaphoreTake+0x104>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	b672      	cpsid	i
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	b662      	cpsie	i
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e7fe      	b.n	8003f02 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f04:	f001 fc2a 	bl	800575c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e082      	b.n	8004012 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 ff4c 	bl	8004db4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f20:	f001 fc1c 	bl	800575c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f24:	f000 fcea 	bl	80048fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f28:	f001 fbe6 	bl	80056f8 <vPortEnterCritical>
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d103      	bne.n	8003f42 <xQueueSemaphoreTake+0x142>
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d103      	bne.n	8003f58 <xQueueSemaphoreTake+0x158>
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f58:	f001 fc00 	bl	800575c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f5c:	463a      	mov	r2, r7
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 ff3b 	bl	8004de0 <xTaskCheckForTimeOut>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d132      	bne.n	8003fd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f72:	f000 f9d2 	bl	800431a <prvIsQueueEmpty>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d026      	beq.n	8003fca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003f84:	f001 fbb8 	bl	80056f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f889 	bl	80050a4 <xTaskPriorityInherit>
 8003f92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f94:	f001 fbe2 	bl	800575c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fe7d 	bl	8004ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fa8:	f000 f965 	bl	8004276 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fac:	f000 fcb4 	bl	8004918 <xTaskResumeAll>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f47f af67 	bne.w	8003e86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003fb8:	4b18      	ldr	r3, [pc, #96]	; (800401c <xQueueSemaphoreTake+0x21c>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	e75d      	b.n	8003e86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fcc:	f000 f953 	bl	8004276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fd0:	f000 fca2 	bl	8004918 <xTaskResumeAll>
 8003fd4:	e757      	b.n	8003e86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fd8:	f000 f94d 	bl	8004276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fdc:	f000 fc9c 	bl	8004918 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fe2:	f000 f99a 	bl	800431a <prvIsQueueEmpty>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f43f af4c 	beq.w	8003e86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003ff4:	f001 fb80 	bl	80056f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ffa:	f000 f894 	bl	8004126 <prvGetDisinheritPriorityAfterTimeout>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f954 	bl	80052b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800400c:	f001 fba6 	bl	800575c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004012:	4618      	mov	r0, r3
 8004014:	3738      	adds	r7, #56	; 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <xQueueReceiveFromISR+0x2e>
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	b672      	cpsid	i
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	b662      	cpsie	i
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	e7fe      	b.n	800404c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <xQueueReceiveFromISR+0x3c>
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <xQueueReceiveFromISR+0x40>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <xQueueReceiveFromISR+0x42>
 8004060:	2300      	movs	r3, #0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <xQueueReceiveFromISR+0x5e>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	b672      	cpsid	i
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	b662      	cpsie	i
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e7fe      	b.n	800407c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800407e:	f001 fc1b 	bl	80058b8 <vPortValidateInterruptPriority>
	__asm volatile
 8004082:	f3ef 8211 	mrs	r2, BASEPRI
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	b672      	cpsid	i
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	b662      	cpsie	i
 800409a:	61ba      	str	r2, [r7, #24]
 800409c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800409e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02f      	beq.n	800410e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040bc:	f000 f8b5 	bl	800422a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	1e5a      	subs	r2, r3, #1
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d112      	bne.n	80040f8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	3310      	adds	r3, #16
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fe04 	bl	8004cec <xTaskRemoveFromEventList>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e007      	b.n	8004108 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040fc:	3301      	adds	r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	b25a      	sxtb	r2, r3
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004108:	2301      	movs	r3, #1
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
 800410c:	e001      	b.n	8004112 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800411c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800411e:	4618      	mov	r0, r3
 8004120:	3738      	adds	r7, #56	; 0x38
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1c3 0307 	rsb	r3, r3, #7
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e001      	b.n	8004148 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004148:	68fb      	ldr	r3, [r7, #12]
	}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d14d      	bne.n	8004218 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f80f 	bl	80051a4 <xTaskPriorityDisinherit>
 8004186:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	e043      	b.n	8004218 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d119      	bne.n	80041ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6858      	ldr	r0, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	461a      	mov	r2, r3
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	f001 fdcf 	bl	8005d44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	441a      	add	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d32b      	bcc.n	8004218 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	e026      	b.n	8004218 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68d8      	ldr	r0, [r3, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	461a      	mov	r2, r3
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	f001 fdb5 	bl	8005d44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	425b      	negs	r3, r3
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d207      	bcs.n	8004206 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	425b      	negs	r3, r3
 8004200:	441a      	add	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d105      	bne.n	8004218 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3b01      	subs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004220:	697b      	ldr	r3, [r7, #20]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d018      	beq.n	800426e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d303      	bcc.n	800425e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68d9      	ldr	r1, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	461a      	mov	r2, r3
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	f001 fd6b 	bl	8005d44 <memcpy>
	}
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800427e:	f001 fa3b 	bl	80056f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004288:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800428a:	e011      	b.n	80042b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fd27 	bl	8004cec <xTaskRemoveFromEventList>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042a4:	f000 fe00 	bl	8004ea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dce9      	bgt.n	800428c <prvUnlockQueue+0x16>
 80042b8:	e000      	b.n	80042bc <prvUnlockQueue+0x46>
					break;
 80042ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	22ff      	movs	r2, #255	; 0xff
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042c4:	f001 fa4a 	bl	800575c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042c8:	f001 fa16 	bl	80056f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042d4:	e011      	b.n	80042fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d012      	beq.n	8004304 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3310      	adds	r3, #16
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fd02 	bl	8004cec <xTaskRemoveFromEventList>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042ee:	f000 fddb 	bl	8004ea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042f2:	7bbb      	ldrb	r3, [r7, #14]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dce9      	bgt.n	80042d6 <prvUnlockQueue+0x60>
 8004302:	e000      	b.n	8004306 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004304:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	22ff      	movs	r2, #255	; 0xff
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800430e:	f001 fa25 	bl	800575c <vPortExitCritical>
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004322:	f001 f9e9 	bl	80056f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800432e:	2301      	movs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e001      	b.n	8004338 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004338:	f001 fa10 	bl	800575c <vPortExitCritical>

	return xReturn;
 800433c:	68fb      	ldr	r3, [r7, #12]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800434e:	f001 f9d3 	bl	80056f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	429a      	cmp	r2, r3
 800435c:	d102      	bne.n	8004364 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e001      	b.n	8004368 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004368:	f001 f9f8 	bl	800575c <vPortExitCritical>

	return xReturn;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08e      	sub	sp, #56	; 0x38
 800437a:	af04      	add	r7, sp, #16
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <xTaskCreateStatic+0x2c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	b672      	cpsid	i
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	b662      	cpsie	i
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	e7fe      	b.n	80043a0 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <xTaskCreateStatic+0x4a>
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	b672      	cpsid	i
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	b662      	cpsie	i
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e7fe      	b.n	80043be <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043c0:	2354      	movs	r3, #84	; 0x54
 80043c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b54      	cmp	r3, #84	; 0x54
 80043c8:	d00b      	beq.n	80043e2 <xTaskCreateStatic+0x6c>
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	b672      	cpsid	i
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	b662      	cpsie	i
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e7fe      	b.n	80043e0 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01e      	beq.n	8004428 <xTaskCreateStatic+0xb2>
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004402:	2300      	movs	r3, #0
 8004404:	9303      	str	r3, [sp, #12]
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	9302      	str	r3, [sp, #8]
 800440a:	f107 0314 	add.w	r3, r7, #20
 800440e:	9301      	str	r3, [sp, #4]
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f850 	bl	80044c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004422:	f000 f8d5 	bl	80045d0 <prvAddNewTaskToReadyList>
 8004426:	e001      	b.n	800442c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800442c:	697b      	ldr	r3, [r7, #20]
	}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	; 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004436:	b580      	push	{r7, lr}
 8004438:	b08c      	sub	sp, #48	; 0x30
 800443a:	af04      	add	r7, sp, #16
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fa76 	bl	800593c <pvPortMalloc>
 8004450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004458:	2054      	movs	r0, #84	; 0x54
 800445a:	f001 fa6f 	bl	800593c <pvPortMalloc>
 800445e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
 800446c:	e005      	b.n	800447a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f001 fb2c 	bl	8005acc <vPortFree>
 8004474:	e001      	b.n	800447a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d017      	beq.n	80044b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	2300      	movs	r3, #0
 800448c:	9303      	str	r3, [sp, #12]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	9302      	str	r3, [sp, #8]
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f80e 	bl	80044c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a4:	69f8      	ldr	r0, [r7, #28]
 80044a6:	f000 f893 	bl	80045d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e002      	b.n	80044b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b6:	69bb      	ldr	r3, [r7, #24]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80044d8:	440b      	add	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f023 0307 	bic.w	r3, r3, #7
 80044e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <prvInitialiseNewTask+0x4a>
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	b672      	cpsid	i
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	b662      	cpsie	i
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e7fe      	b.n	8004508 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01f      	beq.n	8004550 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	e012      	b.n	800453c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	7819      	ldrb	r1, [r3, #0]
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	3334      	adds	r3, #52	; 0x34
 8004526:	460a      	mov	r2, r1
 8004528:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3301      	adds	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d9e9      	bls.n	8004516 <prvInitialiseNewTask+0x56>
 8004542:	e000      	b.n	8004546 <prvInitialiseNewTask+0x86>
			{
				break;
 8004544:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800454e:	e003      	b.n	8004558 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b06      	cmp	r3, #6
 800455c:	d901      	bls.n	8004562 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800455e:	2306      	movs	r3, #6
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f8d1 	bl	8003720 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	3318      	adds	r3, #24
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f8cc 	bl	8003720 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	f1c3 0207 	rsb	r2, r3, #7
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	69b8      	ldr	r0, [r7, #24]
 80045b2:	f000 ff95 	bl	80054e0 <pxPortInitialiseStack>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d8:	f001 f88e 	bl	80056f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <prvAddNewTaskToReadyList+0xb8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a29      	ldr	r2, [pc, #164]	; (8004688 <prvAddNewTaskToReadyList+0xb8>)
 80045e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <prvAddNewTaskToReadyList+0xbc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ee:	4a27      	ldr	r2, [pc, #156]	; (800468c <prvAddNewTaskToReadyList+0xbc>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <prvAddNewTaskToReadyList+0xb8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d110      	bne.n	800461e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045fc:	f000 fc78 	bl	8004ef0 <prvInitialiseTaskLists>
 8004600:	e00d      	b.n	800461e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <prvAddNewTaskToReadyList+0xc0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <prvAddNewTaskToReadyList+0xbc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	d802      	bhi.n	800461e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004618:	4a1c      	ldr	r2, [pc, #112]	; (800468c <prvAddNewTaskToReadyList+0xbc>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800461e:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 8004626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	2201      	movs	r2, #1
 800462e:	409a      	lsls	r2, r3
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	4a18      	ldr	r2, [pc, #96]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4a15      	ldr	r2, [pc, #84]	; (800469c <prvAddNewTaskToReadyList+0xcc>)
 8004648:	441a      	add	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f7ff f872 	bl	800373a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004656:	f001 f881 	bl	800575c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <prvAddNewTaskToReadyList+0xc0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00e      	beq.n	8004680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <prvAddNewTaskToReadyList+0xbc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	429a      	cmp	r2, r3
 800466e:	d207      	bcs.n	8004680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <prvAddNewTaskToReadyList+0xd0>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000380 	.word	0x20000380
 800468c:	20000280 	.word	0x20000280
 8004690:	2000038c 	.word	0x2000038c
 8004694:	2000039c 	.word	0x2000039c
 8004698:	20000388 	.word	0x20000388
 800469c:	20000284 	.word	0x20000284
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <vTaskDelay+0x64>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <vTaskDelay+0x32>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	b672      	cpsid	i
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	b662      	cpsie	i
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	e7fe      	b.n	80046d4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80046d6:	f000 f911 	bl	80048fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046da:	2100      	movs	r1, #0
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fe99 	bl	8005414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046e2:	f000 f919 	bl	8004918 <xTaskResumeAll>
 80046e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <vTaskDelay+0x68>)
 80046f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200003a8 	.word	0x200003a8
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004718:	f000 ffee 	bl	80056f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <vTaskSuspend+0x18>
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <vTaskSuspend+0x108>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	e000      	b.n	800472a <vTaskSuspend+0x1a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3304      	adds	r3, #4
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff f85f 	bl	80037f4 <uxListRemove>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d115      	bne.n	8004768 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	4936      	ldr	r1, [pc, #216]	; (800481c <vTaskSuspend+0x10c>)
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <vTaskSuspend+0x58>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	2201      	movs	r2, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43da      	mvns	r2, r3
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <vTaskSuspend+0x110>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4013      	ands	r3, r2
 8004764:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <vTaskSuspend+0x110>)
 8004766:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3318      	adds	r3, #24
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff f83d 	bl	80037f4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4828      	ldr	r0, [pc, #160]	; (8004824 <vTaskSuspend+0x114>)
 8004782:	f7fe ffda 	bl	800373a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	d103      	bne.n	800479a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800479a:	f000 ffdf 	bl	800575c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <vTaskSuspend+0x118>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80047a6:	f000 ffa7 	bl	80056f8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80047aa:	f000 fc3d 	bl	8005028 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80047ae:	f000 ffd5 	bl	800575c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <vTaskSuspend+0x108>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d128      	bne.n	800480e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <vTaskSuspend+0x118>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d018      	beq.n	80047f6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <vTaskSuspend+0x11c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <vTaskSuspend+0xd4>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	b672      	cpsid	i
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	b662      	cpsie	i
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	e7fe      	b.n	80047e2 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <vTaskSuspend+0x120>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047f4:	e00b      	b.n	800480e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <vTaskSuspend+0x114>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <vTaskSuspend+0x124>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d103      	bne.n	800480a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <vTaskSuspend+0x108>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
	}
 8004808:	e001      	b.n	800480e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800480a:	f000 f9ed 	bl	8004be8 <vTaskSwitchContext>
	}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000280 	.word	0x20000280
 800481c:	20000284 	.word	0x20000284
 8004820:	20000388 	.word	0x20000388
 8004824:	2000036c 	.word	0x2000036c
 8004828:	2000038c 	.word	0x2000038c
 800482c:	200003a8 	.word	0x200003a8
 8004830:	e000ed04 	.word	0xe000ed04
 8004834:	20000380 	.word	0x20000380

08004838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004846:	463a      	mov	r2, r7
 8004848:	1d39      	adds	r1, r7, #4
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fe76 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	9202      	str	r2, [sp, #8]
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2300      	movs	r3, #0
 8004864:	460a      	mov	r2, r1
 8004866:	491f      	ldr	r1, [pc, #124]	; (80048e4 <vTaskStartScheduler+0xac>)
 8004868:	481f      	ldr	r0, [pc, #124]	; (80048e8 <vTaskStartScheduler+0xb0>)
 800486a:	f7ff fd84 	bl	8004376 <xTaskCreateStatic>
 800486e:	4602      	mov	r2, r0
 8004870:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <vTaskStartScheduler+0xb4>)
 8004872:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004874:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <vTaskStartScheduler+0xb4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800487c:	2301      	movs	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e001      	b.n	8004886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d117      	bne.n	80048bc <vTaskStartScheduler+0x84>
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	b672      	cpsid	i
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	b662      	cpsie	i
 80048a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <vTaskStartScheduler+0xb8>)
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <vTaskStartScheduler+0xbc>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <vTaskStartScheduler+0xc0>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048b6:	f000 fea3 	bl	8005600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048ba:	e00f      	b.n	80048dc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d10b      	bne.n	80048dc <vTaskStartScheduler+0xa4>
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	b672      	cpsid	i
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	b662      	cpsie	i
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e7fe      	b.n	80048da <vTaskStartScheduler+0xa2>
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	08005fd4 	.word	0x08005fd4
 80048e8:	08004ec1 	.word	0x08004ec1
 80048ec:	200003a4 	.word	0x200003a4
 80048f0:	200003a0 	.word	0x200003a0
 80048f4:	2000038c 	.word	0x2000038c
 80048f8:	20000384 	.word	0x20000384

080048fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <vTaskSuspendAll+0x18>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	4a03      	ldr	r2, [pc, #12]	; (8004914 <vTaskSuspendAll+0x18>)
 8004908:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	200003a8 	.word	0x200003a8

08004918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004926:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <xTaskResumeAll+0x118>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <xTaskResumeAll+0x2e>
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	b672      	cpsid	i
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	b662      	cpsie	i
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	e7fe      	b.n	8004944 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004946:	f000 fed7 	bl	80056f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800494a:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <xTaskResumeAll+0x118>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3b01      	subs	r3, #1
 8004950:	4a37      	ldr	r2, [pc, #220]	; (8004a30 <xTaskResumeAll+0x118>)
 8004952:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <xTaskResumeAll+0x118>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d161      	bne.n	8004a20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800495c:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <xTaskResumeAll+0x11c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05d      	beq.n	8004a20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004964:	e02e      	b.n	80049c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004966:	4b34      	ldr	r3, [pc, #208]	; (8004a38 <xTaskResumeAll+0x120>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3318      	adds	r3, #24
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe ff3e 	bl	80037f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe ff39 	bl	80037f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	2201      	movs	r2, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <xTaskResumeAll+0x124>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <xTaskResumeAll+0x124>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <xTaskResumeAll+0x128>)
 80049a2:	441a      	add	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe fec5 	bl	800373a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <xTaskResumeAll+0x12c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <xTaskResumeAll+0x130>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c4:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <xTaskResumeAll+0x120>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1cc      	bne.n	8004966 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049d2:	f000 fb29 	bl	8005028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <xTaskResumeAll+0x134>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f000 f847 	bl	8004a74 <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <xTaskResumeAll+0x130>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f1      	bne.n	80049e2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <xTaskResumeAll+0x134>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <xTaskResumeAll+0x130>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <xTaskResumeAll+0x138>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a20:	f000 fe9c 	bl	800575c <vPortExitCritical>

	return xAlreadyYielded;
 8004a24:	68bb      	ldr	r3, [r7, #8]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200003a8 	.word	0x200003a8
 8004a34:	20000380 	.word	0x20000380
 8004a38:	20000340 	.word	0x20000340
 8004a3c:	20000388 	.word	0x20000388
 8004a40:	20000284 	.word	0x20000284
 8004a44:	20000280 	.word	0x20000280
 8004a48:	20000394 	.word	0x20000394
 8004a4c:	20000390 	.word	0x20000390
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <xTaskGetTickCount+0x1c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a60:	687b      	ldr	r3, [r7, #4]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000384 	.word	0x20000384

08004a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7e:	4b4f      	ldr	r3, [pc, #316]	; (8004bbc <xTaskIncrementTick+0x148>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 8089 	bne.w	8004b9a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a88:	4b4d      	ldr	r3, [pc, #308]	; (8004bc0 <xTaskIncrementTick+0x14c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a90:	4a4b      	ldr	r2, [pc, #300]	; (8004bc0 <xTaskIncrementTick+0x14c>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d121      	bne.n	8004ae0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a9c:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <xTaskIncrementTick+0x150>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <xTaskIncrementTick+0x4a>
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	b672      	cpsid	i
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	b662      	cpsie	i
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	e7fe      	b.n	8004abc <xTaskIncrementTick+0x48>
 8004abe:	4b41      	ldr	r3, [pc, #260]	; (8004bc4 <xTaskIncrementTick+0x150>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <xTaskIncrementTick+0x154>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3e      	ldr	r2, [pc, #248]	; (8004bc4 <xTaskIncrementTick+0x150>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4a3e      	ldr	r2, [pc, #248]	; (8004bc8 <xTaskIncrementTick+0x154>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <xTaskIncrementTick+0x158>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	4a3c      	ldr	r2, [pc, #240]	; (8004bcc <xTaskIncrementTick+0x158>)
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	f000 faa4 	bl	8005028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae0:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <xTaskIncrementTick+0x15c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d348      	bcc.n	8004b7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <xTaskIncrementTick+0x150>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <xTaskIncrementTick+0x15c>)
 8004af6:	f04f 32ff 	mov.w	r2, #4294967295
 8004afa:	601a      	str	r2, [r3, #0]
					break;
 8004afc:	e03e      	b.n	8004b7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afe:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <xTaskIncrementTick+0x150>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d203      	bcs.n	8004b1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b16:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <xTaskIncrementTick+0x15c>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b1c:	e02e      	b.n	8004b7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fe66 	bl	80037f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fe5d 	bl	80037f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	409a      	lsls	r2, r3
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <xTaskIncrementTick+0x160>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	4a22      	ldr	r2, [pc, #136]	; (8004bd4 <xTaskIncrementTick+0x160>)
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <xTaskIncrementTick+0x164>)
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f7fe fde9 	bl	800373a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <xTaskIncrementTick+0x168>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3b9      	bcc.n	8004aea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b7a:	e7b6      	b.n	8004aea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <xTaskIncrementTick+0x168>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	4915      	ldr	r1, [pc, #84]	; (8004bd8 <xTaskIncrementTick+0x164>)
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d907      	bls.n	8004ba4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e004      	b.n	8004ba4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <xTaskIncrementTick+0x16c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <xTaskIncrementTick+0x16c>)
 8004ba2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <xTaskIncrementTick+0x170>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bb0:	697b      	ldr	r3, [r7, #20]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	200003a8 	.word	0x200003a8
 8004bc0:	20000384 	.word	0x20000384
 8004bc4:	20000338 	.word	0x20000338
 8004bc8:	2000033c 	.word	0x2000033c
 8004bcc:	20000398 	.word	0x20000398
 8004bd0:	200003a0 	.word	0x200003a0
 8004bd4:	20000388 	.word	0x20000388
 8004bd8:	20000284 	.word	0x20000284
 8004bdc:	20000280 	.word	0x20000280
 8004be0:	20000390 	.word	0x20000390
 8004be4:	20000394 	.word	0x20000394

08004be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bee:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <vTaskSwitchContext+0xa4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <vTaskSwitchContext+0xa8>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bfc:	e040      	b.n	8004c80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <vTaskSwitchContext+0xa8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c04:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <vTaskSwitchContext+0xac>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c12:	7afb      	ldrb	r3, [r7, #11]
 8004c14:	f1c3 031f 	rsb	r3, r3, #31
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	491f      	ldr	r1, [pc, #124]	; (8004c98 <vTaskSwitchContext+0xb0>)
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	b672      	cpsid	i
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	b662      	cpsie	i
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	e7fe      	b.n	8004c44 <vTaskSwitchContext+0x5c>
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <vTaskSwitchContext+0xb0>)
 8004c52:	4413      	add	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3308      	adds	r3, #8
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d104      	bne.n	8004c76 <vTaskSwitchContext+0x8e>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a07      	ldr	r2, [pc, #28]	; (8004c9c <vTaskSwitchContext+0xb4>)
 8004c7e:	6013      	str	r3, [r2, #0]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	200003a8 	.word	0x200003a8
 8004c90:	20000394 	.word	0x20000394
 8004c94:	20000388 	.word	0x20000388
 8004c98:	20000284 	.word	0x20000284
 8004c9c:	20000280 	.word	0x20000280

08004ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <vTaskPlaceOnEventList+0x28>
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	b672      	cpsid	i
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	b662      	cpsie	i
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e7fe      	b.n	8004cc6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <vTaskPlaceOnEventList+0x48>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3318      	adds	r3, #24
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fe fd56 	bl	8003782 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f000 fb9b 	bl	8005414 <prvAddCurrentTaskToDelayedList>
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000280 	.word	0x20000280

08004cec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <xTaskRemoveFromEventList+0x2e>
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	b672      	cpsid	i
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	b662      	cpsie	i
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e7fe      	b.n	8004d18 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3318      	adds	r3, #24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fd68 	bl	80037f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <xTaskRemoveFromEventList+0xb0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11c      	bne.n	8004d66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fd5f 	bl	80037f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <xTaskRemoveFromEventList+0xb4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <xTaskRemoveFromEventList+0xb4>)
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <xTaskRemoveFromEventList+0xb8>)
 8004d56:	441a      	add	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f7fe fceb 	bl	800373a <vListInsertEnd>
 8004d64:	e005      	b.n	8004d72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3318      	adds	r3, #24
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	480e      	ldr	r0, [pc, #56]	; (8004da8 <xTaskRemoveFromEventList+0xbc>)
 8004d6e:	f7fe fce4 	bl	800373a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <xTaskRemoveFromEventList+0xc0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d905      	bls.n	8004d8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <xTaskRemoveFromEventList+0xc4>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e001      	b.n	8004d90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d90:	697b      	ldr	r3, [r7, #20]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200003a8 	.word	0x200003a8
 8004da0:	20000388 	.word	0x20000388
 8004da4:	20000284 	.word	0x20000284
 8004da8:	20000340 	.word	0x20000340
 8004dac:	20000280 	.word	0x20000280
 8004db0:	20000394 	.word	0x20000394

08004db4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <vTaskInternalSetTimeOutState+0x24>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <vTaskInternalSetTimeOutState+0x28>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	605a      	str	r2, [r3, #4]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	20000398 	.word	0x20000398
 8004ddc:	20000384 	.word	0x20000384

08004de0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xTaskCheckForTimeOut+0x28>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	b672      	cpsid	i
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	e7fe      	b.n	8004e06 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <xTaskCheckForTimeOut+0x46>
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	b672      	cpsid	i
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	b662      	cpsie	i
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e7fe      	b.n	8004e24 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8004e26:	f000 fc67 	bl	80056f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <xTaskCheckForTimeOut+0xc0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d102      	bne.n	8004e4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	e023      	b.n	8004e92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <xTaskCheckForTimeOut+0xc4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d007      	beq.n	8004e66 <xTaskCheckForTimeOut+0x86>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e015      	b.n	8004e92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d20b      	bcs.n	8004e88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff99 	bl	8004db4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e004      	b.n	8004e92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e92:	f000 fc63 	bl	800575c <vPortExitCritical>

	return xReturn;
 8004e96:	69fb      	ldr	r3, [r7, #28]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3720      	adds	r7, #32
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000384 	.word	0x20000384
 8004ea4:	20000398 	.word	0x20000398

08004ea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <vTaskMissedYield+0x14>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000394 	.word	0x20000394

08004ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ec8:	f000 f852 	bl	8004f70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <prvIdleTask+0x28>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d9f9      	bls.n	8004ec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <prvIdleTask+0x2c>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ee4:	e7f0      	b.n	8004ec8 <prvIdleTask+0x8>
 8004ee6:	bf00      	nop
 8004ee8:	20000284 	.word	0x20000284
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e00c      	b.n	8004f16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <prvInitialiseTaskLists+0x60>)
 8004f08:	4413      	add	r3, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fbe8 	bl	80036e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3301      	adds	r3, #1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d9ef      	bls.n	8004efc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f1c:	480d      	ldr	r0, [pc, #52]	; (8004f54 <prvInitialiseTaskLists+0x64>)
 8004f1e:	f7fe fbdf 	bl	80036e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f22:	480d      	ldr	r0, [pc, #52]	; (8004f58 <prvInitialiseTaskLists+0x68>)
 8004f24:	f7fe fbdc 	bl	80036e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <prvInitialiseTaskLists+0x6c>)
 8004f2a:	f7fe fbd9 	bl	80036e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f2e:	480c      	ldr	r0, [pc, #48]	; (8004f60 <prvInitialiseTaskLists+0x70>)
 8004f30:	f7fe fbd6 	bl	80036e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f34:	480b      	ldr	r0, [pc, #44]	; (8004f64 <prvInitialiseTaskLists+0x74>)
 8004f36:	f7fe fbd3 	bl	80036e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <prvInitialiseTaskLists+0x78>)
 8004f3c:	4a05      	ldr	r2, [pc, #20]	; (8004f54 <prvInitialiseTaskLists+0x64>)
 8004f3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <prvInitialiseTaskLists+0x7c>)
 8004f42:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <prvInitialiseTaskLists+0x68>)
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000284 	.word	0x20000284
 8004f54:	20000310 	.word	0x20000310
 8004f58:	20000324 	.word	0x20000324
 8004f5c:	20000340 	.word	0x20000340
 8004f60:	20000354 	.word	0x20000354
 8004f64:	2000036c 	.word	0x2000036c
 8004f68:	20000338 	.word	0x20000338
 8004f6c:	2000033c 	.word	0x2000033c

08004f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f76:	e019      	b.n	8004fac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f78:	f000 fbbe 	bl	80056f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <prvCheckTasksWaitingTermination+0x4c>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe fc33 	bl	80037f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <prvCheckTasksWaitingTermination+0x50>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <prvCheckTasksWaitingTermination+0x50>)
 8004f96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <prvCheckTasksWaitingTermination+0x54>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <prvCheckTasksWaitingTermination+0x54>)
 8004fa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fa2:	f000 fbdb 	bl	800575c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f80e 	bl	8004fc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <prvCheckTasksWaitingTermination+0x54>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e1      	bne.n	8004f78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000354 	.word	0x20000354
 8004fc0:	20000380 	.word	0x20000380
 8004fc4:	20000368 	.word	0x20000368

08004fc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fd74 	bl	8005acc <vPortFree>
				vPortFree( pxTCB );
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fd71 	bl	8005acc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fea:	e019      	b.n	8005020 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d103      	bne.n	8004ffe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fd68 	bl	8005acc <vPortFree>
	}
 8004ffc:	e010      	b.n	8005020 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005004:	2b02      	cmp	r3, #2
 8005006:	d00b      	beq.n	8005020 <prvDeleteTCB+0x58>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e7fe      	b.n	800501e <prvDeleteTCB+0x56>
	}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <prvResetNextTaskUnblockTime+0x38>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <prvResetNextTaskUnblockTime+0x3c>)
 800503a:	f04f 32ff 	mov.w	r2, #4294967295
 800503e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005040:	e008      	b.n	8005054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <prvResetNextTaskUnblockTime+0x38>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <prvResetNextTaskUnblockTime+0x3c>)
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000338 	.word	0x20000338
 8005064:	200003a0 	.word	0x200003a0

08005068 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <xTaskGetSchedulerState+0x34>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005076:	2301      	movs	r3, #1
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	e008      	b.n	800508e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <xTaskGetSchedulerState+0x38>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005084:	2302      	movs	r3, #2
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	e001      	b.n	800508e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800508e:	687b      	ldr	r3, [r7, #4]
	}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	2000038c 	.word	0x2000038c
 80050a0:	200003a8 	.word	0x200003a8

080050a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d069      	beq.n	800518e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	4b36      	ldr	r3, [pc, #216]	; (8005198 <xTaskPriorityInherit+0xf4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d259      	bcs.n	800517c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	db06      	blt.n	80050de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <xTaskPriorityInherit+0xf4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	f1c3 0207 	rsb	r2, r3, #7
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6959      	ldr	r1, [r3, #20]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a2b      	ldr	r2, [pc, #172]	; (800519c <xTaskPriorityInherit+0xf8>)
 80050f0:	4413      	add	r3, r2
 80050f2:	4299      	cmp	r1, r3
 80050f4:	d13a      	bne.n	800516c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fb7a 	bl	80037f4 <uxListRemove>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d115      	bne.n	8005132 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4924      	ldr	r1, [pc, #144]	; (800519c <xTaskPriorityInherit+0xf8>)
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xTaskPriorityInherit+0x8e>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	2201      	movs	r2, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43da      	mvns	r2, r3
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <xTaskPriorityInherit+0xfc>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4013      	ands	r3, r2
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <xTaskPriorityInherit+0xfc>)
 8005130:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005132:	4b19      	ldr	r3, [pc, #100]	; (8005198 <xTaskPriorityInherit+0xf4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	2201      	movs	r2, #1
 8005142:	409a      	lsls	r2, r3
 8005144:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <xTaskPriorityInherit+0xfc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4313      	orrs	r3, r2
 800514a:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <xTaskPriorityInherit+0xfc>)
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <xTaskPriorityInherit+0xf8>)
 800515c:	441a      	add	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3304      	adds	r3, #4
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f7fe fae8 	bl	800373a <vListInsertEnd>
 800516a:	e004      	b.n	8005176 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <xTaskPriorityInherit+0xf4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005176:	2301      	movs	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e008      	b.n	800518e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <xTaskPriorityInherit+0xf4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	429a      	cmp	r2, r3
 8005188:	d201      	bcs.n	800518e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800518a:	2301      	movs	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800518e:	68fb      	ldr	r3, [r7, #12]
	}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000280 	.word	0x20000280
 800519c:	20000284 	.word	0x20000284
 80051a0:	20000388 	.word	0x20000388

080051a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d070      	beq.n	800529c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ba:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <xTaskPriorityDisinherit+0x104>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d00b      	beq.n	80051dc <xTaskPriorityDisinherit+0x38>
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	b672      	cpsid	i
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	b662      	cpsie	i
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e7fe      	b.n	80051da <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xTaskPriorityDisinherit+0x58>
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	b672      	cpsid	i
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	b662      	cpsie	i
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	e7fe      	b.n	80051fa <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	429a      	cmp	r2, r3
 8005210:	d044      	beq.n	800529c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	2b00      	cmp	r3, #0
 8005218:	d140      	bne.n	800529c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fae8 	bl	80037f4 <uxListRemove>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d115      	bne.n	8005256 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	491f      	ldr	r1, [pc, #124]	; (80052ac <xTaskPriorityDisinherit+0x108>)
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xTaskPriorityDisinherit+0xb2>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <xTaskPriorityDisinherit+0x10c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4013      	ands	r3, r2
 8005252:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <xTaskPriorityDisinherit+0x10c>)
 8005254:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	f1c3 0207 	rsb	r2, r3, #7
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	2201      	movs	r2, #1
 8005270:	409a      	lsls	r2, r3
 8005272:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <xTaskPriorityDisinherit+0x10c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4313      	orrs	r3, r2
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <xTaskPriorityDisinherit+0x10c>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <xTaskPriorityDisinherit+0x108>)
 800528a:	441a      	add	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7fe fa51 	bl	800373a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800529c:	697b      	ldr	r3, [r7, #20]
	}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000280 	.word	0x20000280
 80052ac:	20000284 	.word	0x20000284
 80052b0:	20000388 	.word	0x20000388

080052b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8085 	beq.w	80053d8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	b672      	cpsid	i
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	b662      	cpsie	i
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e7fe      	b.n	80052ec <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d902      	bls.n	80052fe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e002      	b.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	429a      	cmp	r2, r3
 800530c:	d064      	beq.n	80053d8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	429a      	cmp	r2, r3
 8005316:	d15f      	bne.n	80053d8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005318:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	429a      	cmp	r2, r3
 8005320:	d10b      	bne.n	800533a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	b672      	cpsid	i
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	b662      	cpsie	i
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	e7fe      	b.n	8005338 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	db04      	blt.n	8005358 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f1c3 0207 	rsb	r2, r3, #7
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6959      	ldr	r1, [r3, #20]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005368:	4413      	add	r3, r2
 800536a:	4299      	cmp	r1, r3
 800536c:	d134      	bne.n	80053d8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fa3e 	bl	80037f4 <uxListRemove>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d115      	bne.n	80053aa <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	4918      	ldr	r1, [pc, #96]	; (80053e4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	2201      	movs	r2, #1
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43da      	mvns	r2, r3
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4013      	ands	r3, r2
 80053a6:	4a10      	ldr	r2, [pc, #64]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	2201      	movs	r2, #1
 80053b0:	409a      	lsls	r2, r3
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80053ca:	441a      	add	r2, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7fe f9b1 	bl	800373a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053d8:	bf00      	nop
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000280 	.word	0x20000280
 80053e4:	20000284 	.word	0x20000284
 80053e8:	20000388 	.word	0x20000388

080053ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <pvTaskIncrementMutexHeldCount+0x24>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <pvTaskIncrementMutexHeldCount+0x24>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fe:	3201      	adds	r2, #1
 8005400:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005402:	4b03      	ldr	r3, [pc, #12]	; (8005410 <pvTaskIncrementMutexHeldCount+0x24>)
 8005404:	681b      	ldr	r3, [r3, #0]
	}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	20000280 	.word	0x20000280

08005414 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800541e:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3304      	adds	r3, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe f9e2 	bl	80037f4 <uxListRemove>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	2201      	movs	r2, #1
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43da      	mvns	r2, r3
 8005444:	4b21      	ldr	r3, [pc, #132]	; (80054cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4013      	ands	r3, r2
 800544a:	4a20      	ldr	r2, [pc, #128]	; (80054cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800544c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d10a      	bne.n	800546c <prvAddCurrentTaskToDelayedList+0x58>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	481a      	ldr	r0, [pc, #104]	; (80054d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005466:	f7fe f968 	bl	800373a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800546a:	e026      	b.n	80054ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d209      	bcs.n	8005498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005484:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7fe f976 	bl	8003782 <vListInsert>
}
 8005496:	e010      	b.n	80054ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe f96c 	bl	8003782 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d202      	bcs.n	80054ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6013      	str	r3, [r2, #0]
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000384 	.word	0x20000384
 80054c8:	20000280 	.word	0x20000280
 80054cc:	20000388 	.word	0x20000388
 80054d0:	2000036c 	.word	0x2000036c
 80054d4:	2000033c 	.word	0x2000033c
 80054d8:	20000338 	.word	0x20000338
 80054dc:	200003a0 	.word	0x200003a0

080054e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3b04      	subs	r3, #4
 80054f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b04      	subs	r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b04      	subs	r3, #4
 800550e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <pxPortInitialiseStack+0x64>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3b14      	subs	r3, #20
 800551a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3b04      	subs	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f06f 0202 	mvn.w	r2, #2
 800552e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3b20      	subs	r3, #32
 8005534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	08005549 	.word	0x08005549

08005548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <prvTaskExitError+0x58>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d00b      	beq.n	8005574 <prvTaskExitError+0x2c>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	b672      	cpsid	i
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	b662      	cpsie	i
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e7fe      	b.n	8005572 <prvTaskExitError+0x2a>
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	b672      	cpsid	i
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	b662      	cpsie	i
 8005588:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800558a:	bf00      	nop
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0fc      	beq.n	800558c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c
	...

080055b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <pxCurrentTCBConst2>)
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	6808      	ldr	r0, [r1, #0]
 80055b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	f380 8809 	msr	PSP, r0
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8811 	msr	BASEPRI, r0
 80055ca:	4770      	bx	lr
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst2>:
 80055d0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055d8:	4808      	ldr	r0, [pc, #32]	; (80055fc <prvPortStartFirstTask+0x24>)
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f380 8808 	msr	MSP, r0
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8814 	msr	CONTROL, r0
 80055ea:	b662      	cpsie	i
 80055ec:	b661      	cpsie	f
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	df00      	svc	0
 80055f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055fa:	bf00      	nop
 80055fc:	e000ed08 	.word	0xe000ed08

08005600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <xPortStartScheduler+0xe0>)
 8005608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4b2e      	ldr	r3, [pc, #184]	; (80056e4 <xPortStartScheduler+0xe4>)
 800562c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800562e:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <xPortStartScheduler+0xe8>)
 8005630:	2207      	movs	r2, #7
 8005632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005634:	e009      	b.n	800564a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005636:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <xPortStartScheduler+0xe8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3b01      	subs	r3, #1
 800563c:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <xPortStartScheduler+0xe8>)
 800563e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d0ef      	beq.n	8005636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005656:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <xPortStartScheduler+0xe8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1c3 0307 	rsb	r3, r3, #7
 800565e:	2b04      	cmp	r3, #4
 8005660:	d00b      	beq.n	800567a <xPortStartScheduler+0x7a>
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	b672      	cpsid	i
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	b662      	cpsie	i
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	e7fe      	b.n	8005678 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800567a:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <xPortStartScheduler+0xe8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <xPortStartScheduler+0xe8>)
 8005682:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <xPortStartScheduler+0xe8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <xPortStartScheduler+0xe8>)
 800568e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005698:	4b14      	ldr	r3, [pc, #80]	; (80056ec <xPortStartScheduler+0xec>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a13      	ldr	r2, [pc, #76]	; (80056ec <xPortStartScheduler+0xec>)
 800569e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <xPortStartScheduler+0xec>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a10      	ldr	r2, [pc, #64]	; (80056ec <xPortStartScheduler+0xec>)
 80056aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056b0:	f000 f8d4 	bl	800585c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <xPortStartScheduler+0xf0>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056ba:	f000 f8f3 	bl	80058a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <xPortStartScheduler+0xf4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <xPortStartScheduler+0xf4>)
 80056c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056ca:	f7ff ff85 	bl	80055d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056ce:	f7ff fa8b 	bl	8004be8 <vTaskSwitchContext>
	prvTaskExitError();
 80056d2:	f7ff ff39 	bl	8005548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	e000e400 	.word	0xe000e400
 80056e4:	200003ac 	.word	0x200003ac
 80056e8:	200003b0 	.word	0x200003b0
 80056ec:	e000ed20 	.word	0xe000ed20
 80056f0:	2000000c 	.word	0x2000000c
 80056f4:	e000ef34 	.word	0xe000ef34

080056f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	b672      	cpsid	i
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	b662      	cpsie	i
 8005712:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <vPortEnterCritical+0x5c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3301      	adds	r3, #1
 800571a:	4a0e      	ldr	r2, [pc, #56]	; (8005754 <vPortEnterCritical+0x5c>)
 800571c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <vPortEnterCritical+0x5c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d110      	bne.n	8005748 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <vPortEnterCritical+0x60>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <vPortEnterCritical+0x50>
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	b672      	cpsid	i
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	b662      	cpsie	i
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	e7fe      	b.n	8005746 <vPortEnterCritical+0x4e>
	}
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	2000000c 	.word	0x2000000c
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <vPortExitCritical+0x50>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <vPortExitCritical+0x26>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	b672      	cpsid	i
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	b662      	cpsie	i
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e7fe      	b.n	8005780 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <vPortExitCritical+0x50>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3b01      	subs	r3, #1
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <vPortExitCritical+0x50>)
 800578a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800578c:	4b07      	ldr	r3, [pc, #28]	; (80057ac <vPortExitCritical+0x50>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <vPortExitCritical+0x42>
 8005794:	2300      	movs	r3, #0
 8005796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000000c 	.word	0x2000000c

080057b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057b0:	f3ef 8009 	mrs	r0, PSP
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	4b15      	ldr	r3, [pc, #84]	; (8005810 <pxCurrentTCBConst>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	f01e 0f10 	tst.w	lr, #16
 80057c0:	bf08      	it	eq
 80057c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	6010      	str	r0, [r2, #0]
 80057cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	f7ff fa00 	bl	8004be8 <vTaskSwitchContext>
 80057e8:	f04f 0000 	mov.w	r0, #0
 80057ec:	f380 8811 	msr	BASEPRI, r0
 80057f0:	bc09      	pop	{r0, r3}
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	6808      	ldr	r0, [r1, #0]
 80057f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	f01e 0f10 	tst.w	lr, #16
 80057fe:	bf08      	it	eq
 8005800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005804:	f380 8809 	msr	PSP, r0
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <pxCurrentTCBConst>:
 8005810:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop

08005818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	b672      	cpsid	i
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	b662      	cpsie	i
 8005832:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005834:	f7ff f91e 	bl	8004a74 <xTaskIncrementTick>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <SysTick_Handler+0x40>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	603b      	str	r3, [r7, #0]
	__asm volatile
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <vPortSetupTimerInterrupt+0x34>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <vPortSetupTimerInterrupt+0x38>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <vPortSetupTimerInterrupt+0x3c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0a      	ldr	r2, [pc, #40]	; (800589c <vPortSetupTimerInterrupt+0x40>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <vPortSetupTimerInterrupt+0x44>)
 800587a:	3b01      	subs	r3, #1
 800587c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <vPortSetupTimerInterrupt+0x34>)
 8005880:	2207      	movs	r2, #7
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	e000e010 	.word	0xe000e010
 8005894:	e000e018 	.word	0xe000e018
 8005898:	20000000 	.word	0x20000000
 800589c:	10624dd3 	.word	0x10624dd3
 80058a0:	e000e014 	.word	0xe000e014

080058a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058b4 <vPortEnableVFP+0x10>
 80058a8:	6801      	ldr	r1, [r0, #0]
 80058aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ae:	6001      	str	r1, [r0, #0]
 80058b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058b2:	bf00      	nop
 80058b4:	e000ed88 	.word	0xe000ed88

080058b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058be:	f3ef 8305 	mrs	r3, IPSR
 80058c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	d915      	bls.n	80058f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058ca:	4a18      	ldr	r2, [pc, #96]	; (800592c <vPortValidateInterruptPriority+0x74>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <vPortValidateInterruptPriority+0x78>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	7afa      	ldrb	r2, [r7, #11]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d20b      	bcs.n	80058f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	b672      	cpsid	i
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	b662      	cpsie	i
 80058f2:	607b      	str	r3, [r7, #4]
 80058f4:	e7fe      	b.n	80058f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <vPortValidateInterruptPriority+0x7c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058fe:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <vPortValidateInterruptPriority+0x80>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d90b      	bls.n	800591e <vPortValidateInterruptPriority+0x66>
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	b672      	cpsid	i
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	b662      	cpsie	i
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	e7fe      	b.n	800591c <vPortValidateInterruptPriority+0x64>
	}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	e000e3f0 	.word	0xe000e3f0
 8005930:	200003ac 	.word	0x200003ac
 8005934:	e000ed0c 	.word	0xe000ed0c
 8005938:	200003b0 	.word	0x200003b0

0800593c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005948:	f7fe ffd8 	bl	80048fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800594c:	4b5a      	ldr	r3, [pc, #360]	; (8005ab8 <pvPortMalloc+0x17c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005954:	f000 f916 	bl	8005b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005958:	4b58      	ldr	r3, [pc, #352]	; (8005abc <pvPortMalloc+0x180>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 8090 	bne.w	8005a86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01e      	beq.n	80059aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800596c:	2208      	movs	r2, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d015      	beq.n	80059aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f023 0307 	bic.w	r3, r3, #7
 8005984:	3308      	adds	r3, #8
 8005986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <pvPortMalloc+0x6e>
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	b672      	cpsid	i
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	b662      	cpsie	i
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e7fe      	b.n	80059a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d06a      	beq.n	8005a86 <pvPortMalloc+0x14a>
 80059b0:	4b43      	ldr	r3, [pc, #268]	; (8005ac0 <pvPortMalloc+0x184>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d865      	bhi.n	8005a86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059ba:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <pvPortMalloc+0x188>)
 80059bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059be:	4b41      	ldr	r3, [pc, #260]	; (8005ac4 <pvPortMalloc+0x188>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059c4:	e004      	b.n	80059d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d903      	bls.n	80059e2 <pvPortMalloc+0xa6>
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f1      	bne.n	80059c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059e2:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <pvPortMalloc+0x17c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d04c      	beq.n	8005a86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	4413      	add	r3, r2
 80059f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	2308      	movs	r3, #8
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d920      	bls.n	8005a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <pvPortMalloc+0xfc>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	b672      	cpsid	i
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	b662      	cpsie	i
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e7fe      	b.n	8005a36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a4a:	69b8      	ldr	r0, [r7, #24]
 8005a4c:	f000 f8fc 	bl	8005c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <pvPortMalloc+0x18c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d203      	bcs.n	8005a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <pvPortMalloc+0x18c>)
 8005a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <pvPortMalloc+0x180>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a86:	f7fe ff47 	bl	8004918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <pvPortMalloc+0x170>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	b672      	cpsid	i
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	b662      	cpsie	i
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e7fe      	b.n	8005aaa <pvPortMalloc+0x16e>
	return pvReturn;
 8005aac:	69fb      	ldr	r3, [r7, #28]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	; 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20003fbc 	.word	0x20003fbc
 8005abc:	20003fc8 	.word	0x20003fc8
 8005ac0:	20003fc0 	.word	0x20003fc0
 8005ac4:	20003fb4 	.word	0x20003fb4
 8005ac8:	20003fc4 	.word	0x20003fc4

08005acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d04a      	beq.n	8005b74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ade:	2308      	movs	r3, #8
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <vPortFree+0xb0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <vPortFree+0x46>
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	b672      	cpsid	i
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	b662      	cpsie	i
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e7fe      	b.n	8005b10 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <vPortFree+0x66>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	b672      	cpsid	i
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	b662      	cpsie	i
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	e7fe      	b.n	8005b30 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <vPortFree+0xb0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d019      	beq.n	8005b74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d115      	bne.n	8005b74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <vPortFree+0xb0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	401a      	ands	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b58:	f7fe fed0 	bl	80048fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <vPortFree+0xb4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	4a06      	ldr	r2, [pc, #24]	; (8005b80 <vPortFree+0xb4>)
 8005b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b6a:	6938      	ldr	r0, [r7, #16]
 8005b6c:	f000 f86c 	bl	8005c48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b70:	f7fe fed2 	bl	8004918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b74:	bf00      	nop
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20003fc8 	.word	0x20003fc8
 8005b80:	20003fc0 	.word	0x20003fc0

08005b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b90:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <prvHeapInit+0xac>)
 8005b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3307      	adds	r3, #7
 8005ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0307 	bic.w	r3, r3, #7
 8005baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <prvHeapInit+0xac>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <prvHeapInit+0xb0>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <prvHeapInit+0xb0>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <prvHeapInit+0xb4>)
 8005be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <prvHeapInit+0xb4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <prvHeapInit+0xb4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvHeapInit+0xb4>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	4a0a      	ldr	r2, [pc, #40]	; (8005c3c <prvHeapInit+0xb8>)
 8005c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a09      	ldr	r2, [pc, #36]	; (8005c40 <prvHeapInit+0xbc>)
 8005c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c1c:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <prvHeapInit+0xc0>)
 8005c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c22:	601a      	str	r2, [r3, #0]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	200003b4 	.word	0x200003b4
 8005c34:	20003fb4 	.word	0x20003fb4
 8005c38:	20003fbc 	.word	0x20003fbc
 8005c3c:	20003fc4 	.word	0x20003fc4
 8005c40:	20003fc0 	.word	0x20003fc0
 8005c44:	20003fc8 	.word	0x20003fc8

08005c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <prvInsertBlockIntoFreeList+0xac>)
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e002      	b.n	8005c5c <prvInsertBlockIntoFreeList+0x14>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d8f7      	bhi.n	8005c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4413      	add	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d108      	bne.n	8005c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	441a      	add	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d118      	bne.n	8005cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d00d      	beq.n	8005cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e008      	b.n	8005cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e003      	b.n	8005cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d002      	beq.n	8005ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20003fb4 	.word	0x20003fb4
 8005cf8:	20003fbc 	.word	0x20003fbc

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4e0d      	ldr	r6, [pc, #52]	; (8005d34 <__libc_init_array+0x38>)
 8005d00:	4c0d      	ldr	r4, [pc, #52]	; (8005d38 <__libc_init_array+0x3c>)
 8005d02:	1ba4      	subs	r4, r4, r6
 8005d04:	10a4      	asrs	r4, r4, #2
 8005d06:	2500      	movs	r5, #0
 8005d08:	42a5      	cmp	r5, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4e0b      	ldr	r6, [pc, #44]	; (8005d3c <__libc_init_array+0x40>)
 8005d0e:	4c0c      	ldr	r4, [pc, #48]	; (8005d40 <__libc_init_array+0x44>)
 8005d10:	f000 f82c 	bl	8005d6c <_init>
 8005d14:	1ba4      	subs	r4, r4, r6
 8005d16:	10a4      	asrs	r4, r4, #2
 8005d18:	2500      	movs	r5, #0
 8005d1a:	42a5      	cmp	r5, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d24:	4798      	blx	r3
 8005d26:	3501      	adds	r5, #1
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d2e:	4798      	blx	r3
 8005d30:	3501      	adds	r5, #1
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	08005ffc 	.word	0x08005ffc
 8005d38:	08005ffc 	.word	0x08005ffc
 8005d3c:	08005ffc 	.word	0x08005ffc
 8005d40:	08006000 	.word	0x08006000

08005d44 <memcpy>:
 8005d44:	b510      	push	{r4, lr}
 8005d46:	1e43      	subs	r3, r0, #1
 8005d48:	440a      	add	r2, r1
 8005d4a:	4291      	cmp	r1, r2
 8005d4c:	d100      	bne.n	8005d50 <memcpy+0xc>
 8005d4e:	bd10      	pop	{r4, pc}
 8005d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d58:	e7f7      	b.n	8005d4a <memcpy+0x6>

08005d5a <memset>:
 8005d5a:	4402      	add	r2, r0
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d100      	bne.n	8005d64 <memset+0xa>
 8005d62:	4770      	bx	lr
 8005d64:	f803 1b01 	strb.w	r1, [r3], #1
 8005d68:	e7f9      	b.n	8005d5e <memset+0x4>
	...

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
