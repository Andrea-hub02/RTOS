
F767ZIV2_ProtectedPool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004984  08004984  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800498c  0800498c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b4  20000010  080049a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049c4  080049a4  000249c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158f2  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002876  00000000  00000000  00035930  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  000381a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  00039288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002951  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3d2  00000000  00000000  0003cb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd223  00000000  00000000  00049f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147186  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  00147204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080048ac 	.word	0x080048ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080048ac 	.word	0x080048ac

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 f9ef 	bl	8000926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f832 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f88c 	bl	8000668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f001 fbec 	bl	8001d2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of toggleGreen */
  toggleGreenHandle = osThreadNew(toggleGreenHook, NULL, &toggleGreen_attributes);
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <main+0x4c>)
 8000556:	2100      	movs	r1, #0
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <main+0x50>)
 800055a:	f001 fc51 	bl	8001e00 <osThreadNew>
 800055e:	4602      	mov	r2, r0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <main+0x54>)
 8000562:	601a      	str	r2, [r3, #0]

  /* creation of toggleRed */
  toggleRedHandle = osThreadNew(toggleRedHook, NULL, &toggleRed_attributes);
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <main+0x58>)
 8000566:	2100      	movs	r1, #0
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <main+0x5c>)
 800056a:	f001 fc49 	bl	8001e00 <osThreadNew>
 800056e:	4602      	mov	r2, r0
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <main+0x60>)
 8000572:	601a      	str	r2, [r3, #0]

  /* creation of rateControl */
  rateControlHandle = osThreadNew(rateControlHook, NULL, &rateControl_attributes);
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <main+0x64>)
 8000576:	2100      	movs	r1, #0
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <main+0x68>)
 800057a:	f001 fc41 	bl	8001e00 <osThreadNew>
 800057e:	4602      	mov	r2, r0
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <main+0x6c>)
 8000582:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f001 fc06 	bl	8001d94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x48>
 800058a:	bf00      	nop
 800058c:	08004900 	.word	0x08004900
 8000590:	08000711 	.word	0x08000711
 8000594:	20004938 	.word	0x20004938
 8000598:	08004924 	.word	0x08004924
 800059c:	08000721 	.word	0x08000721
 80005a0:	20004934 	.word	0x20004934
 80005a4:	08004948 	.word	0x08004948
 80005a8:	08000731 	.word	0x08000731
 80005ac:	2000493c 	.word	0x2000493c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 f96b 	bl	800489a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xb0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xb0>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xb0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <SystemClock_Config+0xb4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <SystemClock_Config+0xb4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <SystemClock_Config+0xb4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fc55 	bl	8000ecc <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000628:	f000 f89c 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f000 feed 	bl	8001428 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000654:	f000 f886 	bl	8000764 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_GPIO_Init+0x9c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a20      	ldr	r2, [pc, #128]	; (8000704 <MX_GPIO_Init+0x9c>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_GPIO_Init+0x9c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_GPIO_Init+0x9c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a1a      	ldr	r2, [pc, #104]	; (8000704 <MX_GPIO_Init+0x9c>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERed_GPIO_Port, ERed_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <MX_GPIO_Init+0xa0>)
 80006b4:	f000 fbf0 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2108      	movs	r1, #8
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_GPIO_Init+0xa4>)
 80006be:	f000 fbeb 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ERed_Pin */
  GPIO_InitStruct.Pin = ERed_Pin;
 80006c2:	2308      	movs	r3, #8
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ERed_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0xa0>)
 80006da:	f000 fa33 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : EGreen_Pin */
  GPIO_InitStruct.Pin = EGreen_Pin;
 80006de:	2308      	movs	r3, #8
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EGreen_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_GPIO_Init+0xa4>)
 80006f6:	f000 fa25 	bl	8000b44 <HAL_GPIO_Init>

}
 80006fa:	bf00      	nop
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020800 	.word	0x40020800
 800070c:	40020000 	.word	0x40020000

08000710 <toggleGreenHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_toggleGreenHook */
void toggleGreenHook(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f001 fc17 	bl	8001f4c <osDelay>
 800071e:	e7fb      	b.n	8000718 <toggleGreenHook+0x8>

08000720 <toggleRedHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleRedHook */
void toggleRedHook(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN toggleRedHook */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fc0f 	bl	8001f4c <osDelay>
 800072e:	e7fb      	b.n	8000728 <toggleRedHook+0x8>

08000730 <rateControlHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rateControlHook */
void rateControlHook(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rateControlHook */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f001 fc07 	bl	8001f4c <osDelay>
 800073e:	e7fb      	b.n	8000738 <rateControlHook+0x8>

08000740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d101      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000752:	f000 f8f5 	bl	8000940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010000 	.word	0x40010000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076a:	e7fe      	b.n	800076a <Error_Handler+0x6>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	f06f 0001 	mvn.w	r0, #1
 80007aa:	f000 f9a1 	bl	8000af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	2019      	movs	r0, #25
 80007d2:	f000 f98d 	bl	8000af0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007d6:	2019      	movs	r0, #25
 80007d8:	f000 f9a6 	bl	8000b28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <HAL_InitTick+0x9c>)
 80007de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e0:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <HAL_InitTick+0x9c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6453      	str	r3, [r2, #68]	; 0x44
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_InitTick+0x9c>)
 80007ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f4:	f107 0210 	add.w	r2, r7, #16
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fff4 	bl	80017ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000804:	f000 ffde 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8000808:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <HAL_InitTick+0xa0>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0c9b      	lsrs	r3, r3, #18
 8000814:	3b01      	subs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_InitTick+0xa4>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <HAL_InitTick+0xa8>)
 800081c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_InitTick+0xa4>)
 8000820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000824:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_InitTick+0xa4>)
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_InitTick+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_InitTick+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <HAL_InitTick+0xa4>)
 800083a:	f001 f809 	bl	8001850 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_InitTick+0xa4>)
 8000846:	f001 f839 	bl	80018bc <HAL_TIM_Base_Start_IT>
 800084a:	4603      	mov	r3, r0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	431bde83 	.word	0x431bde83
 8000860:	20004940 	.word	0x20004940
 8000864:	40010000 	.word	0x40010000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800089a:	f001 f839 	bl	8001910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20004940 	.word	0x20004940

080008a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x28>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SystemInit+0x28>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SystemInit+0x28>)
 80008be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800090c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008da:	e003      	b.n	80008e4 <LoopCopyDataInit>

080008dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008e2:	3104      	adds	r1, #4

080008e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008ec:	d3f6      	bcc.n	80008dc <CopyDataInit>
  ldr  r2, =_sbss
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008f0:	e002      	b.n	80008f8 <LoopFillZerobss>

080008f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008f4:	f842 3b04 	str.w	r3, [r2], #4

080008f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008fc:	d3f9      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fe:	f7ff ffd3 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000902:	f003 ff9b 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000906:	f7ff fe1b 	bl	8000540 <main>
  bx  lr    
 800090a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800090c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000910:	08004994 	.word	0x08004994
  ldr  r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000918:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800091c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000920:	200049c4 	.word	0x200049c4

08000924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC_IRQHandler>

08000926 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092a:	2003      	movs	r0, #3
 800092c:	f000 f8d5 	bl	8000ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff43 	bl	80007bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000936:	f7ff ff19 	bl	800076c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20004980 	.word	0x20004980

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20004980 	.word	0x20004980

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <__NVIC_SetPriorityGrouping+0x40>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	4313      	orrs	r3, r2
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x40>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	05fa0000 	.word	0x05fa0000

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff4c 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b02:	f7ff ff61 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	6978      	ldr	r0, [r7, #20]
 8000b0e:	f7ff ffb1 	bl	8000a74 <NVIC_EncodePriority>
 8000b12:	4602      	mov	r2, r0
 8000b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff80 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff54 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e175      	b.n	8000e50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b64:	2201      	movs	r2, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8164 	bne.w	8000e4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d00b      	beq.n	8000ba2 <HAL_GPIO_Init+0x5e>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d007      	beq.n	8000ba2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b96:	2b11      	cmp	r3, #17
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d130      	bne.n	8000c04 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 0201 	and.w	r2, r3, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x100>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b12      	cmp	r3, #18
 8000c42:	d123      	bne.n	8000c8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3208      	adds	r2, #8
 8000c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	69b9      	ldr	r1, [r7, #24]
 8000c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0203 	and.w	r2, r3, #3
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80be 	beq.w	8000e4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a64      	ldr	r2, [pc, #400]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ce6:	4a60      	ldr	r2, [pc, #384]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a57      	ldr	r2, [pc, #348]	; (8000e6c <HAL_GPIO_Init+0x328>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d037      	beq.n	8000d82 <HAL_GPIO_Init+0x23e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a56      	ldr	r2, [pc, #344]	; (8000e70 <HAL_GPIO_Init+0x32c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d031      	beq.n	8000d7e <HAL_GPIO_Init+0x23a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a55      	ldr	r2, [pc, #340]	; (8000e74 <HAL_GPIO_Init+0x330>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d02b      	beq.n	8000d7a <HAL_GPIO_Init+0x236>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a54      	ldr	r2, [pc, #336]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d025      	beq.n	8000d76 <HAL_GPIO_Init+0x232>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a53      	ldr	r2, [pc, #332]	; (8000e7c <HAL_GPIO_Init+0x338>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d01f      	beq.n	8000d72 <HAL_GPIO_Init+0x22e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a52      	ldr	r2, [pc, #328]	; (8000e80 <HAL_GPIO_Init+0x33c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d019      	beq.n	8000d6e <HAL_GPIO_Init+0x22a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <HAL_GPIO_Init+0x340>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a50      	ldr	r2, [pc, #320]	; (8000e88 <HAL_GPIO_Init+0x344>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00d      	beq.n	8000d66 <HAL_GPIO_Init+0x222>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4f      	ldr	r2, [pc, #316]	; (8000e8c <HAL_GPIO_Init+0x348>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x21e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <HAL_GPIO_Init+0x34c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_GPIO_Init+0x21a>
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	e012      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d5e:	230a      	movs	r3, #10
 8000d60:	e010      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d62:	2308      	movs	r3, #8
 8000d64:	e00e      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e00c      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	e00a      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d6e:	2305      	movs	r3, #5
 8000d70:	e008      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d82:	2300      	movs	r3, #0
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d94:	4934      	ldr	r1, [pc, #208]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da2:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc6:	4a33      	ldr	r2, [pc, #204]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df0:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	f67f ae86 	bls.w	8000b64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3724      	adds	r7, #36	; 0x24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020c00 	.word	0x40020c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40021800 	.word	0x40021800
 8000e88:	40021c00 	.word	0x40021c00
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	40022400 	.word	0x40022400
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e29b      	b.n	800141a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8087 	beq.w	8000ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef0:	4b96      	ldr	r3, [pc, #600]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d00c      	beq.n	8000f16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efc:	4b93      	ldr	r3, [pc, #588]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 030c 	and.w	r3, r3, #12
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d112      	bne.n	8000f2e <HAL_RCC_OscConfig+0x62>
 8000f08:	4b90      	ldr	r3, [pc, #576]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f14:	d10b      	bne.n	8000f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f16:	4b8d      	ldr	r3, [pc, #564]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d06c      	beq.n	8000ffc <HAL_RCC_OscConfig+0x130>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d168      	bne.n	8000ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e275      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x7a>
 8000f38:	4b84      	ldr	r3, [pc, #528]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a83      	ldr	r2, [pc, #524]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e02e      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd8>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x9c>
 8000f4e:	4b7f      	ldr	r3, [pc, #508]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a7e      	ldr	r2, [pc, #504]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b7c      	ldr	r3, [pc, #496]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a7b      	ldr	r2, [pc, #492]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01d      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0xc0>
 8000f72:	4b76      	ldr	r3, [pc, #472]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a75      	ldr	r2, [pc, #468]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b73      	ldr	r3, [pc, #460]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a72      	ldr	r2, [pc, #456]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xd8>
 8000f8c:	4b6f      	ldr	r3, [pc, #444]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a6e      	ldr	r2, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b6c      	ldr	r3, [pc, #432]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a6b      	ldr	r2, [pc, #428]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fcdc 	bl	8000968 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fcd8 	bl	8000968 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e229      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b61      	ldr	r3, [pc, #388]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xe8>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcc8 	bl	8000968 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fcc4 	bl	8000968 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e215      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	4b57      	ldr	r3, [pc, #348]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x110>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d069      	beq.n	80010de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800100a:	4b50      	ldr	r3, [pc, #320]	; (800114c <HAL_RCC_OscConfig+0x280>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b08      	cmp	r3, #8
 8001020:	d11c      	bne.n	800105c <HAL_RCC_OscConfig+0x190>
 8001022:	4b4a      	ldr	r3, [pc, #296]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d116      	bne.n	800105c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <HAL_RCC_OscConfig+0x17a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1e9      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	493d      	ldr	r1, [pc, #244]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e040      	b.n	80010de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001064:	4b39      	ldr	r3, [pc, #228]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a38      	ldr	r2, [pc, #224]	; (800114c <HAL_RCC_OscConfig+0x280>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fc7a 	bl	8000968 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001078:	f7ff fc76 	bl	8000968 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1c7      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_RCC_OscConfig+0x280>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4929      	ldr	r1, [pc, #164]	; (800114c <HAL_RCC_OscConfig+0x280>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
 80010aa:	e018      	b.n	80010de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_RCC_OscConfig+0x280>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <HAL_RCC_OscConfig+0x280>)
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc56 	bl	8000968 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fc52 	bl	8000968 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1a3      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_RCC_OscConfig+0x280>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d038      	beq.n	800115c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d019      	beq.n	8001126 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_RCC_OscConfig+0x280>)
 80010f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_RCC_OscConfig+0x280>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fe:	f7ff fc33 	bl	8000968 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fc2f 	bl	8000968 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e180      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_RCC_OscConfig+0x280>)
 800111a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x23a>
 8001124:	e01a      	b.n	800115c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_RCC_OscConfig+0x280>)
 8001128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_RCC_OscConfig+0x280>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001132:	f7ff fc19 	bl	8000968 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113a:	f7ff fc15 	bl	8000968 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d903      	bls.n	8001150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e166      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
 800114c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4b92      	ldr	r3, [pc, #584]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ee      	bne.n	800113a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80a4 	beq.w	80012b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116a:	4b8c      	ldr	r3, [pc, #560]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b89      	ldr	r3, [pc, #548]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a88      	ldr	r2, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800118e:	2301      	movs	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001192:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <HAL_RCC_OscConfig+0x4d4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d118      	bne.n	80011d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800119e:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x4d4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x4d4>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fbdd 	bl	8000968 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b2:	f7ff fbd9 	bl	8000968 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b64      	cmp	r3, #100	; 0x64
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e12a      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c4:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x4d4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x31a>
 80011d8:	4b70      	ldr	r3, [pc, #448]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80011da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011dc:	4a6f      	ldr	r2, [pc, #444]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6713      	str	r3, [r2, #112]	; 0x70
 80011e4:	e02d      	b.n	8001242 <HAL_RCC_OscConfig+0x376>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x33c>
 80011ee:	4b6b      	ldr	r3, [pc, #428]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	4a6a      	ldr	r2, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	; 0x70
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a67      	ldr	r2, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	e01c      	b.n	8001242 <HAL_RCC_OscConfig+0x376>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x35e>
 8001210:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	4a61      	ldr	r2, [pc, #388]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6713      	str	r3, [r2, #112]	; 0x70
 800121c:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a5e      	ldr	r2, [pc, #376]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0x376>
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a5b      	ldr	r2, [pc, #364]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fb8d 	bl	8000968 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fb89 	bl	8000968 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0d8      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ee      	beq.n	8001252 <HAL_RCC_OscConfig+0x386>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fb77 	bl	8000968 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fb73 	bl	8000968 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0c2      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1ee      	bne.n	800127e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d105      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a3c      	ldr	r2, [pc, #240]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80ae 	beq.w	8001418 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d06d      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d14b      	bne.n	8001368 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80012d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb44 	bl	8000968 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fb40 	bl	8000968 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e091      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	019b      	lsls	r3, r3, #6
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	085b      	lsrs	r3, r3, #1
 800131a:	3b01      	subs	r3, #1
 800131c:	041b      	lsls	r3, r3, #16
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	061b      	lsls	r3, r3, #24
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	071b      	lsls	r3, r3, #28
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800133a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fb12 	bl	8000968 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fb0e 	bl	8000968 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e05f      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x47c>
 8001366:	e057      	b.n	8001418 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 800136e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff faf8 	bl	8000968 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff faf4 	bl	8000968 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e045      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138e:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_RCC_OscConfig+0x4d0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x4b0>
 800139a:	e03d      	b.n	8001418 <HAL_RCC_OscConfig+0x54c>
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_RCC_OscConfig+0x558>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d030      	beq.n	8001414 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d129      	bne.n	8001414 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d122      	bne.n	8001414 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013d4:	4013      	ands	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013dc:	4293      	cmp	r3, r2
 80013de:	d119      	bne.n	8001414 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10f      	bne.n	8001414 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0d0      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d910      	bls.n	8001470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 020f 	bic.w	r2, r3, #15
 8001456:	4965      	ldr	r1, [pc, #404]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d040      	beq.n	800154c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d115      	bne.n	800150a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e073      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e06b      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f023 0203 	bic.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	4313      	orrs	r3, r2
 800151a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800151c:	f7ff fa24 	bl	8000968 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff fa20 	bl	8000968 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e053      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 020c 	and.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	429a      	cmp	r2, r3
 800154a:	d1eb      	bne.n	8001524 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d210      	bcs.n	800157c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 020f 	bic.w	r2, r3, #15
 8001562:	4922      	ldr	r1, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4601      	mov	r1, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x1cc>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	fa21 f303 	lsr.w	r3, r1, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1d0>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1d4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f8ee 	bl	80007bc <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	0800496c 	.word	0x0800496c
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d007      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x32>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d008      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x38>
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80b4 	bne.w	8001794 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800162e:	60bb      	str	r3, [r7, #8]
      break;
 8001630:	e0b3      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001632:	4b5d      	ldr	r3, [pc, #372]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001634:	60bb      	str	r3, [r7, #8]
      break;
 8001636:	e0b0      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d04a      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	ea03 0501 	and.w	r5, r3, r1
 8001664:	ea04 0602 	and.w	r6, r4, r2
 8001668:	4629      	mov	r1, r5
 800166a:	4632      	mov	r2, r6
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f04f 0400 	mov.w	r4, #0
 8001674:	0154      	lsls	r4, r2, #5
 8001676:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800167a:	014b      	lsls	r3, r1, #5
 800167c:	4619      	mov	r1, r3
 800167e:	4622      	mov	r2, r4
 8001680:	1b49      	subs	r1, r1, r5
 8001682:	eb62 0206 	sbc.w	r2, r2, r6
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f04f 0400 	mov.w	r4, #0
 800168e:	0194      	lsls	r4, r2, #6
 8001690:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001694:	018b      	lsls	r3, r1, #6
 8001696:	1a5b      	subs	r3, r3, r1
 8001698:	eb64 0402 	sbc.w	r4, r4, r2
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	00e2      	lsls	r2, r4, #3
 80016a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016aa:	00d9      	lsls	r1, r3, #3
 80016ac:	460b      	mov	r3, r1
 80016ae:	4614      	mov	r4, r2
 80016b0:	195b      	adds	r3, r3, r5
 80016b2:	eb44 0406 	adc.w	r4, r4, r6
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	02a2      	lsls	r2, r4, #10
 80016c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016c4:	0299      	lsls	r1, r3, #10
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	4621      	mov	r1, r4
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f04f 0400 	mov.w	r4, #0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7fe fdb2 	bl	8000240 <__aeabi_uldivmod>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e049      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	f04f 0400 	mov.w	r4, #0
 80016ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	ea03 0501 	and.w	r5, r3, r1
 80016fa:	ea04 0602 	and.w	r6, r4, r2
 80016fe:	4629      	mov	r1, r5
 8001700:	4632      	mov	r2, r6
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	f04f 0400 	mov.w	r4, #0
 800170a:	0154      	lsls	r4, r2, #5
 800170c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001710:	014b      	lsls	r3, r1, #5
 8001712:	4619      	mov	r1, r3
 8001714:	4622      	mov	r2, r4
 8001716:	1b49      	subs	r1, r1, r5
 8001718:	eb62 0206 	sbc.w	r2, r2, r6
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f04f 0400 	mov.w	r4, #0
 8001724:	0194      	lsls	r4, r2, #6
 8001726:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800172a:	018b      	lsls	r3, r1, #6
 800172c:	1a5b      	subs	r3, r3, r1
 800172e:	eb64 0402 	sbc.w	r4, r4, r2
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	00e2      	lsls	r2, r4, #3
 800173c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001740:	00d9      	lsls	r1, r3, #3
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	195b      	adds	r3, r3, r5
 8001748:	eb44 0406 	adc.w	r4, r4, r6
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	02a2      	lsls	r2, r4, #10
 8001756:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800175a:	0299      	lsls	r1, r3, #10
 800175c:	460b      	mov	r3, r1
 800175e:	4614      	mov	r4, r2
 8001760:	4618      	mov	r0, r3
 8001762:	4621      	mov	r1, r4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f04f 0400 	mov.w	r4, #0
 800176a:	461a      	mov	r2, r3
 800176c:	4623      	mov	r3, r4
 800176e:	f7fe fd67 	bl	8000240 <__aeabi_uldivmod>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	60bb      	str	r3, [r7, #8]
      break;
 8001792:	e002      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001796:	60bb      	str	r3, [r7, #8]
      break;
 8001798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179a:	68bb      	ldr	r3, [r7, #8]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400

080017ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c8:	f7ff fff0 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017cc:	4601      	mov	r1, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	0b5b      	lsrs	r3, r3, #13
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	0800497c 	.word	0x0800497c

080017ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	220f      	movs	r2, #15
 80017fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_RCC_GetClockConfig+0x5c>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_RCC_GetClockConfig+0x5c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_RCC_GetClockConfig+0x5c>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_GetClockConfig+0x5c>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_RCC_GetClockConfig+0x60>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 020f 	and.w	r2, r3, #15
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	601a      	str	r2, [r3, #0]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40023c00 	.word	0x40023c00

08001850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e01d      	b.n	800189e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f815 	bl	80018a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f000 f986 	bl	8001ba0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_Base_Start_IT+0x50>)
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d00b      	beq.n	80018fe <HAL_TIM_Base_Start_IT+0x42>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d007      	beq.n	80018fe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	00010007 	.word	0x00010007

08001910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d122      	bne.n	800196c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d11b      	bne.n	800196c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0202 	mvn.w	r2, #2
 800193c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f905 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001958:	e005      	b.n	8001966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8f7 	bl	8001b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f908 	bl	8001b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b04      	cmp	r3, #4
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b04      	cmp	r3, #4
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0204 	mvn.w	r2, #4
 8001990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8db 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8cd 	bl	8001b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8de 	bl	8001b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0208 	mvn.w	r2, #8
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2204      	movs	r2, #4
 80019ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f8b1 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8a3 	bl	8001b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f8b4 	bl	8001b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0210 	mvn.w	r2, #16
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f887 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f879 	bl	8001b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f88a 	bl	8001b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10e      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0201 	mvn.w	r2, #1
 8001a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fe56 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b80      	cmp	r3, #128	; 0x80
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	d107      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f91a 	bl	8001cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ace:	d10e      	bne.n	8001aee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b80      	cmp	r3, #128	; 0x80
 8001adc:	d107      	bne.n	8001aee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f90d 	bl	8001d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af8:	2b40      	cmp	r3, #64	; 0x40
 8001afa:	d10e      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d107      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f838 	bl	8001b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d10e      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d107      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0220 	mvn.w	r2, #32
 8001b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8cd 	bl	8001ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a40      	ldr	r2, [pc, #256]	; (8001cb4 <TIM_Base_SetConfig+0x114>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <TIM_Base_SetConfig+0x40>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbe:	d00f      	beq.n	8001be0 <TIM_Base_SetConfig+0x40>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <TIM_Base_SetConfig+0x118>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00b      	beq.n	8001be0 <TIM_Base_SetConfig+0x40>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <TIM_Base_SetConfig+0x11c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <TIM_Base_SetConfig+0x40>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <TIM_Base_SetConfig+0x120>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <TIM_Base_SetConfig+0x40>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <TIM_Base_SetConfig+0x124>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d108      	bne.n	8001bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <TIM_Base_SetConfig+0x114>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d027      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <TIM_Base_SetConfig+0x118>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d023      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <TIM_Base_SetConfig+0x11c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <TIM_Base_SetConfig+0x120>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01b      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <TIM_Base_SetConfig+0x124>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d017      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <TIM_Base_SetConfig+0x128>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <TIM_Base_SetConfig+0x12c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00f      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <TIM_Base_SetConfig+0x130>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00b      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <TIM_Base_SetConfig+0x134>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <TIM_Base_SetConfig+0x138>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d003      	beq.n	8001c52 <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <TIM_Base_SetConfig+0x13c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d108      	bne.n	8001c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <TIM_Base_SetConfig+0x114>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <TIM_Base_SetConfig+0xf8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <TIM_Base_SetConfig+0x124>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d103      	bne.n	8001ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	615a      	str	r2, [r3, #20]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800
 8001cc0:	40000c00 	.word	0x40000c00
 8001cc4:	40010400 	.word	0x40010400
 8001cc8:	40014000 	.word	0x40014000
 8001ccc:	40014400 	.word	0x40014400
 8001cd0:	40014800 	.word	0x40014800
 8001cd4:	40001800 	.word	0x40001800
 8001cd8:	40001c00 	.word	0x40001c00
 8001cdc:	40002000 	.word	0x40002000

08001ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d32:	f3ef 8305 	mrs	r3, IPSR
 8001d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d42:	607b      	str	r3, [r7, #4]
  return(result);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8001d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <osKernelInitialize+0x3a>
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <osKernelInitialize+0x64>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d103      	bne.n	8001d66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001d5e:	f06f 0305 	mvn.w	r3, #5
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e00c      	b.n	8001d80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <osKernelInitialize+0x64>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <osKernelInitialize+0x64>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e002      	b.n	8001d80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	2000002c 	.word	0x2000002c

08001d94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d9a:	f3ef 8305 	mrs	r3, IPSR
 8001d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001da0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10f      	bne.n	8001dc6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001da6:	f3ef 8310 	mrs	r3, PRIMASK
 8001daa:	607b      	str	r3, [r7, #4]
  return(result);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001db2:	f3ef 8311 	mrs	r3, BASEPRI
 8001db6:	603b      	str	r3, [r7, #0]
  return(result);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <osKernelStart+0x3a>
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <osKernelStart+0x68>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d103      	bne.n	8001dce <osKernelStart+0x3a>
    stat = osErrorISR;
 8001dc6:	f06f 0305 	mvn.w	r3, #5
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e010      	b.n	8001df0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <osKernelStart+0x68>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d109      	bne.n	8001dea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001dd6:	f7ff ffa1 	bl	8001d1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <osKernelStart+0x68>)
 8001ddc:	2202      	movs	r2, #2
 8001dde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001de0:	f001 f89c 	bl	8002f1c <vTaskStartScheduler>
      stat = osOK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e002      	b.n	8001df0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001df0:	68fb      	ldr	r3, [r7, #12]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000002c 	.word	0x2000002c

08001e00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b090      	sub	sp, #64	; 0x40
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e10:	f3ef 8305 	mrs	r3, IPSR
 8001e14:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 808f 	bne.w	8001f3c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e22:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8001e2e:	617b      	str	r3, [r7, #20]
  return(result);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <osThreadNew+0x3e>
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <osThreadNew+0x148>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d07e      	beq.n	8001f3c <osThreadNew+0x13c>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d07b      	beq.n	8001f3c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001e48:	2318      	movs	r3, #24
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d045      	beq.n	8001ee8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <osThreadNew+0x6a>
        name = attr->name;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <osThreadNew+0x90>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	2b38      	cmp	r3, #56	; 0x38
 8001e82:	d805      	bhi.n	8001e90 <osThreadNew+0x90>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <osThreadNew+0x94>
        return (NULL);
 8001e90:	2300      	movs	r3, #0
 8001e92:	e054      	b.n	8001f3e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <osThreadNew+0xca>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b5b      	cmp	r3, #91	; 0x5b
 8001eb2:	d90a      	bls.n	8001eca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <osThreadNew+0xca>
        mem = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	e010      	b.n	8001eec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <osThreadNew+0xec>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <osThreadNew+0xec>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <osThreadNew+0xec>
          mem = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	e001      	b.n	8001eec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d110      	bne.n	8001f14 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001efa:	9202      	str	r2, [sp, #8]
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fe2b 	bl	8002b64 <xTaskCreateStatic>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e013      	b.n	8001f3c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d110      	bne.n	8001f3c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fe79 	bl	8002c24 <xTaskCreate>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <osThreadNew+0x13c>
          hTask = NULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3730      	adds	r7, #48	; 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000002c 	.word	0x2000002c

08001f4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f54:	f3ef 8305 	mrs	r3, IPSR
 8001f58:	613b      	str	r3, [r7, #16]
  return(result);
 8001f5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f60:	f3ef 8310 	mrs	r3, PRIMASK
 8001f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8001f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <osDelay+0x3c>
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <osDelay+0x58>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d103      	bne.n	8001f88 <osDelay+0x3c>
    stat = osErrorISR;
 8001f80:	f06f 0305 	mvn.w	r3, #5
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e007      	b.n	8001f98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 ff8c 	bl	8002eb0 <vTaskDelay>
    }
  }

  return (stat);
 8001f98:	697b      	ldr	r3, [r7, #20]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000002c 	.word	0x2000002c

08001fa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <vApplicationGetIdleTaskMemory+0x30>)
 8001fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000030 	.word	0x20000030
 8001fd8:	2000008c 	.word	0x2000008c

08001fdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <vApplicationGetTimerTaskMemory+0x2c>)
 8001fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <vApplicationGetTimerTaskMemory+0x30>)
 8001ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	2000028c 	.word	0x2000028c
 800200c:	200002e8 	.word	0x200002e8

08002010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0208 	add.w	r2, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f103 0208 	add.w	r2, r3, #8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f103 0208 	add.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d103      	bne.n	80020d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e00c      	b.n	80020ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3308      	adds	r3, #8
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e002      	b.n	80020e0 <vListInsert+0x2e>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d2f6      	bcs.n	80020da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6892      	ldr	r2, [r2, #8]
 800213a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6852      	ldr	r2, [r2, #4]
 8002144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	d103      	bne.n	8002158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	b672      	cpsid	i
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	b662      	cpsie	i
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	e7fe      	b.n	80021a2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80021a4:	f002 f848 	bl	8004238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	441a      	add	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	3b01      	subs	r3, #1
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	441a      	add	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	22ff      	movs	r2, #255	; 0xff
 80021f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d114      	bne.n	8002224 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01a      	beq.n	8002238 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3310      	adds	r3, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f916 	bl	8003438 <xTaskRemoveFromEventList>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d012      	beq.n	8002238 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <xQueueGenericReset+0xd0>)
 8002214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	e009      	b.n	8002238 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3310      	adds	r3, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fef1 	bl	8002010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3324      	adds	r3, #36	; 0x24
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff feec 	bl	8002010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002238:	f002 f830 	bl	800429c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000ed04 	.word	0xe000ed04

0800224c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <xQueueGenericCreateStatic+0x2c>
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	b672      	cpsid	i
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	b662      	cpsie	i
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
 8002276:	e7fe      	b.n	8002276 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10b      	bne.n	8002296 <xQueueGenericCreateStatic+0x4a>
 800227e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002282:	b672      	cpsid	i
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	b662      	cpsie	i
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	e7fe      	b.n	8002294 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <xQueueGenericCreateStatic+0x56>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <xQueueGenericCreateStatic+0x5a>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <xQueueGenericCreateStatic+0x5c>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <xQueueGenericCreateStatic+0x78>
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	b672      	cpsid	i
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	b662      	cpsie	i
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	e7fe      	b.n	80022c2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <xQueueGenericCreateStatic+0x84>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <xQueueGenericCreateStatic+0x88>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <xQueueGenericCreateStatic+0x8a>
 80022d4:	2300      	movs	r3, #0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <xQueueGenericCreateStatic+0xa6>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	b672      	cpsid	i
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	b662      	cpsie	i
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022f2:	2350      	movs	r3, #80	; 0x50
 80022f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b50      	cmp	r3, #80	; 0x50
 80022fa:	d00b      	beq.n	8002314 <xQueueGenericCreateStatic+0xc8>
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	b672      	cpsid	i
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	b662      	cpsie	i
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	e7fe      	b.n	8002312 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002314:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002328:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f805 	bl	8002346 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800233e:	4618      	mov	r0, r3
 8002340:	3730      	adds	r7, #48	; 0x30
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e002      	b.n	8002368 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002374:	2101      	movs	r1, #1
 8002376:	69b8      	ldr	r0, [r7, #24]
 8002378:	f7ff fefe 	bl	8002178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <xQueueGenericSend+0x34>
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	b672      	cpsid	i
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	b662      	cpsie	i
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023be:	e7fe      	b.n	80023be <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <xQueueGenericSend+0x42>
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <xQueueGenericSend+0x46>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <xQueueGenericSend+0x48>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <xQueueGenericSend+0x64>
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	b672      	cpsid	i
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	b662      	cpsie	i
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	e7fe      	b.n	80023ee <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d103      	bne.n	80023fe <xQueueGenericSend+0x72>
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <xQueueGenericSend+0x76>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <xQueueGenericSend+0x78>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <xQueueGenericSend+0x94>
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	b672      	cpsid	i
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	b662      	cpsie	i
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	e7fe      	b.n	800241e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002420:	f001 f9c8 	bl	80037b4 <xTaskGetSchedulerState>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <xQueueGenericSend+0xa4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <xQueueGenericSend+0xa8>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <xQueueGenericSend+0xaa>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <xQueueGenericSend+0xc6>
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	b672      	cpsid	i
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	b662      	cpsie	i
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	e7fe      	b.n	8002450 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002452:	f001 fef1 	bl	8004238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <xQueueGenericSend+0xdc>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d129      	bne.n	80024bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800246e:	f000 fa0d 	bl	800288c <prvCopyDataToQueue>
 8002472:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	3324      	adds	r3, #36	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f000 ffd9 	bl	8003438 <xTaskRemoveFromEventList>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800248c:	4b3f      	ldr	r3, [pc, #252]	; (800258c <xQueueGenericSend+0x200>)
 800248e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	e00a      	b.n	80024b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <xQueueGenericSend+0x200>)
 80024a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024b4:	f001 fef2 	bl	800429c <vPortExitCritical>
				return pdPASS;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e063      	b.n	8002584 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024c2:	f001 feeb 	bl	800429c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e05c      	b.n	8002584 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 f813 	bl	8003500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024da:	2301      	movs	r3, #1
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024de:	f001 fedd 	bl	800429c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024e2:	f000 fd83 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024e6:	f001 fea7 	bl	8004238 <vPortEnterCritical>
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d103      	bne.n	8002500 <xQueueGenericSend+0x174>
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002506:	b25b      	sxtb	r3, r3
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d103      	bne.n	8002516 <xQueueGenericSend+0x18a>
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002516:	f001 fec1 	bl	800429c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800251a:	1d3a      	adds	r2, r7, #4
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f802 	bl	800352c <xTaskCheckForTimeOut>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d124      	bne.n	8002578 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800252e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002530:	f000 faa4 	bl	8002a7c <prvIsQueueFull>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d018      	beq.n	800256c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	3310      	adds	r3, #16
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 ff26 	bl	8003394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254a:	f000 fa2f 	bl	80029ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800254e:	f000 fd5b 	bl	8003008 <xTaskResumeAll>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f af7c 	bne.w	8002452 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <xQueueGenericSend+0x200>)
 800255c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	e772      	b.n	8002452 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800256c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256e:	f000 fa1d 	bl	80029ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002572:	f000 fd49 	bl	8003008 <xTaskResumeAll>
 8002576:	e76c      	b.n	8002452 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257a:	f000 fa17 	bl	80029ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800257e:	f000 fd43 	bl	8003008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002582:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002584:	4618      	mov	r0, r3
 8002586:	3738      	adds	r7, #56	; 0x38
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	e000ed04 	.word	0xe000ed04

08002590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <xQueueGenericSendFromISR+0x30>
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	b672      	cpsid	i
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	b662      	cpsie	i
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e7fe      	b.n	80025be <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <xQueueGenericSendFromISR+0x3e>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <xQueueGenericSendFromISR+0x42>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <xQueueGenericSendFromISR+0x44>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <xQueueGenericSendFromISR+0x60>
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	b672      	cpsid	i
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	b662      	cpsie	i
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	e7fe      	b.n	80025ee <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d103      	bne.n	80025fe <xQueueGenericSendFromISR+0x6e>
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <xQueueGenericSendFromISR+0x72>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <xQueueGenericSendFromISR+0x74>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <xQueueGenericSendFromISR+0x90>
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	b672      	cpsid	i
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	b662      	cpsie	i
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e7fe      	b.n	800261e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002620:	f001 feea 	bl	80043f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002624:	f3ef 8211 	mrs	r2, BASEPRI
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	b672      	cpsid	i
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	b662      	cpsie	i
 800263c:	61ba      	str	r2, [r7, #24]
 800263e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002640:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <xQueueGenericSendFromISR+0xc6>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d12c      	bne.n	80026b0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800265c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 f911 	bl	800288c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800266a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d112      	bne.n	800269a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d016      	beq.n	80026aa <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	3324      	adds	r3, #36	; 0x24
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fed9 	bl	8003438 <xTaskRemoveFromEventList>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800269a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800269e:	3301      	adds	r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	b25a      	sxtb	r2, r3
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026aa:	2301      	movs	r3, #1
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026ae:	e001      	b.n	80026b4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3738      	adds	r7, #56	; 0x38
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <xQueueReceive+0x32>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	b672      	cpsid	i
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	b662      	cpsie	i
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	e7fe      	b.n	80026f8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <xQueueReceive+0x40>
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <xQueueReceive+0x44>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <xQueueReceive+0x46>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <xQueueReceive+0x62>
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	b672      	cpsid	i
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	b662      	cpsie	i
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	e7fe      	b.n	8002728 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800272a:	f001 f843 	bl	80037b4 <xTaskGetSchedulerState>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <xQueueReceive+0x72>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <xQueueReceive+0x76>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <xQueueReceive+0x78>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <xQueueReceive+0x94>
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	b672      	cpsid	i
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	b662      	cpsie	i
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e7fe      	b.n	800275a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800275c:	f001 fd6c 	bl	8004238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01f      	beq.n	80027ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002770:	f000 f8f6 	bl	8002960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	3310      	adds	r3, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fe55 	bl	8003438 <xTaskRemoveFromEventList>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002794:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <xQueueReceive+0x1c0>)
 8002796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027a4:	f001 fd7a 	bl	800429c <vPortExitCritical>
				return pdPASS;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e069      	b.n	8002880 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027b2:	f001 fd73 	bl	800429c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e062      	b.n	8002880 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fe9b 	bl	8003500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ca:	2301      	movs	r3, #1
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027ce:	f001 fd65 	bl	800429c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027d2:	f000 fc0b 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027d6:	f001 fd2f 	bl	8004238 <vPortEnterCritical>
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d103      	bne.n	80027f0 <xQueueReceive+0x128>
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d103      	bne.n	8002806 <xQueueReceive+0x13e>
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002806:	f001 fd49 	bl	800429c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800280a:	1d3a      	adds	r2, r7, #4
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fe8a 	bl	800352c <xTaskCheckForTimeOut>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d123      	bne.n	8002866 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800281e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002820:	f000 f916 	bl	8002a50 <prvIsQueueEmpty>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	3324      	adds	r3, #36	; 0x24
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fdae 	bl	8003394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283a:	f000 f8b7 	bl	80029ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800283e:	f000 fbe3 	bl	8003008 <xTaskResumeAll>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d189      	bne.n	800275c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <xQueueReceive+0x1c0>)
 800284a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	e780      	b.n	800275c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800285a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285c:	f000 f8a6 	bl	80029ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002860:	f000 fbd2 	bl	8003008 <xTaskResumeAll>
 8002864:	e77a      	b.n	800275c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002868:	f000 f8a0 	bl	80029ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800286c:	f000 fbcc 	bl	8003008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002872:	f000 f8ed 	bl	8002a50 <prvIsQueueEmpty>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f43f af6f 	beq.w	800275c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800287e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002880:	4618      	mov	r0, r3
 8002882:	3730      	adds	r7, #48	; 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d14d      	bne.n	800294e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff9a 	bl	80037f0 <xTaskPriorityDisinherit>
 80028bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e043      	b.n	800294e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d119      	bne.n	8002900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6858      	ldr	r0, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	461a      	mov	r2, r3
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	f001 ffd4 	bl	8004884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	441a      	add	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d32b      	bcc.n	800294e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	e026      	b.n	800294e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68d8      	ldr	r0, [r3, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	461a      	mov	r2, r3
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	f001 ffba 	bl	8004884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	425b      	negs	r3, r3
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d207      	bcs.n	800293c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	425b      	negs	r3, r3
 8002936:	441a      	add	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d105      	bne.n	800294e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	3b01      	subs	r3, #1
 800294c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002956:	697b      	ldr	r3, [r7, #20]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	441a      	add	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d303      	bcc.n	8002994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	461a      	mov	r2, r3
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	f001 ff70 	bl	8004884 <memcpy>
	}
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029b4:	f001 fc40 	bl	8004238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c0:	e011      	b.n	80029e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3324      	adds	r3, #36	; 0x24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fd32 	bl	8003438 <xTaskRemoveFromEventList>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029da:	f000 fe0b 	bl	80035f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	dce9      	bgt.n	80029c2 <prvUnlockQueue+0x16>
 80029ee:	e000      	b.n	80029f2 <prvUnlockQueue+0x46>
					break;
 80029f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029fa:	f001 fc4f 	bl	800429c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029fe:	f001 fc1b 	bl	8004238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a0a:	e011      	b.n	8002a30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3310      	adds	r3, #16
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fd0d 	bl	8003438 <xTaskRemoveFromEventList>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a24:	f000 fde6 	bl	80035f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dce9      	bgt.n	8002a0c <prvUnlockQueue+0x60>
 8002a38:	e000      	b.n	8002a3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	22ff      	movs	r2, #255	; 0xff
 8002a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a44:	f001 fc2a 	bl	800429c <vPortExitCritical>
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a58:	f001 fbee 	bl	8004238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e001      	b.n	8002a6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a6e:	f001 fc15 	bl	800429c <vPortExitCritical>

	return xReturn;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a84:	f001 fbd8 	bl	8004238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d102      	bne.n	8002a9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e001      	b.n	8002a9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a9e:	f001 fbfd 	bl	800429c <vPortExitCritical>

	return xReturn;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e014      	b.n	8002ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <vQueueAddToRegistry+0x4c>)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ac8:	490b      	ldr	r1, [pc, #44]	; (8002af8 <vQueueAddToRegistry+0x4c>)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <vQueueAddToRegistry+0x4c>)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ade:	e005      	b.n	8002aec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d9e7      	bls.n	8002abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20004984 	.word	0x20004984

08002afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b0c:	f001 fb94 	bl	8004238 <vPortEnterCritical>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d103      	bne.n	8002b26 <vQueueWaitForMessageRestricted+0x2a>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d103      	bne.n	8002b3c <vQueueWaitForMessageRestricted+0x40>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3c:	f001 fbae 	bl	800429c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3324      	adds	r3, #36	; 0x24
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fc45 	bl	80033e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff28 	bl	80029ac <prvUnlockQueue>
	}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <xTaskCreateStatic+0x2c>
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	b672      	cpsid	i
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	b662      	cpsie	i
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	e7fe      	b.n	8002b8e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <xTaskCreateStatic+0x4a>
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	b672      	cpsid	i
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	b662      	cpsie	i
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	e7fe      	b.n	8002bac <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bae:	235c      	movs	r3, #92	; 0x5c
 8002bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8002bb6:	d00b      	beq.n	8002bd0 <xTaskCreateStatic+0x6c>
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	b672      	cpsid	i
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	b662      	cpsie	i
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e7fe      	b.n	8002bce <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01e      	beq.n	8002c16 <xTaskCreateStatic+0xb2>
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01b      	beq.n	8002c16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9303      	str	r3, [sp, #12]
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	9302      	str	r3, [sp, #8]
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f850 	bl	8002cae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c10:	f000 f8de 	bl	8002dd0 <prvAddNewTaskToReadyList>
 8002c14:	e001      	b.n	8002c1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c1a:	697b      	ldr	r3, [r7, #20]
	}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 fc1f 	bl	800447c <pvPortMalloc>
 8002c3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c46:	205c      	movs	r0, #92	; 0x5c
 8002c48:	f001 fc18 	bl	800447c <pvPortMalloc>
 8002c4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
 8002c5a:	e005      	b.n	8002c68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c5c:	6978      	ldr	r0, [r7, #20]
 8002c5e:	f001 fcd5 	bl	800460c <vPortFree>
 8002c62:	e001      	b.n	8002c68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d017      	beq.n	8002c9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9303      	str	r3, [sp, #12]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	9302      	str	r3, [sp, #8]
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f80e 	bl	8002cae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c92:	69f8      	ldr	r0, [r7, #28]
 8002c94:	f000 f89c 	bl	8002dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e002      	b.n	8002ca4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
	}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b088      	sub	sp, #32
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	21a5      	movs	r1, #165	; 0xa5
 8002cc8:	f001 fde7 	bl	800489a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002cd6:	440b      	add	r3, r1
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f023 0307 	bic.w	r3, r3, #7
 8002ce4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <prvInitialiseNewTask+0x5a>
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	b672      	cpsid	i
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	b662      	cpsie	i
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e7fe      	b.n	8002d06 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01f      	beq.n	8002d4e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e012      	b.n	8002d3a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	7819      	ldrb	r1, [r3, #0]
 8002d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	3334      	adds	r3, #52	; 0x34
 8002d24:	460a      	mov	r2, r1
 8002d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d006      	beq.n	8002d42 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	3301      	adds	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d9e9      	bls.n	8002d14 <prvInitialiseNewTask+0x66>
 8002d40:	e000      	b.n	8002d44 <prvInitialiseNewTask+0x96>
			{
				break;
 8002d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d4c:	e003      	b.n	8002d56 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	2b37      	cmp	r3, #55	; 0x37
 8002d5a:	d901      	bls.n	8002d60 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d5c:	2337      	movs	r3, #55	; 0x37
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	2200      	movs	r2, #0
 8002d70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	3304      	adds	r3, #4
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f96a 	bl	8002050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	3318      	adds	r3, #24
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f965 	bl	8002050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	2200      	movs	r2, #0
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	69b8      	ldr	r0, [r7, #24]
 8002db0:	f001 f936 	bl	8004020 <pxPortInitialiseStack>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dd8:	f001 fa2e 	bl	8004238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <prvAddNewTaskToReadyList+0xc4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <prvAddNewTaskToReadyList+0xc4>)
 8002de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <prvAddNewTaskToReadyList+0xc8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dee:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <prvAddNewTaskToReadyList+0xc8>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <prvAddNewTaskToReadyList+0xc4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d110      	bne.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dfc:	f000 fc1e 	bl	800363c <prvInitialiseTaskLists>
 8002e00:	e00d      	b.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <prvAddNewTaskToReadyList+0xcc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <prvAddNewTaskToReadyList+0xc8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d802      	bhi.n	8002e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e18:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <prvAddNewTaskToReadyList+0xc8>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <prvAddNewTaskToReadyList+0xd0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <prvAddNewTaskToReadyList+0xd0>)
 8002e26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <prvAddNewTaskToReadyList+0xd0>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <prvAddNewTaskToReadyList+0xd4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d903      	bls.n	8002e44 <prvAddNewTaskToReadyList+0x74>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <prvAddNewTaskToReadyList+0xd4>)
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <prvAddNewTaskToReadyList+0xd8>)
 8002e52:	441a      	add	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7ff f905 	bl	800206a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e60:	f001 fa1c 	bl	800429c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <prvAddNewTaskToReadyList+0xcc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <prvAddNewTaskToReadyList+0xc8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d207      	bcs.n	8002e8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <prvAddNewTaskToReadyList+0xdc>)
 8002e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000bbc 	.word	0x20000bbc
 8002e98:	200006e8 	.word	0x200006e8
 8002e9c:	20000bc8 	.word	0x20000bc8
 8002ea0:	20000bd8 	.word	0x20000bd8
 8002ea4:	20000bc4 	.word	0x20000bc4
 8002ea8:	200006ec 	.word	0x200006ec
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <vTaskDelay+0x64>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <vTaskDelay+0x32>
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	b672      	cpsid	i
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	b662      	cpsie	i
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	e7fe      	b.n	8002ee0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8002ee2:	f000 f883 	bl	8002fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fcf1 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002eee:	f000 f88b 	bl	8003008 <xTaskResumeAll>
 8002ef2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <vTaskDelay+0x68>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000be4 	.word	0x20000be4
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f2a:	463a      	mov	r2, r7
 8002f2c:	1d39      	adds	r1, r7, #4
 8002f2e:	f107 0308 	add.w	r3, r7, #8
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f838 	bl	8001fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2300      	movs	r3, #0
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	4922      	ldr	r1, [pc, #136]	; (8002fd4 <vTaskStartScheduler+0xb8>)
 8002f4c:	4822      	ldr	r0, [pc, #136]	; (8002fd8 <vTaskStartScheduler+0xbc>)
 8002f4e:	f7ff fe09 	bl	8002b64 <xTaskCreateStatic>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <vTaskStartScheduler+0xc0>)
 8002f56:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f58:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <vTaskStartScheduler+0xc0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f60:	2301      	movs	r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e001      	b.n	8002f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d102      	bne.n	8002f76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f70:	f000 fd02 	bl	8003978 <xTimerCreateTimerTask>
 8002f74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d117      	bne.n	8002fac <vTaskStartScheduler+0x90>
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	b672      	cpsid	i
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	b662      	cpsie	i
 8002f90:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <vTaskStartScheduler+0xc4>)
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <vTaskStartScheduler+0xc8>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <vTaskStartScheduler+0xcc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fa6:	f001 f8cb 	bl	8004140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002faa:	e00f      	b.n	8002fcc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d10b      	bne.n	8002fcc <vTaskStartScheduler+0xb0>
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	b672      	cpsid	i
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	b662      	cpsie	i
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e7fe      	b.n	8002fca <vTaskStartScheduler+0xae>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	080048e8 	.word	0x080048e8
 8002fd8:	0800360d 	.word	0x0800360d
 8002fdc:	20000be0 	.word	0x20000be0
 8002fe0:	20000bdc 	.word	0x20000bdc
 8002fe4:	20000bc8 	.word	0x20000bc8
 8002fe8:	20000bc0 	.word	0x20000bc0

08002fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a03      	ldr	r2, [pc, #12]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20000be4 	.word	0x20000be4

08003008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <xTaskResumeAll+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <xTaskResumeAll+0x2e>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	b672      	cpsid	i
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	b662      	cpsie	i
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	e7fe      	b.n	8003034 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003036:	f001 f8ff 	bl	8004238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <xTaskResumeAll+0x118>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3b01      	subs	r3, #1
 8003040:	4a37      	ldr	r2, [pc, #220]	; (8003120 <xTaskResumeAll+0x118>)
 8003042:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <xTaskResumeAll+0x118>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d162      	bne.n	8003112 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <xTaskResumeAll+0x11c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d05e      	beq.n	8003112 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003054:	e02f      	b.n	80030b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <xTaskResumeAll+0x120>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3318      	adds	r3, #24
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f85e 	bl	8002124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3304      	adds	r3, #4
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f859 	bl	8002124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <xTaskResumeAll+0x124>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d903      	bls.n	8003086 <xTaskResumeAll+0x7e>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4a2a      	ldr	r2, [pc, #168]	; (800312c <xTaskResumeAll+0x124>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <xTaskResumeAll+0x128>)
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7fe ffe4 	bl	800206a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <xTaskResumeAll+0x12c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <xTaskResumeAll+0x130>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <xTaskResumeAll+0x120>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cb      	bne.n	8003056 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030c4:	f000 fb56 	bl	8003774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <xTaskResumeAll+0x134>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030d4:	f000 f846 	bl	8003164 <xTaskIncrementTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <xTaskResumeAll+0x130>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f1      	bne.n	80030d4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <xTaskResumeAll+0x134>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <xTaskResumeAll+0x130>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030fe:	2301      	movs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <xTaskResumeAll+0x138>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f001 f8c3 	bl	800429c <vPortExitCritical>

	return xAlreadyYielded;
 8003116:	68bb      	ldr	r3, [r7, #8]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000be4 	.word	0x20000be4
 8003124:	20000bbc 	.word	0x20000bbc
 8003128:	20000b7c 	.word	0x20000b7c
 800312c:	20000bc4 	.word	0x20000bc4
 8003130:	200006ec 	.word	0x200006ec
 8003134:	200006e8 	.word	0x200006e8
 8003138:	20000bd0 	.word	0x20000bd0
 800313c:	20000bcc 	.word	0x20000bcc
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <xTaskGetTickCount+0x1c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003150:	687b      	ldr	r3, [r7, #4]
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000bc0 	.word	0x20000bc0

08003164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316e:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <xTaskIncrementTick+0x148>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 808a 	bne.w	800328c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003178:	4b4d      	ldr	r3, [pc, #308]	; (80032b0 <xTaskIncrementTick+0x14c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003180:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <xTaskIncrementTick+0x14c>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d121      	bne.n	80031d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800318c:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <xTaskIncrementTick+0x150>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <xTaskIncrementTick+0x4a>
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	b672      	cpsid	i
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	b662      	cpsie	i
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	e7fe      	b.n	80031ac <xTaskIncrementTick+0x48>
 80031ae:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <xTaskIncrementTick+0x154>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3e      	ldr	r2, [pc, #248]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <xTaskIncrementTick+0x154>)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <xTaskIncrementTick+0x158>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <xTaskIncrementTick+0x158>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	f000 fad2 	bl	8003774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031d0:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <xTaskIncrementTick+0x15c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d349      	bcc.n	800326e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031da:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <xTaskIncrementTick+0x15c>)
 80031e6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ea:	601a      	str	r2, [r3, #0]
					break;
 80031ec:	e03f      	b.n	800326e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	429a      	cmp	r2, r3
 8003204:	d203      	bcs.n	800320e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003206:	4a2e      	ldr	r2, [pc, #184]	; (80032c0 <xTaskIncrementTick+0x15c>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800320c:	e02f      	b.n	800326e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3304      	adds	r3, #4
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe ff86 	bl	8002124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3318      	adds	r3, #24
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe ff7d 	bl	8002124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <xTaskIncrementTick+0x160>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d903      	bls.n	800323e <xTaskIncrementTick+0xda>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <xTaskIncrementTick+0x160>)
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <xTaskIncrementTick+0x164>)
 800324c:	441a      	add	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7fe ff08 	bl	800206a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <xTaskIncrementTick+0x168>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d3b8      	bcc.n	80031da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003268:	2301      	movs	r3, #1
 800326a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326c:	e7b5      	b.n	80031da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <xTaskIncrementTick+0x168>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4914      	ldr	r1, [pc, #80]	; (80032c8 <xTaskIncrementTick+0x164>)
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d907      	bls.n	8003296 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e004      	b.n	8003296 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <xTaskIncrementTick+0x16c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <xTaskIncrementTick+0x16c>)
 8003294:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <xTaskIncrementTick+0x170>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000be4 	.word	0x20000be4
 80032b0:	20000bc0 	.word	0x20000bc0
 80032b4:	20000b74 	.word	0x20000b74
 80032b8:	20000b78 	.word	0x20000b78
 80032bc:	20000bd4 	.word	0x20000bd4
 80032c0:	20000bdc 	.word	0x20000bdc
 80032c4:	20000bc4 	.word	0x20000bc4
 80032c8:	200006ec 	.word	0x200006ec
 80032cc:	200006e8 	.word	0x200006e8
 80032d0:	20000bcc 	.word	0x20000bcc
 80032d4:	20000bd0 	.word	0x20000bd0

080032d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <vTaskSwitchContext+0xa8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <vTaskSwitchContext+0xac>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032ec:	e042      	b.n	8003374 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80032ee:	4b25      	ldr	r3, [pc, #148]	; (8003384 <vTaskSwitchContext+0xac>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <vTaskSwitchContext+0xb0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e011      	b.n	8003320 <vTaskSwitchContext+0x48>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <vTaskSwitchContext+0x42>
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	b672      	cpsid	i
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	b662      	cpsie	i
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	e7fe      	b.n	8003318 <vTaskSwitchContext+0x40>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	491a      	ldr	r1, [pc, #104]	; (800338c <vTaskSwitchContext+0xb4>)
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0e3      	beq.n	80032fc <vTaskSwitchContext+0x24>
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4a13      	ldr	r2, [pc, #76]	; (800338c <vTaskSwitchContext+0xb4>)
 8003340:	4413      	add	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3308      	adds	r3, #8
 8003356:	429a      	cmp	r2, r3
 8003358:	d104      	bne.n	8003364 <vTaskSwitchContext+0x8c>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <vTaskSwitchContext+0xb8>)
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4a06      	ldr	r2, [pc, #24]	; (8003388 <vTaskSwitchContext+0xb0>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000be4 	.word	0x20000be4
 8003384:	20000bd0 	.word	0x20000bd0
 8003388:	20000bc4 	.word	0x20000bc4
 800338c:	200006ec 	.word	0x200006ec
 8003390:	200006e8 	.word	0x200006e8

08003394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <vTaskPlaceOnEventList+0x28>
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	b672      	cpsid	i
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	b662      	cpsie	i
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e7fe      	b.n	80033ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <vTaskPlaceOnEventList+0x48>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3318      	adds	r3, #24
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fe fe74 	bl	80020b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033ca:	2101      	movs	r1, #1
 80033cc:	6838      	ldr	r0, [r7, #0]
 80033ce:	f000 fa7f 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200006e8 	.word	0x200006e8

080033e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <vTaskPlaceOnEventListRestricted+0x2a>
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	b672      	cpsid	i
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	b662      	cpsie	i
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e7fe      	b.n	8003408 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <vTaskPlaceOnEventListRestricted+0x54>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3318      	adds	r3, #24
 8003410:	4619      	mov	r1, r3
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7fe fe29 	bl	800206a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68b8      	ldr	r0, [r7, #8]
 8003428:	f000 fa52 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
	}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200006e8 	.word	0x200006e8

08003438 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <xTaskRemoveFromEventList+0x2e>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	b672      	cpsid	i
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	b662      	cpsie	i
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e7fe      	b.n	8003464 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3318      	adds	r3, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fe5a 	bl	8002124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <xTaskRemoveFromEventList+0xb0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11d      	bne.n	80034b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	3304      	adds	r3, #4
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fe51 	bl	8002124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <xTaskRemoveFromEventList+0xb4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d903      	bls.n	8003496 <xTaskRemoveFromEventList+0x5e>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <xTaskRemoveFromEventList+0xb4>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <xTaskRemoveFromEventList+0xb8>)
 80034a4:	441a      	add	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7fe fddc 	bl	800206a <vListInsertEnd>
 80034b2:	e005      	b.n	80034c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3318      	adds	r3, #24
 80034b8:	4619      	mov	r1, r3
 80034ba:	480e      	ldr	r0, [pc, #56]	; (80034f4 <xTaskRemoveFromEventList+0xbc>)
 80034bc:	f7fe fdd5 	bl	800206a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <xTaskRemoveFromEventList+0xc0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d905      	bls.n	80034da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034ce:	2301      	movs	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <xTaskRemoveFromEventList+0xc4>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e001      	b.n	80034de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80034de:	697b      	ldr	r3, [r7, #20]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000be4 	.word	0x20000be4
 80034ec:	20000bc4 	.word	0x20000bc4
 80034f0:	200006ec 	.word	0x200006ec
 80034f4:	20000b7c 	.word	0x20000b7c
 80034f8:	200006e8 	.word	0x200006e8
 80034fc:	20000bd0 	.word	0x20000bd0

08003500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <vTaskInternalSetTimeOutState+0x24>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <vTaskInternalSetTimeOutState+0x28>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	20000bd4 	.word	0x20000bd4
 8003528:	20000bc0 	.word	0x20000bc0

0800352c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <xTaskCheckForTimeOut+0x28>
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	b672      	cpsid	i
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	b662      	cpsie	i
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e7fe      	b.n	8003552 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <xTaskCheckForTimeOut+0x46>
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	b672      	cpsid	i
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	b662      	cpsie	i
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e7fe      	b.n	8003570 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8003572:	f000 fe61 	bl	8004238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <xTaskCheckForTimeOut+0xc0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d102      	bne.n	8003596 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e023      	b.n	80035de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <xTaskCheckForTimeOut+0xc4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d007      	beq.n	80035b2 <xTaskCheckForTimeOut+0x86>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e015      	b.n	80035de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d20b      	bcs.n	80035d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	1ad2      	subs	r2, r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff99 	bl	8003500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e004      	b.n	80035de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035da:	2301      	movs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035de:	f000 fe5d 	bl	800429c <vPortExitCritical>

	return xReturn;
 80035e2:	69fb      	ldr	r3, [r7, #28]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000bc0 	.word	0x20000bc0
 80035f0:	20000bd4 	.word	0x20000bd4

080035f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <vTaskMissedYield+0x14>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000bd0 	.word	0x20000bd0

0800360c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003614:	f000 f852 	bl	80036bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <prvIdleTask+0x28>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d9f9      	bls.n	8003614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <prvIdleTask+0x2c>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003630:	e7f0      	b.n	8003614 <prvIdleTask+0x8>
 8003632:	bf00      	nop
 8003634:	200006ec 	.word	0x200006ec
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	e00c      	b.n	8003662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <prvInitialiseTaskLists+0x60>)
 8003654:	4413      	add	r3, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fcda 	bl	8002010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3301      	adds	r3, #1
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b37      	cmp	r3, #55	; 0x37
 8003666:	d9ef      	bls.n	8003648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <prvInitialiseTaskLists+0x64>)
 800366a:	f7fe fcd1 	bl	8002010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800366e:	480d      	ldr	r0, [pc, #52]	; (80036a4 <prvInitialiseTaskLists+0x68>)
 8003670:	f7fe fcce 	bl	8002010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003674:	480c      	ldr	r0, [pc, #48]	; (80036a8 <prvInitialiseTaskLists+0x6c>)
 8003676:	f7fe fccb 	bl	8002010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800367a:	480c      	ldr	r0, [pc, #48]	; (80036ac <prvInitialiseTaskLists+0x70>)
 800367c:	f7fe fcc8 	bl	8002010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003680:	480b      	ldr	r0, [pc, #44]	; (80036b0 <prvInitialiseTaskLists+0x74>)
 8003682:	f7fe fcc5 	bl	8002010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <prvInitialiseTaskLists+0x78>)
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <prvInitialiseTaskLists+0x64>)
 800368a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <prvInitialiseTaskLists+0x7c>)
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <prvInitialiseTaskLists+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200006ec 	.word	0x200006ec
 80036a0:	20000b4c 	.word	0x20000b4c
 80036a4:	20000b60 	.word	0x20000b60
 80036a8:	20000b7c 	.word	0x20000b7c
 80036ac:	20000b90 	.word	0x20000b90
 80036b0:	20000ba8 	.word	0x20000ba8
 80036b4:	20000b74 	.word	0x20000b74
 80036b8:	20000b78 	.word	0x20000b78

080036bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036c2:	e019      	b.n	80036f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036c4:	f000 fdb8 	bl	8004238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <prvCheckTasksWaitingTermination+0x4c>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fd25 	bl	8002124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <prvCheckTasksWaitingTermination+0x50>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3b01      	subs	r3, #1
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <prvCheckTasksWaitingTermination+0x50>)
 80036e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036ee:	f000 fdd5 	bl	800429c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f80e 	bl	8003714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <prvCheckTasksWaitingTermination+0x54>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e1      	bne.n	80036c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000b90 	.word	0x20000b90
 800370c:	20000bbc 	.word	0x20000bbc
 8003710:	20000ba4 	.word	0x20000ba4

08003714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ff6e 	bl	800460c <vPortFree>
				vPortFree( pxTCB );
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 ff6b 	bl	800460c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003736:	e019      	b.n	800376c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800373e:	2b01      	cmp	r3, #1
 8003740:	d103      	bne.n	800374a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 ff62 	bl	800460c <vPortFree>
	}
 8003748:	e010      	b.n	800376c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003750:	2b02      	cmp	r3, #2
 8003752:	d00b      	beq.n	800376c <prvDeleteTCB+0x58>
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	b672      	cpsid	i
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	b662      	cpsie	i
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e7fe      	b.n	800376a <prvDeleteTCB+0x56>
	}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <prvResetNextTaskUnblockTime+0x38>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <prvResetNextTaskUnblockTime+0x3c>)
 8003786:	f04f 32ff 	mov.w	r2, #4294967295
 800378a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800378c:	e008      	b.n	80037a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <prvResetNextTaskUnblockTime+0x38>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <prvResetNextTaskUnblockTime+0x3c>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000b74 	.word	0x20000b74
 80037b0:	20000bdc 	.word	0x20000bdc

080037b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <xTaskGetSchedulerState+0x34>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037c2:	2301      	movs	r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	e008      	b.n	80037da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <xTaskGetSchedulerState+0x38>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037d0:	2302      	movs	r3, #2
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	e001      	b.n	80037da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037da:	687b      	ldr	r3, [r7, #4]
	}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	20000bc8 	.word	0x20000bc8
 80037ec:	20000be4 	.word	0x20000be4

080037f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d058      	beq.n	80038b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003806:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <xTaskPriorityDisinherit+0xd4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d00b      	beq.n	8003828 <xTaskPriorityDisinherit+0x38>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	b672      	cpsid	i
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	b662      	cpsie	i
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e7fe      	b.n	8003826 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <xTaskPriorityDisinherit+0x58>
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	b672      	cpsid	i
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	b662      	cpsie	i
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	e7fe      	b.n	8003846 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	429a      	cmp	r2, r3
 800385c:	d02c      	beq.n	80038b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d128      	bne.n	80038b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fc5a 	bl	8002124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskPriorityDisinherit+0xd8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d903      	bls.n	8003898 <xTaskPriorityDisinherit+0xa8>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <xTaskPriorityDisinherit+0xd8>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <xTaskPriorityDisinherit+0xdc>)
 80038a6:	441a      	add	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fe fbdb 	bl	800206a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038b8:	697b      	ldr	r3, [r7, #20]
	}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200006e8 	.word	0x200006e8
 80038c8:	20000bc4 	.word	0x20000bc4
 80038cc:	200006ec 	.word	0x200006ec

080038d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <prvAddCurrentTaskToDelayedList+0x90>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fc1c 	bl	8002124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d10a      	bne.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4819      	ldr	r0, [pc, #100]	; (8003968 <prvAddCurrentTaskToDelayedList+0x98>)
 8003904:	f7fe fbb1 	bl	800206a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003908:	e026      	b.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	429a      	cmp	r2, r3
 8003920:	d209      	bcs.n	8003936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7fe fbbf 	bl	80020b2 <vListInsert>
}
 8003934:	e010      	b.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fe fbb5 	bl	80020b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d202      	bcs.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000bc0 	.word	0x20000bc0
 8003964:	200006e8 	.word	0x200006e8
 8003968:	20000ba8 	.word	0x20000ba8
 800396c:	20000b78 	.word	0x20000b78
 8003970:	20000b74 	.word	0x20000b74
 8003974:	20000bdc 	.word	0x20000bdc

08003978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003982:	f000 fb0d 	bl	8003fa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <xTimerCreateTimerTask+0x84>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d021      	beq.n	80039d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003996:	1d3a      	adds	r2, r7, #4
 8003998:	f107 0108 	add.w	r1, r7, #8
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fb1b 	bl	8001fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	9202      	str	r2, [sp, #8]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2302      	movs	r3, #2
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	460a      	mov	r2, r1
 80039b8:	4911      	ldr	r1, [pc, #68]	; (8003a00 <xTimerCreateTimerTask+0x88>)
 80039ba:	4812      	ldr	r0, [pc, #72]	; (8003a04 <xTimerCreateTimerTask+0x8c>)
 80039bc:	f7ff f8d2 	bl	8002b64 <xTaskCreateStatic>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <xTimerCreateTimerTask+0x90>)
 80039c4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <xTimerCreateTimerTask+0x90>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039ce:	2301      	movs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10b      	bne.n	80039f0 <xTimerCreateTimerTask+0x78>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	b672      	cpsid	i
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	b662      	cpsie	i
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e7fe      	b.n	80039ee <xTimerCreateTimerTask+0x76>
	return xReturn;
 80039f0:	697b      	ldr	r3, [r7, #20]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000c18 	.word	0x20000c18
 8003a00:	080048f0 	.word	0x080048f0
 8003a04:	08003b45 	.word	0x08003b45
 8003a08:	20000c1c 	.word	0x20000c1c

08003a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <xTimerGenericCommand+0x30>
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	b672      	cpsid	i
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	b662      	cpsie	i
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	e7fe      	b.n	8003a3a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <xTimerGenericCommand+0x98>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02a      	beq.n	8003a9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	dc18      	bgt.n	8003a88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a56:	f7ff fead 	bl	80037b4 <xTaskGetSchedulerState>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d109      	bne.n	8003a74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <xTimerGenericCommand+0x98>)
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	f107 0110 	add.w	r1, r7, #16
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	f7fe fc8e 	bl	800238c <xQueueGenericSend>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24
 8003a72:	e012      	b.n	8003a9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <xTimerGenericCommand+0x98>)
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	f107 0110 	add.w	r1, r7, #16
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f7fe fc84 	bl	800238c <xQueueGenericSend>
 8003a84:	6278      	str	r0, [r7, #36]	; 0x24
 8003a86:	e008      	b.n	8003a9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <xTimerGenericCommand+0x98>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	f107 0110 	add.w	r1, r7, #16
 8003a90:	2300      	movs	r3, #0
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	f7fe fd7c 	bl	8002590 <xQueueGenericSendFromISR>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000c18 	.word	0x20000c18

08003aa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <prvProcessExpiredTimer+0x98>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fb2f 	bl	8002124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d023      	beq.n	8003b1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	18d1      	adds	r1, r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	f000 f8d3 	bl	8003c8c <prvInsertTimerInActiveList>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aec:	2300      	movs	r3, #0
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	2300      	movs	r3, #0
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	2100      	movs	r1, #0
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff ff88 	bl	8003a0c <xTimerGenericCommand>
 8003afc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d114      	bne.n	8003b2e <prvProcessExpiredTimer+0x86>
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	b672      	cpsid	i
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	b662      	cpsie	i
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e7fe      	b.n	8003b1a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	6978      	ldr	r0, [r7, #20]
 8003b34:	4798      	blx	r3
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000c10 	.word	0x20000c10

08003b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f857 	bl	8003c04 <prvGetNextExpireTime>
 8003b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f803 	bl	8003b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b62:	f000 f8d5 	bl	8003d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b66:	e7f1      	b.n	8003b4c <prvTimerTask+0x8>

08003b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b72:	f7ff fa3b 	bl	8002fec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f866 	bl	8003c4c <prvSampleTimeNow>
 8003b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d130      	bne.n	8003bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <prvProcessTimerOrBlockTask+0x3c>
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d806      	bhi.n	8003ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b96:	f7ff fa37 	bl	8003008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff83 	bl	8003aa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ba2:	e024      	b.n	8003bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <prvProcessTimerOrBlockTask+0x90>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <prvProcessTimerOrBlockTask+0x50>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <prvProcessTimerOrBlockTask+0x52>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <prvProcessTimerOrBlockTask+0x94>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f7fe ff97 	bl	8002afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bce:	f7ff fa1b 	bl	8003008 <xTaskResumeAll>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <prvProcessTimerOrBlockTask+0x98>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
}
 8003be8:	e001      	b.n	8003bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bea:	f7ff fa0d 	bl	8003008 <xTaskResumeAll>
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000c14 	.word	0x20000c14
 8003bfc:	20000c18 	.word	0x20000c18
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <prvGetNextExpireTime+0x44>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <prvGetNextExpireTime+0x16>
 8003c16:	2201      	movs	r2, #1
 8003c18:	e000      	b.n	8003c1c <prvGetNextExpireTime+0x18>
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <prvGetNextExpireTime+0x44>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e001      	b.n	8003c38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c38:	68fb      	ldr	r3, [r7, #12]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000c10 	.word	0x20000c10

08003c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c54:	f7ff fa76 	bl	8003144 <xTaskGetTickCount>
 8003c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <prvSampleTimeNow+0x3c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d205      	bcs.n	8003c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c64:	f000 f936 	bl	8003ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e002      	b.n	8003c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c76:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <prvSampleTimeNow+0x3c>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000c20 	.word	0x20000c20

08003c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d812      	bhi.n	8003cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e01b      	b.n	8003cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <prvInsertTimerInActiveList+0x7c>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f7fe f9ee 	bl	80020b2 <vListInsert>
 8003cd6:	e012      	b.n	8003cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d206      	bcs.n	8003cee <prvInsertTimerInActiveList+0x62>
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e007      	b.n	8003cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <prvInsertTimerInActiveList+0x80>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe f9da 	bl	80020b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cfe:	697b      	ldr	r3, [r7, #20]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000c14 	.word	0x20000c14
 8003d0c:	20000c10 	.word	0x20000c10

08003d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08e      	sub	sp, #56	; 0x38
 8003d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d16:	e0cc      	b.n	8003eb2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da19      	bge.n	8003d52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	3304      	adds	r3, #4
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <prvProcessReceivedCommands+0x32>
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	b672      	cpsid	i
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	b662      	cpsie	i
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e7fe      	b.n	8003d40 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d48:	6850      	ldr	r0, [r2, #4]
 8003d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4c:	6892      	ldr	r2, [r2, #8]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f2c0 80ab 	blt.w	8003eb0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f9da 	bl	8002124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d70:	463b      	mov	r3, r7
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff6a 	bl	8003c4c <prvSampleTimeNow>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b09      	cmp	r3, #9
 8003d7e:	f200 8098 	bhi.w	8003eb2 <prvProcessReceivedCommands+0x1a2>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <prvProcessReceivedCommands+0x78>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db1 	.word	0x08003db1
 8003d94:	08003e27 	.word	0x08003e27
 8003d98:	08003e3b 	.word	0x08003e3b
 8003d9c:	08003e87 	.word	0x08003e87
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003db1 	.word	0x08003db1
 8003da8:	08003e27 	.word	0x08003e27
 8003dac:	08003e3b 	.word	0x08003e3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	18d1      	adds	r1, r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd0:	f7ff ff5c 	bl	8003c8c <prvInsertTimerInActiveList>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d06b      	beq.n	8003eb2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d060      	beq.n	8003eb2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	441a      	add	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e02:	f7ff fe03 	bl	8003a0c <xTimerGenericCommand>
 8003e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d151      	bne.n	8003eb2 <prvProcessReceivedCommands+0x1a2>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	b672      	cpsid	i
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	b662      	cpsie	i
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e7fe      	b.n	8003e24 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e38:	e03b      	b.n	8003eb2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <prvProcessReceivedCommands+0x162>
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	b672      	cpsid	i
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	b662      	cpsie	i
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e7fe      	b.n	8003e70 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	18d1      	adds	r1, r2, r3
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e80:	f7ff ff04 	bl	8003c8c <prvInsertTimerInActiveList>
					break;
 8003e84:	e015      	b.n	8003eb2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e96:	f000 fbb9 	bl	800460c <vPortFree>
 8003e9a:	e00a      	b.n	8003eb2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003eae:	e000      	b.n	8003eb2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003eb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eb2:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <prvProcessReceivedCommands+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1d39      	adds	r1, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fc04 	bl	80026c8 <xQueueReceive>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f47f af28 	bne.w	8003d18 <prvProcessReceivedCommands+0x8>
	}
}
 8003ec8:	bf00      	nop
 8003eca:	3730      	adds	r7, #48	; 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000c18 	.word	0x20000c18

08003ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eda:	e049      	b.n	8003f70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003edc:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <prvSwitchTimerLists+0xc4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <prvSwitchTimerLists+0xc4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe f915 	bl	8002124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d02f      	beq.n	8003f70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90e      	bls.n	8003f40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <prvSwitchTimerLists+0xc4>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe f8ba 	bl	80020b2 <vListInsert>
 8003f3e:	e017      	b.n	8003f70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fd5e 	bl	8003a0c <xTimerGenericCommand>
 8003f50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <prvSwitchTimerLists+0x9c>
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	b672      	cpsid	i
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	b662      	cpsie	i
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	e7fe      	b.n	8003f6e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <prvSwitchTimerLists+0xc4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1b0      	bne.n	8003edc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <prvSwitchTimerLists+0xc4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <prvSwitchTimerLists+0xc8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <prvSwitchTimerLists+0xc4>)
 8003f86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <prvSwitchTimerLists+0xc8>)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6013      	str	r3, [r2, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000c10 	.word	0x20000c10
 8003f9c:	20000c14 	.word	0x20000c14

08003fa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fa6:	f000 f947 	bl	8004238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <prvCheckForValidListAndQueue+0x60>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d120      	bne.n	8003ff4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fb2:	4814      	ldr	r0, [pc, #80]	; (8004004 <prvCheckForValidListAndQueue+0x64>)
 8003fb4:	f7fe f82c 	bl	8002010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fb8:	4813      	ldr	r0, [pc, #76]	; (8004008 <prvCheckForValidListAndQueue+0x68>)
 8003fba:	f7fe f829 	bl	8002010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <prvCheckForValidListAndQueue+0x6c>)
 8003fc0:	4a10      	ldr	r2, [pc, #64]	; (8004004 <prvCheckForValidListAndQueue+0x64>)
 8003fc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <prvCheckForValidListAndQueue+0x70>)
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <prvCheckForValidListAndQueue+0x68>)
 8003fc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <prvCheckForValidListAndQueue+0x74>)
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <prvCheckForValidListAndQueue+0x78>)
 8003fd2:	2110      	movs	r1, #16
 8003fd4:	200a      	movs	r0, #10
 8003fd6:	f7fe f939 	bl	800224c <xQueueGenericCreateStatic>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <prvCheckForValidListAndQueue+0x60>)
 8003fde:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <prvCheckForValidListAndQueue+0x60>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <prvCheckForValidListAndQueue+0x60>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	490b      	ldr	r1, [pc, #44]	; (800401c <prvCheckForValidListAndQueue+0x7c>)
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fd5c 	bl	8002aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ff4:	f000 f952 	bl	800429c <vPortExitCritical>
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000c18 	.word	0x20000c18
 8004004:	20000be8 	.word	0x20000be8
 8004008:	20000bfc 	.word	0x20000bfc
 800400c:	20000c10 	.word	0x20000c10
 8004010:	20000c14 	.word	0x20000c14
 8004014:	20000cc4 	.word	0x20000cc4
 8004018:	20000c24 	.word	0x20000c24
 800401c:	080048f8 	.word	0x080048f8

08004020 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b04      	subs	r3, #4
 8004030:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3b04      	subs	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b04      	subs	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <pxPortInitialiseStack+0x64>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b14      	subs	r3, #20
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b04      	subs	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f06f 0202 	mvn.w	r2, #2
 800406e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3b20      	subs	r3, #32
 8004074:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004076:	68fb      	ldr	r3, [r7, #12]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	08004089 	.word	0x08004089

08004088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <prvTaskExitError+0x58>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d00b      	beq.n	80040b4 <prvTaskExitError+0x2c>
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	b672      	cpsid	i
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	b662      	cpsie	i
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e7fe      	b.n	80040b2 <prvTaskExitError+0x2a>
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	b672      	cpsid	i
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	b662      	cpsie	i
 80040c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ca:	bf00      	nop
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0fc      	beq.n	80040cc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000000c 	.word	0x2000000c
	...

080040f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	4770      	bx	lr
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst2>:
 8004110:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004118:	4808      	ldr	r0, [pc, #32]	; (800413c <prvPortStartFirstTask+0x24>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8814 	msr	CONTROL, r0
 800412a:	b662      	cpsie	i
 800412c:	b661      	cpsie	f
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	df00      	svc	0
 8004138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800413a:	bf00      	nop
 800413c:	e000ed08 	.word	0xe000ed08

08004140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004146:	4b36      	ldr	r3, [pc, #216]	; (8004220 <xPortStartScheduler+0xe0>)
 8004148:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <xPortStartScheduler+0xe4>)
 800416c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <xPortStartScheduler+0xe8>)
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004174:	e009      	b.n	800418a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <xPortStartScheduler+0xe8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3b01      	subs	r3, #1
 800417c:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <xPortStartScheduler+0xe8>)
 800417e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	2b80      	cmp	r3, #128	; 0x80
 8004194:	d0ef      	beq.n	8004176 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <xPortStartScheduler+0xe8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d00b      	beq.n	80041ba <xPortStartScheduler+0x7a>
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	b672      	cpsid	i
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	b662      	cpsie	i
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	e7fe      	b.n	80041b8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <xPortStartScheduler+0xe8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	4a19      	ldr	r2, [pc, #100]	; (8004228 <xPortStartScheduler+0xe8>)
 80041c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <xPortStartScheduler+0xe8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <xPortStartScheduler+0xe8>)
 80041ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <xPortStartScheduler+0xec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a13      	ldr	r2, [pc, #76]	; (800422c <xPortStartScheduler+0xec>)
 80041de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <xPortStartScheduler+0xec>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <xPortStartScheduler+0xec>)
 80041ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041f0:	f000 f8d4 	bl	800439c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <xPortStartScheduler+0xf0>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041fa:	f000 f8f3 	bl	80043e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <xPortStartScheduler+0xf4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <xPortStartScheduler+0xf4>)
 8004204:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004208:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800420a:	f7ff ff85 	bl	8004118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800420e:	f7ff f863 	bl	80032d8 <vTaskSwitchContext>
	prvTaskExitError();
 8004212:	f7ff ff39 	bl	8004088 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000e400 	.word	0xe000e400
 8004224:	20000d14 	.word	0x20000d14
 8004228:	20000d18 	.word	0x20000d18
 800422c:	e000ed20 	.word	0xe000ed20
 8004230:	2000000c 	.word	0x2000000c
 8004234:	e000ef34 	.word	0xe000ef34

08004238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	b672      	cpsid	i
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	b662      	cpsie	i
 8004252:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <vPortEnterCritical+0x5c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <vPortEnterCritical+0x5c>)
 800425c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <vPortEnterCritical+0x5c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d110      	bne.n	8004288 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <vPortEnterCritical+0x60>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <vPortEnterCritical+0x50>
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	b672      	cpsid	i
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	b662      	cpsie	i
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	e7fe      	b.n	8004286 <vPortEnterCritical+0x4e>
	}
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	2000000c 	.word	0x2000000c
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <vPortExitCritical+0x50>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10b      	bne.n	80042c2 <vPortExitCritical+0x26>
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	b672      	cpsid	i
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	b662      	cpsie	i
 80042be:	607b      	str	r3, [r7, #4]
 80042c0:	e7fe      	b.n	80042c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vPortExitCritical+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <vPortExitCritical+0x50>)
 80042ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042cc:	4b07      	ldr	r3, [pc, #28]	; (80042ec <vPortExitCritical+0x50>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <vPortExitCritical+0x42>
 80042d4:	2300      	movs	r3, #0
 80042d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2000000c 	.word	0x2000000c

080042f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042f0:	f3ef 8009 	mrs	r0, PSP
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <pxCurrentTCBConst>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f01e 0f10 	tst.w	lr, #16
 8004300:	bf08      	it	eq
 8004302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	6010      	str	r0, [r2, #0]
 800430c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004314:	b672      	cpsid	i
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	b662      	cpsie	i
 8004324:	f7fe ffd8 	bl	80032d8 <vTaskSwitchContext>
 8004328:	f04f 0000 	mov.w	r0, #0
 800432c:	f380 8811 	msr	BASEPRI, r0
 8004330:	bc09      	pop	{r0, r3}
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	f01e 0f10 	tst.w	lr, #16
 800433e:	bf08      	it	eq
 8004340:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004344:	f380 8809 	msr	PSP, r0
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <pxCurrentTCBConst>:
 8004350:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	b672      	cpsid	i
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	b662      	cpsie	i
 8004372:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004374:	f7fe fef6 	bl	8003164 <xTaskIncrementTick>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <SysTick_Handler+0x40>)
 8004380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
	__asm volatile
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <vPortSetupTimerInterrupt+0x38>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <vPortSetupTimerInterrupt+0x3c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <vPortSetupTimerInterrupt+0x40>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <vPortSetupTimerInterrupt+0x44>)
 80043ba:	3b01      	subs	r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010
 80043d4:	e000e018 	.word	0xe000e018
 80043d8:	20000000 	.word	0x20000000
 80043dc:	10624dd3 	.word	0x10624dd3
 80043e0:	e000e014 	.word	0xe000e014

080043e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043f4 <vPortEnableVFP+0x10>
 80043e8:	6801      	ldr	r1, [r0, #0]
 80043ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ee:	6001      	str	r1, [r0, #0]
 80043f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043f2:	bf00      	nop
 80043f4:	e000ed88 	.word	0xe000ed88

080043f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043fe:	f3ef 8305 	mrs	r3, IPSR
 8004402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d915      	bls.n	8004436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800440a:	4a18      	ldr	r2, [pc, #96]	; (800446c <vPortValidateInterruptPriority+0x74>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <vPortValidateInterruptPriority+0x78>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	7afa      	ldrb	r2, [r7, #11]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20b      	bcs.n	8004436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	b672      	cpsid	i
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	b662      	cpsie	i
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	e7fe      	b.n	8004434 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <vPortValidateInterruptPriority+0x7c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <vPortValidateInterruptPriority+0x80>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d90b      	bls.n	800445e <vPortValidateInterruptPriority+0x66>
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	b672      	cpsid	i
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	b662      	cpsie	i
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	e7fe      	b.n	800445c <vPortValidateInterruptPriority+0x64>
	}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e3f0 	.word	0xe000e3f0
 8004470:	20000d14 	.word	0x20000d14
 8004474:	e000ed0c 	.word	0xe000ed0c
 8004478:	20000d18 	.word	0x20000d18

0800447c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004488:	f7fe fdb0 	bl	8002fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800448c:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <pvPortMalloc+0x17c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004494:	f000 f916 	bl	80046c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004498:	4b58      	ldr	r3, [pc, #352]	; (80045fc <pvPortMalloc+0x180>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 8090 	bne.w	80045c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01e      	beq.n	80044ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044ac:	2208      	movs	r2, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	3308      	adds	r3, #8
 80044c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <pvPortMalloc+0x6e>
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	b672      	cpsid	i
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	b662      	cpsie	i
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e7fe      	b.n	80044e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d06a      	beq.n	80045c6 <pvPortMalloc+0x14a>
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <pvPortMalloc+0x184>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d865      	bhi.n	80045c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044fa:	4b42      	ldr	r3, [pc, #264]	; (8004604 <pvPortMalloc+0x188>)
 80044fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044fe:	4b41      	ldr	r3, [pc, #260]	; (8004604 <pvPortMalloc+0x188>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004504:	e004      	b.n	8004510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <pvPortMalloc+0xa6>
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f1      	bne.n	8004506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004522:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <pvPortMalloc+0x17c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	429a      	cmp	r2, r3
 800452a:	d04c      	beq.n	80045c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2208      	movs	r2, #8
 8004532:	4413      	add	r3, r2
 8004534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	2308      	movs	r3, #8
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	429a      	cmp	r2, r3
 800454c:	d920      	bls.n	8004590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800454e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <pvPortMalloc+0xfc>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	b672      	cpsid	i
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	b662      	cpsie	i
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	e7fe      	b.n	8004576 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad2      	subs	r2, r2, r3
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800458a:	69b8      	ldr	r0, [r7, #24]
 800458c:	f000 f8fc 	bl	8004788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <pvPortMalloc+0x184>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	4a19      	ldr	r2, [pc, #100]	; (8004600 <pvPortMalloc+0x184>)
 800459c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <pvPortMalloc+0x184>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <pvPortMalloc+0x18c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d203      	bcs.n	80045b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <pvPortMalloc+0x184>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a16      	ldr	r2, [pc, #88]	; (8004608 <pvPortMalloc+0x18c>)
 80045b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <pvPortMalloc+0x180>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045c6:	f7fe fd1f 	bl	8003008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <pvPortMalloc+0x170>
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	b672      	cpsid	i
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	b662      	cpsie	i
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e7fe      	b.n	80045ea <pvPortMalloc+0x16e>
	return pvReturn;
 80045ec:	69fb      	ldr	r3, [r7, #28]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3728      	adds	r7, #40	; 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20004924 	.word	0x20004924
 80045fc:	20004930 	.word	0x20004930
 8004600:	20004928 	.word	0x20004928
 8004604:	2000491c 	.word	0x2000491c
 8004608:	2000492c 	.word	0x2000492c

0800460c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d04a      	beq.n	80046b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800461e:	2308      	movs	r3, #8
 8004620:	425b      	negs	r3, r3
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b22      	ldr	r3, [pc, #136]	; (80046bc <vPortFree+0xb0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <vPortFree+0x46>
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	b672      	cpsid	i
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	b662      	cpsie	i
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e7fe      	b.n	8004650 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <vPortFree+0x66>
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	b672      	cpsid	i
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	b662      	cpsie	i
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e7fe      	b.n	8004670 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <vPortFree+0xb0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d019      	beq.n	80046b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d115      	bne.n	80046b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <vPortFree+0xb0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004698:	f7fe fca8 	bl	8002fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <vPortFree+0xb4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4413      	add	r3, r2
 80046a6:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <vPortFree+0xb4>)
 80046a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046aa:	6938      	ldr	r0, [r7, #16]
 80046ac:	f000 f86c 	bl	8004788 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046b0:	f7fe fcaa 	bl	8003008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046b4:	bf00      	nop
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20004930 	.word	0x20004930
 80046c0:	20004928 	.word	0x20004928

080046c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <prvHeapInit+0xac>)
 80046d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3307      	adds	r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <prvHeapInit+0xac>)
 80046f4:	4413      	add	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <prvHeapInit+0xb0>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <prvHeapInit+0xb0>)
 8004704:	2200      	movs	r2, #0
 8004706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004710:	2208      	movs	r2, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a15      	ldr	r2, [pc, #84]	; (8004778 <prvHeapInit+0xb4>)
 8004724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <prvHeapInit+0xb4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <prvHeapInit+0xb4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <prvHeapInit+0xb4>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <prvHeapInit+0xb8>)
 8004752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <prvHeapInit+0xbc>)
 800475a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <prvHeapInit+0xc0>)
 800475e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000d1c 	.word	0x20000d1c
 8004774:	2000491c 	.word	0x2000491c
 8004778:	20004924 	.word	0x20004924
 800477c:	2000492c 	.word	0x2000492c
 8004780:	20004928 	.word	0x20004928
 8004784:	20004930 	.word	0x20004930

08004788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <prvInsertBlockIntoFreeList+0xac>)
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e002      	b.n	800479c <prvInsertBlockIntoFreeList+0x14>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d8f7      	bhi.n	8004796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4413      	add	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d108      	bne.n	80047ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	441a      	add	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d118      	bne.n	8004810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <prvInsertBlockIntoFreeList+0xb0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d00d      	beq.n	8004806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e008      	b.n	8004818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvInsertBlockIntoFreeList+0xb0>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e003      	b.n	8004818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d002      	beq.n	8004826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000491c 	.word	0x2000491c
 8004838:	20004924 	.word	0x20004924

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4e0d      	ldr	r6, [pc, #52]	; (8004874 <__libc_init_array+0x38>)
 8004840:	4c0d      	ldr	r4, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004842:	1ba4      	subs	r4, r4, r6
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	2500      	movs	r5, #0
 8004848:	42a5      	cmp	r5, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	4e0b      	ldr	r6, [pc, #44]	; (800487c <__libc_init_array+0x40>)
 800484e:	4c0c      	ldr	r4, [pc, #48]	; (8004880 <__libc_init_array+0x44>)
 8004850:	f000 f82c 	bl	80048ac <_init>
 8004854:	1ba4      	subs	r4, r4, r6
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	2500      	movs	r5, #0
 800485a:	42a5      	cmp	r5, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004864:	4798      	blx	r3
 8004866:	3501      	adds	r5, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800486e:	4798      	blx	r3
 8004870:	3501      	adds	r5, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	0800498c 	.word	0x0800498c
 8004878:	0800498c 	.word	0x0800498c
 800487c:	0800498c 	.word	0x0800498c
 8004880:	08004990 	.word	0x08004990

08004884 <memcpy>:
 8004884:	b510      	push	{r4, lr}
 8004886:	1e43      	subs	r3, r0, #1
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	d100      	bne.n	8004890 <memcpy+0xc>
 800488e:	bd10      	pop	{r4, pc}
 8004890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004898:	e7f7      	b.n	800488a <memcpy+0x6>

0800489a <memset>:
 800489a:	4402      	add	r2, r0
 800489c:	4603      	mov	r3, r0
 800489e:	4293      	cmp	r3, r2
 80048a0:	d100      	bne.n	80048a4 <memset+0xa>
 80048a2:	4770      	bx	lr
 80048a4:	f803 1b01 	strb.w	r1, [r3], #1
 80048a8:	e7f9      	b.n	800489e <memset+0x4>
	...

080048ac <_init>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr

080048b8 <_fini>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr
