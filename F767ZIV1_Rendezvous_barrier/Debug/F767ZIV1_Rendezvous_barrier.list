
F767ZIV1_Rendezvous_barrier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800428c  0800428c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004018  2000000c  080042a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004024  080042a0  00024024  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117e0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026a7  00000000  00000000  0003181a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00033ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002792d  00000000  00000000  00035c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bcbc  00000000  00000000  0005d55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7344  00000000  00000000  00069219  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016055d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f04  00000000  00000000  001605d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	080041d4 	.word	0x080041d4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	080041d4 	.word	0x080041d4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f8f8 	bl	800073a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f003 fd30 	bl	8003fb0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f003 fd06 	bl	8003f60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x20>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x24>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_IncTick+0x24>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000
 8000580:	20003fd0 	.word	0x20003fd0

08000584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_GetTick+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20003fd0 	.word	0x20003fd0

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	f7ff ffee 	bl	8000584 <HAL_GetTick>
 80005a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b4:	d005      	beq.n	80005c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_Delay+0x40>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c2:	bf00      	nop
 80005c4:	f7ff ffde 	bl	8000584 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8f7      	bhi.n	80005c4 <HAL_Delay+0x28>
  {
  }
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <__NVIC_SetPriorityGrouping+0x40>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	4313      	orrs	r3, r2
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x40>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	05fa0000 	.word	0x05fa0000

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <__NVIC_EnableIRQ+0x38>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff4c 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000762:	f7ff ff61 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	6978      	ldr	r0, [r7, #20]
 800076e:	f7ff ffb1 	bl	80006d4 <NVIC_EncodePriority>
 8000772:	4602      	mov	r2, r0
 8000774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff80 	bl	8000680 <__NVIC_SetPriority>
}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff54 	bl	8000644 <__NVIC_EnableIRQ>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	e175      	b.n	8000ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007c4:	2201      	movs	r2, #1
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4013      	ands	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	429a      	cmp	r2, r3
 80007de:	f040 8164 	bne.w	8000aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_Init+0x4e>
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b12      	cmp	r3, #18
 80007f0:	d123      	bne.n	800083a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3208      	adds	r2, #8
 80007fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	220f      	movs	r2, #15
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4013      	ands	r3, r2
 8000814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	691a      	ldr	r2, [r3, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4313      	orrs	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	08da      	lsrs	r2, r3, #3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3208      	adds	r2, #8
 8000834:	69b9      	ldr	r1, [r7, #24]
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4013      	ands	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0203 	and.w	r2, r3, #3
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d00b      	beq.n	800088e <HAL_GPIO_Init+0xea>
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d007      	beq.n	800088e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	2b11      	cmp	r3, #17
 8000884:	d003      	beq.n	800088e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b12      	cmp	r3, #18
 800088c:	d130      	bne.n	80008f0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2203      	movs	r2, #3
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c4:	2201      	movs	r2, #1
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	f003 0201 	and.w	r2, r3, #1
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4313      	orrs	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80be 	beq.w	8000aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a64      	ldr	r2, [pc, #400]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <HAL_GPIO_Init+0x320>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000946:	4a60      	ldr	r2, [pc, #384]	; (8000ac8 <HAL_GPIO_Init+0x324>)
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3302      	adds	r3, #2
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	220f      	movs	r2, #15
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a57      	ldr	r2, [pc, #348]	; (8000acc <HAL_GPIO_Init+0x328>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d037      	beq.n	80009e2 <HAL_GPIO_Init+0x23e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a56      	ldr	r2, [pc, #344]	; (8000ad0 <HAL_GPIO_Init+0x32c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d031      	beq.n	80009de <HAL_GPIO_Init+0x23a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a55      	ldr	r2, [pc, #340]	; (8000ad4 <HAL_GPIO_Init+0x330>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02b      	beq.n	80009da <HAL_GPIO_Init+0x236>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a54      	ldr	r2, [pc, #336]	; (8000ad8 <HAL_GPIO_Init+0x334>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d025      	beq.n	80009d6 <HAL_GPIO_Init+0x232>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a53      	ldr	r2, [pc, #332]	; (8000adc <HAL_GPIO_Init+0x338>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d01f      	beq.n	80009d2 <HAL_GPIO_Init+0x22e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a52      	ldr	r2, [pc, #328]	; (8000ae0 <HAL_GPIO_Init+0x33c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d019      	beq.n	80009ce <HAL_GPIO_Init+0x22a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <HAL_GPIO_Init+0x340>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0x226>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a50      	ldr	r2, [pc, #320]	; (8000ae8 <HAL_GPIO_Init+0x344>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d00d      	beq.n	80009c6 <HAL_GPIO_Init+0x222>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4f      	ldr	r2, [pc, #316]	; (8000aec <HAL_GPIO_Init+0x348>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d007      	beq.n	80009c2 <HAL_GPIO_Init+0x21e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <HAL_GPIO_Init+0x34c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d101      	bne.n	80009be <HAL_GPIO_Init+0x21a>
 80009ba:	2309      	movs	r3, #9
 80009bc:	e012      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009be:	230a      	movs	r3, #10
 80009c0:	e010      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009c2:	2308      	movs	r3, #8
 80009c4:	e00e      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009c6:	2307      	movs	r3, #7
 80009c8:	e00c      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00a      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x240>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x324>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a33      	ldr	r2, [pc, #204]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_GPIO_Init+0x350>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f ae86 	bls.w	80007c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40022000 	.word	0x40022000
 8000af0:	40022400 	.word	0x40022400
 8000af4:	40013c00 	.word	0x40013c00

08000af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b14:	e003      	b.n	8000b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	041a      	lsls	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	619a      	str	r2, [r3, #24]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d104      	bne.n	8000b4e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	041a      	lsls	r2, r3, #16
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e25e      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8087 	beq.w	8000c92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b84:	4b96      	ldr	r3, [pc, #600]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 030c 	and.w	r3, r3, #12
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d00c      	beq.n	8000baa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b90:	4b93      	ldr	r3, [pc, #588]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d112      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x62>
 8000b9c:	4b90      	ldr	r3, [pc, #576]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000baa:	4b8d      	ldr	r3, [pc, #564]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d06c      	beq.n	8000c90 <HAL_RCC_OscConfig+0x130>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d168      	bne.n	8000c90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e238      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bca:	d106      	bne.n	8000bda <HAL_RCC_OscConfig+0x7a>
 8000bcc:	4b84      	ldr	r3, [pc, #528]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a83      	ldr	r2, [pc, #524]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e02e      	b.n	8000c38 <HAL_RCC_OscConfig+0xd8>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x9c>
 8000be2:	4b7f      	ldr	r3, [pc, #508]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a7e      	ldr	r2, [pc, #504]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a7b      	ldr	r2, [pc, #492]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e01d      	b.n	8000c38 <HAL_RCC_OscConfig+0xd8>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0xc0>
 8000c06:	4b76      	ldr	r3, [pc, #472]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a75      	ldr	r2, [pc, #468]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a72      	ldr	r2, [pc, #456]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e00b      	b.n	8000c38 <HAL_RCC_OscConfig+0xd8>
 8000c20:	4b6f      	ldr	r3, [pc, #444]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a6e      	ldr	r2, [pc, #440]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a6b      	ldr	r2, [pc, #428]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c40:	f7ff fca0 	bl	8000584 <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c48:	f7ff fc9c 	bl	8000584 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b64      	cmp	r3, #100	; 0x64
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e1ec      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	4b61      	ldr	r3, [pc, #388]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f0      	beq.n	8000c48 <HAL_RCC_OscConfig+0xe8>
 8000c66:	e014      	b.n	8000c92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c68:	f7ff fc8c 	bl	8000584 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fc88 	bl	8000584 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e1d8      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x110>
 8000c8e:	e000      	b.n	8000c92 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d069      	beq.n	8000d72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00b      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d11c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x190>
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d116      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc2:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <HAL_RCC_OscConfig+0x17a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d001      	beq.n	8000cda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e1ac      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	493d      	ldr	r1, [pc, #244]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	e040      	b.n	8000d72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d023      	beq.n	8000d40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a38      	ldr	r2, [pc, #224]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc3e 	bl	8000584 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fc3a 	bl	8000584 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e18a      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f0      	beq.n	8000d0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4929      	ldr	r1, [pc, #164]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
 8000d3e:	e018      	b.n	8000d72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d46:	f023 0301 	bic.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fc1a 	bl	8000584 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fc16 	bl	8000584 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e166      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d038      	beq.n	8000df0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d019      	beq.n	8000dba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d92:	f7ff fbf7 	bl	8000584 <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fbf3 	bl	8000584 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e143      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f0      	beq.n	8000d9a <HAL_RCC_OscConfig+0x23a>
 8000db8:	e01a      	b.n	8000df0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_RCC_OscConfig+0x280>)
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fbdd 	bl	8000584 <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	e00a      	b.n	8000de4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fbd9 	bl	8000584 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d903      	bls.n	8000de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e129      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
 8000de0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	4b95      	ldr	r3, [pc, #596]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ee      	bne.n	8000dce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80a4 	beq.w	8000f46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10d      	bne.n	8000e26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b8c      	ldr	r3, [pc, #560]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a8b      	ldr	r2, [pc, #556]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b89      	ldr	r3, [pc, #548]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e26:	4b86      	ldr	r3, [pc, #536]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d118      	bne.n	8000e64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000e32:	4b83      	ldr	r3, [pc, #524]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a82      	ldr	r2, [pc, #520]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fba1 	bl	8000584 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e46:	f7ff fb9d 	bl	8000584 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b64      	cmp	r3, #100	; 0x64
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e0ed      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e58:	4b79      	ldr	r3, [pc, #484]	; (8001040 <HAL_RCC_OscConfig+0x4e0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d106      	bne.n	8000e7a <HAL_RCC_OscConfig+0x31a>
 8000e6c:	4b73      	ldr	r3, [pc, #460]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e70:	4a72      	ldr	r2, [pc, #456]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6713      	str	r3, [r2, #112]	; 0x70
 8000e78:	e02d      	b.n	8000ed6 <HAL_RCC_OscConfig+0x376>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x33c>
 8000e82:	4b6e      	ldr	r3, [pc, #440]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	4a6d      	ldr	r2, [pc, #436]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8e:	4b6b      	ldr	r3, [pc, #428]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a6a      	ldr	r2, [pc, #424]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9a:	e01c      	b.n	8000ed6 <HAL_RCC_OscConfig+0x376>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x35e>
 8000ea4:	4b65      	ldr	r3, [pc, #404]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	4a64      	ldr	r2, [pc, #400]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb0:	4b62      	ldr	r3, [pc, #392]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	4a61      	ldr	r2, [pc, #388]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebc:	e00b      	b.n	8000ed6 <HAL_RCC_OscConfig+0x376>
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eca:	4b5c      	ldr	r3, [pc, #368]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	4a5b      	ldr	r2, [pc, #364]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d015      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ede:	f7ff fb51 	bl	8000584 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	e00a      	b.n	8000efc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fb4d 	bl	8000584 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e09b      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	4b4f      	ldr	r3, [pc, #316]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0ee      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x386>
 8000f08:	e014      	b.n	8000f34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb3b 	bl	8000584 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fb37 	bl	8000584 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e085      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ee      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a3f      	ldr	r2, [pc, #252]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d071      	beq.n	8001032 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d069      	beq.n	800102e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d14b      	bne.n	8000ffa <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fb09 	bl	8000584 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f76:	f7ff fb05 	bl	8000584 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e055      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	019b      	lsls	r3, r3, #6
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	3b01      	subs	r3, #1
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	061b      	lsls	r3, r3, #24
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	071b      	lsls	r3, r3, #28
 8000fc0:	491e      	ldr	r1, [pc, #120]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fad7 	bl	8000584 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fda:	f7ff fad3 	bl	8000584 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e023      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x47a>
 8000ff8:	e01b      	b.n	8001032 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8001000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fabd 	bl	8000584 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff fab9 	bl	8000584 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e009      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_RCC_OscConfig+0x4dc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x4ae>
 800102c:	e001      	b.n	8001032 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0ce      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d910      	bls.n	800108c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 020f 	bic.w	r2, r3, #15
 8001072:	4964      	ldr	r1, [pc, #400]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0b6      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	494c      	ldr	r1, [pc, #304]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d040      	beq.n	8001168 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d115      	bne.n	8001126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e07d      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e071      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e069      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f023 0203 	bic.w	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001138:	f7ff fa24 	bl	8000584 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	e00a      	b.n	8001156 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff fa20 	bl	8000584 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e051      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 020c 	and.w	r2, r3, #12
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	429a      	cmp	r2, r3
 8001166:	d1eb      	bne.n	8001140 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d210      	bcs.n	8001198 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 020f 	bic.w	r2, r3, #15
 800117e:	4921      	ldr	r1, [pc, #132]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e030      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4915      	ldr	r1, [pc, #84]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	490d      	ldr	r1, [pc, #52]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011d6:	f000 f81d 	bl	8001214 <HAL_RCC_GetSysClockFreq>
 80011da:	4601      	mov	r1, r0
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	fa21 f303 	lsr.w	r3, r1, r3
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_RCC_ClockConfig+0x1cc>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f002 fedc 	bl	8003fb0 <HAL_InitTick>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00
 8001208:	40023800 	.word	0x40023800
 800120c:	0800426c 	.word	0x0800426c
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d007      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x32>
 8001236:	2b08      	cmp	r3, #8
 8001238:	d008      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x38>
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80b4 	bne.w	80013a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001242:	60bb      	str	r3, [r7, #8]
       break;
 8001244:	e0b3      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001248:	60bb      	str	r3, [r7, #8]
      break;
 800124a:	e0b0      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001254:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d04a      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001262:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	099b      	lsrs	r3, r3, #6
 8001268:	f04f 0400 	mov.w	r4, #0
 800126c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	ea03 0501 	and.w	r5, r3, r1
 8001278:	ea04 0602 	and.w	r6, r4, r2
 800127c:	4629      	mov	r1, r5
 800127e:	4632      	mov	r2, r6
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	f04f 0400 	mov.w	r4, #0
 8001288:	0154      	lsls	r4, r2, #5
 800128a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800128e:	014b      	lsls	r3, r1, #5
 8001290:	4619      	mov	r1, r3
 8001292:	4622      	mov	r2, r4
 8001294:	1b49      	subs	r1, r1, r5
 8001296:	eb62 0206 	sbc.w	r2, r2, r6
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	f04f 0400 	mov.w	r4, #0
 80012a2:	0194      	lsls	r4, r2, #6
 80012a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012a8:	018b      	lsls	r3, r1, #6
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	eb64 0402 	sbc.w	r4, r4, r2
 80012b0:	f04f 0100 	mov.w	r1, #0
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	00e2      	lsls	r2, r4, #3
 80012ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012be:	00d9      	lsls	r1, r3, #3
 80012c0:	460b      	mov	r3, r1
 80012c2:	4614      	mov	r4, r2
 80012c4:	195b      	adds	r3, r3, r5
 80012c6:	eb44 0406 	adc.w	r4, r4, r6
 80012ca:	f04f 0100 	mov.w	r1, #0
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	02a2      	lsls	r2, r4, #10
 80012d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012d8:	0299      	lsls	r1, r3, #10
 80012da:	460b      	mov	r3, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0400 	mov.w	r4, #0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4623      	mov	r3, r4
 80012ec:	f7fe ffa8 	bl	8000240 <__aeabi_uldivmod>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e049      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	f04f 0400 	mov.w	r4, #0
 8001302:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	ea03 0501 	and.w	r5, r3, r1
 800130e:	ea04 0602 	and.w	r6, r4, r2
 8001312:	4629      	mov	r1, r5
 8001314:	4632      	mov	r2, r6
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	f04f 0400 	mov.w	r4, #0
 800131e:	0154      	lsls	r4, r2, #5
 8001320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001324:	014b      	lsls	r3, r1, #5
 8001326:	4619      	mov	r1, r3
 8001328:	4622      	mov	r2, r4
 800132a:	1b49      	subs	r1, r1, r5
 800132c:	eb62 0206 	sbc.w	r2, r2, r6
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	0194      	lsls	r4, r2, #6
 800133a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800133e:	018b      	lsls	r3, r1, #6
 8001340:	1a5b      	subs	r3, r3, r1
 8001342:	eb64 0402 	sbc.w	r4, r4, r2
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	00e2      	lsls	r2, r4, #3
 8001350:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001354:	00d9      	lsls	r1, r3, #3
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	195b      	adds	r3, r3, r5
 800135c:	eb44 0406 	adc.w	r4, r4, r6
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	02a2      	lsls	r2, r4, #10
 800136a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800136e:	0299      	lsls	r1, r3, #10
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	461a      	mov	r2, r3
 8001380:	4623      	mov	r3, r4
 8001382:	f7fe ff5d 	bl	8000240 <__aeabi_uldivmod>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	3301      	adds	r3, #1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	60bb      	str	r3, [r7, #8]
      break;
 80013a6:	e002      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013aa:	60bb      	str	r3, [r7, #8]
      break;
 80013ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ae:	68bb      	ldr	r3, [r7, #8]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	00f42400 	.word	0x00f42400

080013c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013dc:	f7ff fff0 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 80013e0:	4601      	mov	r1, r0
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	0b5b      	lsrs	r3, r3, #13
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	0800427c 	.word	0x0800427c

08001400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	220f      	movs	r2, #15
 800140e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_RCC_GetClockConfig+0x5c>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_RCC_GetClockConfig+0x60>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 020f 	and.w	r2, r3, #15
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e01d      	b.n	80014b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f815 	bl	80014ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f000 f986 	bl	80017b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_TIM_Base_Start_IT+0x50>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d00b      	beq.n	8001512 <HAL_TIM_Base_Start_IT+0x42>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d007      	beq.n	8001512 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	00010007 	.word	0x00010007

08001524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d122      	bne.n	8001580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b02      	cmp	r3, #2
 8001546:	d11b      	bne.n	8001580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0202 	mvn.w	r2, #2
 8001550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f905 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 800156c:	e005      	b.n	800157a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8f7 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f908 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b04      	cmp	r3, #4
 800158c:	d122      	bne.n	80015d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d11b      	bne.n	80015d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f06f 0204 	mvn.w	r2, #4
 80015a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8db 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 80015c0:	e005      	b.n	80015ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8cd 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8de 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d122      	bne.n	8001628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d11b      	bne.n	8001628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0208 	mvn.w	r2, #8
 80015f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2204      	movs	r2, #4
 80015fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8b1 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 8001614:	e005      	b.n	8001622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f8a3 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f8b4 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b10      	cmp	r3, #16
 8001634:	d122      	bne.n	800167c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b10      	cmp	r3, #16
 8001642:	d11b      	bne.n	800167c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0210 	mvn.w	r2, #16
 800164c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2208      	movs	r2, #8
 8001652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f887 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 8001668:	e005      	b.n	8001676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f879 	bl	8001762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f88a 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d10e      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0201 	mvn.w	r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f002 fc42 	bl	8003f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	2b80      	cmp	r3, #128	; 0x80
 80016b4:	d10e      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b80      	cmp	r3, #128	; 0x80
 80016c2:	d107      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f91a 	bl	8001908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e2:	d10e      	bne.n	8001702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	2b80      	cmp	r3, #128	; 0x80
 80016f0:	d107      	bne.n	8001702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f90d 	bl	800191c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170c:	2b40      	cmp	r3, #64	; 0x40
 800170e:	d10e      	bne.n	800172e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	d107      	bne.n	800172e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f838 	bl	800179e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b20      	cmp	r3, #32
 800173a:	d10e      	bne.n	800175a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b20      	cmp	r3, #32
 8001748:	d107      	bne.n	800175a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0220 	mvn.w	r2, #32
 8001752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8cd 	bl	80018f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <TIM_Base_SetConfig+0x114>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d00f      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <TIM_Base_SetConfig+0x118>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00b      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <TIM_Base_SetConfig+0x11c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <TIM_Base_SetConfig+0x120>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d003      	beq.n	80017f4 <TIM_Base_SetConfig+0x40>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <TIM_Base_SetConfig+0x124>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d108      	bne.n	8001806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <TIM_Base_SetConfig+0x114>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02b      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d027      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <TIM_Base_SetConfig+0x118>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d023      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <TIM_Base_SetConfig+0x11c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01f      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <TIM_Base_SetConfig+0x120>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01b      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <TIM_Base_SetConfig+0x124>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d017      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a28      	ldr	r2, [pc, #160]	; (80018dc <TIM_Base_SetConfig+0x128>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <TIM_Base_SetConfig+0x12c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00f      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <TIM_Base_SetConfig+0x130>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00b      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <TIM_Base_SetConfig+0x134>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <TIM_Base_SetConfig+0x138>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d003      	beq.n	8001866 <TIM_Base_SetConfig+0xb2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <TIM_Base_SetConfig+0x13c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d108      	bne.n	8001878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800186c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <TIM_Base_SetConfig+0x114>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d003      	beq.n	80018ac <TIM_Base_SetConfig+0xf8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <TIM_Base_SetConfig+0x124>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d103      	bne.n	80018b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	615a      	str	r2, [r3, #20]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40000800 	.word	0x40000800
 80018d4:	40000c00 	.word	0x40000c00
 80018d8:	40010400 	.word	0x40010400
 80018dc:	40014000 	.word	0x40014000
 80018e0:	40014400 	.word	0x40014400
 80018e4:	40014800 	.word	0x40014800
 80018e8:	40001800 	.word	0x40001800
 80018ec:	40001c00 	.word	0x40001c00
 80018f0:	40002000 	.word	0x40002000

080018f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001942:	2b84      	cmp	r3, #132	; 0x84
 8001944:	d005      	beq.n	8001952 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001946:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	3303      	adds	r3, #3
 8001950:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001964:	f000 feee 	bl	8002744 <vTaskStartScheduler>
  
  return osOK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}

0800196e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800196e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001970:	b089      	sub	sp, #36	; 0x24
 8001972:	af04      	add	r7, sp, #16
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <osThreadCreate+0x54>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01c      	beq.n	80019c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685c      	ldr	r4, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681d      	ldr	r5, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691e      	ldr	r6, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ffc8 	bl	8001930 <makeFreeRtosPriority>
 80019a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019aa:	9202      	str	r2, [sp, #8]
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9100      	str	r1, [sp, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4632      	mov	r2, r6
 80019b4:	4629      	mov	r1, r5
 80019b6:	4620      	mov	r0, r4
 80019b8:	f000 fd00 	bl	80023bc <xTaskCreateStatic>
 80019bc:	4603      	mov	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e01c      	b.n	80019fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685c      	ldr	r4, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019ce:	b29e      	uxth	r6, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffaa 	bl	8001930 <makeFreeRtosPriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4632      	mov	r2, r6
 80019ea:	4629      	mov	r1, r5
 80019ec:	4620      	mov	r0, r4
 80019ee:	f000 fd44 	bl	800247a <xTaskCreate>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d001      	beq.n	80019fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e000      	b.n	80019fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80019fc:	68fb      	ldr	r3, [r7, #12]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <osDelay+0x16>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	e000      	b.n	8001a1e <osDelay+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fe5a 	bl	80026d8 <vTaskDelay>
  
  return osOK;
 8001a24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f103 0208 	add.w	r2, r3, #8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f103 0208 	add.w	r2, r3, #8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f103 0208 	add.w	r2, r3, #8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae6:	d103      	bne.n	8001af0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e00c      	b.n	8001b0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3308      	adds	r3, #8
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e002      	b.n	8001afe <vListInsert+0x2e>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d2f6      	bcs.n	8001af8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6892      	ldr	r2, [r2, #8]
 8001b58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6852      	ldr	r2, [r2, #4]
 8001b62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d103      	bne.n	8001b76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10b      	bne.n	8001bc4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb0:	b672      	cpsid	i
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	b662      	cpsie	i
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	e7fe      	b.n	8001bc2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8001bc4:	f001 fd30 	bl	8003628 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	441a      	add	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	22ff      	movs	r2, #255	; 0xff
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d114      	bne.n	8001c44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3310      	adds	r3, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 ffea 	bl	8002c00 <xTaskRemoveFromEventList>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <xQueueGenericReset+0xd0>)
 8001c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f3bf 8f4f 	dsb	sy
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	e009      	b.n	8001c58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3310      	adds	r3, #16
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fef0 	bl	8001a2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3324      	adds	r3, #36	; 0x24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff feeb 	bl	8001a2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c58:	f001 fd18 	bl	800368c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000ed04 	.word	0xe000ed04

08001c6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	4613      	mov	r3, r2
 8001c78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10b      	bne.n	8001c98 <xQueueGenericCreate+0x2c>
 8001c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c84:	b672      	cpsid	i
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	b662      	cpsie	i
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	e7fe      	b.n	8001c96 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e004      	b.n	8001cae <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3348      	adds	r3, #72	; 0x48
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fd98 	bl	80037e8 <pvPortMalloc>
 8001cb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00f      	beq.n	8001ce0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	3348      	adds	r3, #72	; 0x48
 8001cc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f805 	bl	8001cea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
	}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e002      	b.n	8001d0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d18:	2101      	movs	r1, #1
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f7ff ff3c 	bl	8001b98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10b      	bne.n	8001d50 <xQueueCreateCountingSemaphore+0x28>
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	b672      	cpsid	i
 8001d3e:	f383 8811 	msr	BASEPRI, r3
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	f3bf 8f4f 	dsb	sy
 8001d4a:	b662      	cpsie	i
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	e7fe      	b.n	8001d4e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d90b      	bls.n	8001d70 <xQueueCreateCountingSemaphore+0x48>
 8001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5c:	b672      	cpsid	i
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	b662      	cpsie	i
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e7fe      	b.n	8001d6e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001d70:	2202      	movs	r2, #2
 8001d72:	2100      	movs	r1, #0
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff79 	bl	8001c6c <xQueueGenericCreate>
 8001d7a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001d88:	697b      	ldr	r3, [r7, #20]
	}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001da2:	2300      	movs	r3, #0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <xQueueGenericSend+0x34>
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	b672      	cpsid	i
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	b662      	cpsie	i
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc6:	e7fe      	b.n	8001dc6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <xQueueGenericSend+0x42>
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <xQueueGenericSend+0x46>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <xQueueGenericSend+0x48>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <xQueueGenericSend+0x64>
 8001de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de4:	b672      	cpsid	i
 8001de6:	f383 8811 	msr	BASEPRI, r3
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	f3bf 8f4f 	dsb	sy
 8001df2:	b662      	cpsie	i
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	e7fe      	b.n	8001df6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <xQueueGenericSend+0x72>
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <xQueueGenericSend+0x76>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <xQueueGenericSend+0x78>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <xQueueGenericSend+0x94>
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	b672      	cpsid	i
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	b662      	cpsie	i
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	e7fe      	b.n	8001e26 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e28:	f001 f8ae 	bl	8002f88 <xTaskGetSchedulerState>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <xQueueGenericSend+0xa4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <xQueueGenericSend+0xa8>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <xQueueGenericSend+0xaa>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10b      	bne.n	8001e5a <xQueueGenericSend+0xc6>
 8001e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e46:	b672      	cpsid	i
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	b662      	cpsie	i
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e7fe      	b.n	8001e58 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e5a:	f001 fbe5 	bl	8003628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <xQueueGenericSend+0xdc>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d129      	bne.n	8001ec4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e76:	f000 f9b7 	bl	80021e8 <prvCopyDataToQueue>
 8001e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	3324      	adds	r3, #36	; 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 feb9 	bl	8002c00 <xTaskRemoveFromEventList>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e94:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <xQueueGenericSend+0x200>)
 8001e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	e00a      	b.n	8001ebc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <xQueueGenericSend+0x200>)
 8001eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ebc:	f001 fbe6 	bl	800368c <vPortExitCritical>
				return pdPASS;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e063      	b.n	8001f8c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001eca:	f001 fbdf 	bl	800368c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e05c      	b.n	8001f8c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fef3 	bl	8002cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ee6:	f001 fbd1 	bl	800368c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001eea:	f000 fc8d 	bl	8002808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001eee:	f001 fb9b 	bl	8003628 <vPortEnterCritical>
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d103      	bne.n	8001f08 <xQueueGenericSend+0x174>
 8001f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d103      	bne.n	8001f1e <xQueueGenericSend+0x18a>
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f1e:	f001 fbb5 	bl	800368c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f22:	1d3a      	adds	r2, r7, #4
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fee2 	bl	8002cf4 <xTaskCheckForTimeOut>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d124      	bne.n	8001f80 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f38:	f000 fa28 	bl	800238c <prvIsQueueFull>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d018      	beq.n	8001f74 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	3310      	adds	r3, #16
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fe32 	bl	8002bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f52:	f000 f9b3 	bl	80022bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f56:	f000 fc65 	bl	8002824 <xTaskResumeAll>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f af7c 	bne.w	8001e5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <xQueueGenericSend+0x200>)
 8001f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	f3bf 8f4f 	dsb	sy
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	e772      	b.n	8001e5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f76:	f000 f9a1 	bl	80022bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f7a:	f000 fc53 	bl	8002824 <xTaskResumeAll>
 8001f7e:	e76c      	b.n	8001e5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f82:	f000 f99b 	bl	80022bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f86:	f000 fc4d 	bl	8002824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f8a:	2300      	movs	r3, #0
		}
	}
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3738      	adds	r7, #56	; 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <xQueueSemaphoreTake+0x34>
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	b672      	cpsid	i
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	b662      	cpsie	i
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	e7fe      	b.n	8001fca <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <xQueueSemaphoreTake+0x54>
 8001fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd8:	b672      	cpsid	i
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	b662      	cpsie	i
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	e7fe      	b.n	8001fea <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fec:	f000 ffcc 	bl	8002f88 <xTaskGetSchedulerState>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <xQueueSemaphoreTake+0x64>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <xQueueSemaphoreTake+0x68>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <xQueueSemaphoreTake+0x6a>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10b      	bne.n	800201e <xQueueSemaphoreTake+0x86>
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	b672      	cpsid	i
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	b662      	cpsie	i
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	e7fe      	b.n	800201c <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800201e:	f001 fb03 	bl	8003628 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d024      	beq.n	8002078 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800203e:	f001 f971 	bl	8003324 <pvTaskIncrementMutexHeldCount>
 8002042:	4602      	mov	r2, r0
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00f      	beq.n	8002070 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	3310      	adds	r3, #16
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fdd3 	bl	8002c00 <xTaskRemoveFromEventList>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002060:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <xQueueSemaphoreTake+0x21c>)
 8002062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002070:	f001 fb0c 	bl	800368c <vPortExitCritical>
				return pdPASS;
 8002074:	2301      	movs	r3, #1
 8002076:	e098      	b.n	80021aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d112      	bne.n	80020a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <xQueueSemaphoreTake+0x104>
 8002084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002088:	b672      	cpsid	i
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	b662      	cpsie	i
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e7fe      	b.n	800209a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800209c:	f001 faf6 	bl	800368c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e082      	b.n	80021aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fe0a 	bl	8002cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020b4:	2301      	movs	r3, #1
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020b8:	f001 fae8 	bl	800368c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020bc:	f000 fba4 	bl	8002808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020c0:	f001 fab2 	bl	8003628 <vPortEnterCritical>
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d103      	bne.n	80020da <xQueueSemaphoreTake+0x142>
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e6:	d103      	bne.n	80020f0 <xQueueSemaphoreTake+0x158>
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020f0:	f001 facc 	bl	800368c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020f4:	463a      	mov	r2, r7
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fdf9 	bl	8002cf4 <xTaskCheckForTimeOut>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d132      	bne.n	800216e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800210a:	f000 f929 	bl	8002360 <prvIsQueueEmpty>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d026      	beq.n	8002162 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800211c:	f001 fa84 	bl	8003628 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 ff4d 	bl	8002fc4 <xTaskPriorityInherit>
 800212a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800212c:	f001 faae 	bl	800368c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	3324      	adds	r3, #36	; 0x24
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fd3b 	bl	8002bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800213e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002140:	f000 f8bc 	bl	80022bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002144:	f000 fb6e 	bl	8002824 <xTaskResumeAll>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f47f af67 	bne.w	800201e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <xQueueSemaphoreTake+0x21c>)
 8002152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	e75d      	b.n	800201e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002164:	f000 f8aa 	bl	80022bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002168:	f000 fb5c 	bl	8002824 <xTaskResumeAll>
 800216c:	e757      	b.n	800201e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800216e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002170:	f000 f8a4 	bl	80022bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002174:	f000 fb56 	bl	8002824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800217a:	f000 f8f1 	bl	8002360 <prvIsQueueEmpty>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f43f af4c 	beq.w	800201e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800218c:	f001 fa4c 	bl	8003628 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002192:	f000 f811 	bl	80021b8 <prvGetDisinheritPriorityAfterTimeout>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 f81e 	bl	80031e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80021a4:	f001 fa72 	bl	800368c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3738      	adds	r7, #56	; 0x38
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000ed04 	.word	0xe000ed04

080021b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e001      	b.n	80021da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80021da:	68fb      	ldr	r3, [r7, #12]
	}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d14d      	bne.n	80022aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 ff5c 	bl	80030d0 <xTaskPriorityDisinherit>
 8002218:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	e043      	b.n	80022aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d119      	bne.n	800225c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6898      	ldr	r0, [r3, #8]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	461a      	mov	r2, r3
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	f001 ffba 	bl	80041ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	441a      	add	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	d32b      	bcc.n	80022aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	e026      	b.n	80022aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68d8      	ldr	r0, [r3, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	461a      	mov	r2, r3
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	f001 ffa0 	bl	80041ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	425b      	negs	r3, r3
 8002276:	441a      	add	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	425b      	negs	r3, r3
 8002292:	441a      	add	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d105      	bne.n	80022aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022b2:	697b      	ldr	r3, [r7, #20]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022c4:	f001 f9b0 	bl	8003628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022d0:	e011      	b.n	80022f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3324      	adds	r3, #36	; 0x24
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fc8e 	bl	8002c00 <xTaskRemoveFromEventList>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80022ea:	f000 fd67 	bl	8002dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dce9      	bgt.n	80022d2 <prvUnlockQueue+0x16>
 80022fe:	e000      	b.n	8002302 <prvUnlockQueue+0x46>
					break;
 8002300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800230a:	f001 f9bf 	bl	800368c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800230e:	f001 f98b 	bl	8003628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800231a:	e011      	b.n	8002340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3310      	adds	r3, #16
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fc69 	bl	8002c00 <xTaskRemoveFromEventList>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002334:	f000 fd42 	bl	8002dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	3b01      	subs	r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002344:	2b00      	cmp	r3, #0
 8002346:	dce9      	bgt.n	800231c <prvUnlockQueue+0x60>
 8002348:	e000      	b.n	800234c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800234a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	22ff      	movs	r2, #255	; 0xff
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002354:	f001 f99a 	bl	800368c <vPortExitCritical>
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002368:	f001 f95e 	bl	8003628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e001      	b.n	800237e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800237e:	f001 f985 	bl	800368c <vPortExitCritical>

	return xReturn;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002394:	f001 f948 	bl	8003628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d102      	bne.n	80023aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e001      	b.n	80023ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023ae:	f001 f96d 	bl	800368c <vPortExitCritical>

	return xReturn;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08e      	sub	sp, #56	; 0x38
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <xTaskCreateStatic+0x2c>
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	b672      	cpsid	i
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	b662      	cpsie	i
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	e7fe      	b.n	80023e6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10b      	bne.n	8002406 <xTaskCreateStatic+0x4a>
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	b672      	cpsid	i
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	b662      	cpsie	i
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e7fe      	b.n	8002404 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002406:	2354      	movs	r3, #84	; 0x54
 8002408:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b54      	cmp	r3, #84	; 0x54
 800240e:	d00b      	beq.n	8002428 <xTaskCreateStatic+0x6c>
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	b672      	cpsid	i
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	b662      	cpsie	i
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e7fe      	b.n	8002426 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01e      	beq.n	800246c <xTaskCreateStatic+0xb0>
 800242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800243c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2202      	movs	r2, #2
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002446:	2300      	movs	r3, #0
 8002448:	9303      	str	r3, [sp, #12]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f850 	bl	8002504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002466:	f000 f8cd 	bl	8002604 <prvAddNewTaskToReadyList>
 800246a:	e001      	b.n	8002470 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002470:	697b      	ldr	r3, [r7, #20]
	}
 8002472:	4618      	mov	r0, r3
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800247a:	b580      	push	{r7, lr}
 800247c:	b08c      	sub	sp, #48	; 0x30
 800247e:	af04      	add	r7, sp, #16
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f9aa 	bl	80037e8 <pvPortMalloc>
 8002494:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800249c:	2054      	movs	r0, #84	; 0x54
 800249e:	f001 f9a3 	bl	80037e8 <pvPortMalloc>
 80024a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
 80024b0:	e005      	b.n	80024be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f001 fa60 	bl	8003978 <vPortFree>
 80024b8:	e001      	b.n	80024be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d017      	beq.n	80024f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	2300      	movs	r3, #0
 80024d0:	9303      	str	r3, [sp, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f80e 	bl	8002504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024e8:	69f8      	ldr	r0, [r7, #28]
 80024ea:	f000 f88b 	bl	8002604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	e002      	b.n	80024fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
 80024f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024fa:	69bb      	ldr	r3, [r7, #24]
	}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800251c:	440b      	add	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f023 0307 	bic.w	r3, r3, #7
 800252a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <prvInitialiseNewTask+0x4a>
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	b672      	cpsid	i
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	b662      	cpsie	i
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	e7fe      	b.n	800254c <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e012      	b.n	800257a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	7819      	ldrb	r1, [r3, #0]
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	3334      	adds	r3, #52	; 0x34
 8002564:	460a      	mov	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3301      	adds	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d9e9      	bls.n	8002554 <prvInitialiseNewTask+0x50>
 8002580:	e000      	b.n	8002584 <prvInitialiseNewTask+0x80>
		{
			break;
 8002582:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	2b06      	cmp	r3, #6
 8002590:	d901      	bls.n	8002596 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002592:	2306      	movs	r3, #6
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	2200      	movs	r2, #0
 80025a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	3304      	adds	r3, #4
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fa5e 	bl	8001a6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	3318      	adds	r3, #24
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fa59 	bl	8001a6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	f1c3 0207 	rsb	r2, r3, #7
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	2200      	movs	r2, #0
 80025d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	69b8      	ldr	r0, [r7, #24]
 80025e6:	f000 ff17 	bl	8003418 <pxPortInitialiseStack>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025fc:	bf00      	nop
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800260c:	f001 f80c 	bl	8003628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <prvAddNewTaskToReadyList+0xb8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	4a29      	ldr	r2, [pc, #164]	; (80026bc <prvAddNewTaskToReadyList+0xb8>)
 8002618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <prvAddNewTaskToReadyList+0xbc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <prvAddNewTaskToReadyList+0xbc>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <prvAddNewTaskToReadyList+0xb8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d110      	bne.n	8002652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002630:	f000 fbe8 	bl	8002e04 <prvInitialiseTaskLists>
 8002634:	e00d      	b.n	8002652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <prvAddNewTaskToReadyList+0xc0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <prvAddNewTaskToReadyList+0xbc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	429a      	cmp	r2, r3
 800264a:	d802      	bhi.n	8002652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800264c:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <prvAddNewTaskToReadyList+0xbc>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <prvAddNewTaskToReadyList+0xc4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <prvAddNewTaskToReadyList+0xc4>)
 800265a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <prvAddNewTaskToReadyList+0xc8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <prvAddNewTaskToReadyList+0xc8>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <prvAddNewTaskToReadyList+0xcc>)
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff f9ff 	bl	8001a88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800268a:	f000 ffff 	bl	800368c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <prvAddNewTaskToReadyList+0xc0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00e      	beq.n	80026b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <prvAddNewTaskToReadyList+0xbc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <prvAddNewTaskToReadyList+0xd0>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000128 	.word	0x20000128
 80026c0:	20000028 	.word	0x20000028
 80026c4:	20000134 	.word	0x20000134
 80026c8:	20000144 	.word	0x20000144
 80026cc:	20000130 	.word	0x20000130
 80026d0:	2000002c 	.word	0x2000002c
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d018      	beq.n	800271c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <vTaskDelay+0x64>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <vTaskDelay+0x32>
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	b672      	cpsid	i
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	b662      	cpsie	i
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	e7fe      	b.n	8002708 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800270a:	f000 f87d 	bl	8002808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800270e:	2100      	movs	r1, #0
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fe1b 	bl	800334c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002716:	f000 f885 	bl	8002824 <xTaskResumeAll>
 800271a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <vTaskDelay+0x68>)
 8002724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000150 	.word	0x20000150
 8002740:	e000ed04 	.word	0xe000ed04

08002744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002752:	463a      	mov	r2, r7
 8002754:	1d39      	adds	r1, r7, #4
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	4618      	mov	r0, r3
 800275c:	f001 fa24 	bl	8003ba8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	9202      	str	r2, [sp, #8]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2300      	movs	r3, #0
 8002770:	460a      	mov	r2, r1
 8002772:	491f      	ldr	r1, [pc, #124]	; (80027f0 <vTaskStartScheduler+0xac>)
 8002774:	481f      	ldr	r0, [pc, #124]	; (80027f4 <vTaskStartScheduler+0xb0>)
 8002776:	f7ff fe21 	bl	80023bc <xTaskCreateStatic>
 800277a:	4602      	mov	r2, r0
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <vTaskStartScheduler+0xb4>)
 800277e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <vTaskStartScheduler+0xb4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002788:	2301      	movs	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e001      	b.n	8002792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d117      	bne.n	80027c8 <vTaskStartScheduler+0x84>
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	b672      	cpsid	i
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	b662      	cpsie	i
 80027ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <vTaskStartScheduler+0xb8>)
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <vTaskStartScheduler+0xbc>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <vTaskStartScheduler+0xc0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027c2:	f000 feb5 	bl	8003530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027c6:	e00f      	b.n	80027e8 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d10b      	bne.n	80027e8 <vTaskStartScheduler+0xa4>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	b672      	cpsid	i
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	b662      	cpsie	i
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e7fe      	b.n	80027e6 <vTaskStartScheduler+0xa2>
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	080041ec 	.word	0x080041ec
 80027f4:	08002dd5 	.word	0x08002dd5
 80027f8:	2000014c 	.word	0x2000014c
 80027fc:	20000148 	.word	0x20000148
 8002800:	20000134 	.word	0x20000134
 8002804:	2000012c 	.word	0x2000012c

08002808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <vTaskSuspendAll+0x18>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	4a03      	ldr	r2, [pc, #12]	; (8002820 <vTaskSuspendAll+0x18>)
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000150 	.word	0x20000150

08002824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002832:	4b42      	ldr	r3, [pc, #264]	; (800293c <xTaskResumeAll+0x118>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <xTaskResumeAll+0x2e>
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	b672      	cpsid	i
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	b662      	cpsie	i
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	e7fe      	b.n	8002850 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002852:	f000 fee9 	bl	8003628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <xTaskResumeAll+0x118>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3b01      	subs	r3, #1
 800285c:	4a37      	ldr	r2, [pc, #220]	; (800293c <xTaskResumeAll+0x118>)
 800285e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <xTaskResumeAll+0x118>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d161      	bne.n	800292c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <xTaskResumeAll+0x11c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05d      	beq.n	800292c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002870:	e02e      	b.n	80028d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002872:	4b34      	ldr	r3, [pc, #208]	; (8002944 <xTaskResumeAll+0x120>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3318      	adds	r3, #24
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f95f 	bl	8001b42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3304      	adds	r3, #4
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f95a 	bl	8001b42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <xTaskResumeAll+0x124>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <xTaskResumeAll+0x124>)
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <xTaskResumeAll+0x128>)
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f7ff f8e6 	bl	8001a88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	4b23      	ldr	r3, [pc, #140]	; (8002950 <xTaskResumeAll+0x12c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <xTaskResumeAll+0x130>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <xTaskResumeAll+0x120>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1cc      	bne.n	8002872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80028de:	f000 fb2d 	bl	8002f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <xTaskResumeAll+0x134>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80028ee:	f000 f847 	bl	8002980 <xTaskIncrementTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <xTaskResumeAll+0x130>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3b01      	subs	r3, #1
 8002902:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f1      	bne.n	80028ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <xTaskResumeAll+0x134>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <xTaskResumeAll+0x130>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <xTaskResumeAll+0x138>)
 800291e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800292c:	f000 feae 	bl	800368c <vPortExitCritical>

	return xAlreadyYielded;
 8002930:	68bb      	ldr	r3, [r7, #8]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000150 	.word	0x20000150
 8002940:	20000128 	.word	0x20000128
 8002944:	200000e8 	.word	0x200000e8
 8002948:	20000130 	.word	0x20000130
 800294c:	2000002c 	.word	0x2000002c
 8002950:	20000028 	.word	0x20000028
 8002954:	2000013c 	.word	0x2000013c
 8002958:	20000138 	.word	0x20000138
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <xTaskGetTickCount+0x1c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800296c:	687b      	ldr	r3, [r7, #4]
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	2000012c 	.word	0x2000012c

08002980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <xTaskIncrementTick+0x150>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 808e 	bne.w	8002ab0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002994:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <xTaskIncrementTick+0x154>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800299c:	4a4d      	ldr	r2, [pc, #308]	; (8002ad4 <xTaskIncrementTick+0x154>)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d121      	bne.n	80029ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80029a8:	4b4b      	ldr	r3, [pc, #300]	; (8002ad8 <xTaskIncrementTick+0x158>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <xTaskIncrementTick+0x4a>
 80029b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b6:	b672      	cpsid	i
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	b662      	cpsie	i
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	e7fe      	b.n	80029c8 <xTaskIncrementTick+0x48>
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <xTaskIncrementTick+0x158>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <xTaskIncrementTick+0x15c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <xTaskIncrementTick+0x158>)
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4a40      	ldr	r2, [pc, #256]	; (8002adc <xTaskIncrementTick+0x15c>)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <xTaskIncrementTick+0x160>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a3e      	ldr	r2, [pc, #248]	; (8002ae0 <xTaskIncrementTick+0x160>)
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	f000 faa8 	bl	8002f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029ec:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <xTaskIncrementTick+0x164>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d34d      	bcc.n	8002a92 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <xTaskIncrementTick+0x158>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <xTaskIncrementTick+0x84>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <xTaskIncrementTick+0x86>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <xTaskIncrementTick+0x164>)
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	601a      	str	r2, [r3, #0]
					break;
 8002a12:	e03e      	b.n	8002a92 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <xTaskIncrementTick+0x158>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d203      	bcs.n	8002a34 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <xTaskIncrementTick+0x164>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
						break;
 8002a32:	e02e      	b.n	8002a92 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f882 	bl	8001b42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3318      	adds	r3, #24
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f879 	bl	8001b42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <xTaskIncrementTick+0x168>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <xTaskIncrementTick+0x168>)
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <xTaskIncrementTick+0x16c>)
 8002a70:	441a      	add	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7ff f805 	bl	8001a88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <xTaskIncrementTick+0x170>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3b4      	bcc.n	80029f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a90:	e7b1      	b.n	80029f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <xTaskIncrementTick+0x170>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	4914      	ldr	r1, [pc, #80]	; (8002aec <xTaskIncrementTick+0x16c>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d907      	bls.n	8002aba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e004      	b.n	8002aba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <xTaskIncrementTick+0x174>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <xTaskIncrementTick+0x174>)
 8002ab8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <xTaskIncrementTick+0x178>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ac6:	697b      	ldr	r3, [r7, #20]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000150 	.word	0x20000150
 8002ad4:	2000012c 	.word	0x2000012c
 8002ad8:	200000e0 	.word	0x200000e0
 8002adc:	200000e4 	.word	0x200000e4
 8002ae0:	20000140 	.word	0x20000140
 8002ae4:	20000148 	.word	0x20000148
 8002ae8:	20000130 	.word	0x20000130
 8002aec:	2000002c 	.word	0x2000002c
 8002af0:	20000028 	.word	0x20000028
 8002af4:	20000138 	.word	0x20000138
 8002af8:	2000013c 	.word	0x2000013c

08002afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b02:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <vTaskSwitchContext+0xa4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <vTaskSwitchContext+0xa8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b10:	e040      	b.n	8002b94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <vTaskSwitchContext+0xa8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <vTaskSwitchContext+0xac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b26:	7afb      	ldrb	r3, [r7, #11]
 8002b28:	f1c3 031f 	rsb	r3, r3, #31
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	491f      	ldr	r1, [pc, #124]	; (8002bac <vTaskSwitchContext+0xb0>)
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	b672      	cpsid	i
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	b662      	cpsie	i
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	e7fe      	b.n	8002b58 <vTaskSwitchContext+0x5c>
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <vTaskSwitchContext+0xb0>)
 8002b66:	4413      	add	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d104      	bne.n	8002b8a <vTaskSwitchContext+0x8e>
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <vTaskSwitchContext+0xb4>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000150 	.word	0x20000150
 8002ba4:	2000013c 	.word	0x2000013c
 8002ba8:	20000130 	.word	0x20000130
 8002bac:	2000002c 	.word	0x2000002c
 8002bb0:	20000028 	.word	0x20000028

08002bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <vTaskPlaceOnEventList+0x28>
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	b672      	cpsid	i
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	b662      	cpsie	i
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e7fe      	b.n	8002bda <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <vTaskPlaceOnEventList+0x48>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3318      	adds	r3, #24
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe ff73 	bl	8001ad0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bea:	2101      	movs	r1, #1
 8002bec:	6838      	ldr	r0, [r7, #0]
 8002bee:	f000 fbad 	bl	800334c <prvAddCurrentTaskToDelayedList>
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000028 	.word	0x20000028

08002c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <xTaskRemoveFromEventList+0x2e>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	b672      	cpsid	i
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	b662      	cpsie	i
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e7fe      	b.n	8002c2c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3318      	adds	r3, #24
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe ff85 	bl	8001b42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <xTaskRemoveFromEventList+0xb0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d11c      	bne.n	8002c7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe ff7c 	bl	8001b42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	2201      	movs	r2, #1
 8002c50:	409a      	lsls	r2, r3
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <xTaskRemoveFromEventList+0xb4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <xTaskRemoveFromEventList+0xb4>)
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <xTaskRemoveFromEventList+0xb8>)
 8002c6a:	441a      	add	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe ff08 	bl	8001a88 <vListInsertEnd>
 8002c78:	e005      	b.n	8002c86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	3318      	adds	r3, #24
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480e      	ldr	r0, [pc, #56]	; (8002cbc <xTaskRemoveFromEventList+0xbc>)
 8002c82:	f7fe ff01 	bl	8001a88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <xTaskRemoveFromEventList+0xc0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d905      	bls.n	8002ca0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <xTaskRemoveFromEventList+0xc4>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e001      	b.n	8002ca4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002ca4:	697b      	ldr	r3, [r7, #20]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000150 	.word	0x20000150
 8002cb4:	20000130 	.word	0x20000130
 8002cb8:	2000002c 	.word	0x2000002c
 8002cbc:	200000e8 	.word	0x200000e8
 8002cc0:	20000028 	.word	0x20000028
 8002cc4:	2000013c 	.word	0x2000013c

08002cc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <vTaskInternalSetTimeOutState+0x24>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <vTaskInternalSetTimeOutState+0x28>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	605a      	str	r2, [r3, #4]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20000140 	.word	0x20000140
 8002cf0:	2000012c 	.word	0x2000012c

08002cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <xTaskCheckForTimeOut+0x28>
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	b672      	cpsid	i
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	b662      	cpsie	i
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e7fe      	b.n	8002d1a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <xTaskCheckForTimeOut+0x46>
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	b672      	cpsid	i
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	b662      	cpsie	i
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e7fe      	b.n	8002d38 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8002d3a:	f000 fc75 	bl	8003628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <xTaskCheckForTimeOut+0xc0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d102      	bne.n	8002d5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	e023      	b.n	8002da6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <xTaskCheckForTimeOut+0xc4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d007      	beq.n	8002d7a <xTaskCheckForTimeOut+0x86>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d302      	bcc.n	8002d7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	e015      	b.n	8002da6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d20b      	bcs.n	8002d9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff99 	bl	8002cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e004      	b.n	8002da6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002da6:	f000 fc71 	bl	800368c <vPortExitCritical>

	return xReturn;
 8002daa:	69fb      	ldr	r3, [r7, #28]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000012c 	.word	0x2000012c
 8002db8:	20000140 	.word	0x20000140

08002dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <vTaskMissedYield+0x14>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	2000013c 	.word	0x2000013c

08002dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ddc:	f000 f852 	bl	8002e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <prvIdleTask+0x28>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d9f9      	bls.n	8002ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <prvIdleTask+0x2c>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002df8:	e7f0      	b.n	8002ddc <prvIdleTask+0x8>
 8002dfa:	bf00      	nop
 8002dfc:	2000002c 	.word	0x2000002c
 8002e00:	e000ed04 	.word	0xe000ed04

08002e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	e00c      	b.n	8002e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <prvInitialiseTaskLists+0x60>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fe05 	bl	8001a2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3301      	adds	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d9ef      	bls.n	8002e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e30:	480d      	ldr	r0, [pc, #52]	; (8002e68 <prvInitialiseTaskLists+0x64>)
 8002e32:	f7fe fdfc 	bl	8001a2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e36:	480d      	ldr	r0, [pc, #52]	; (8002e6c <prvInitialiseTaskLists+0x68>)
 8002e38:	f7fe fdf9 	bl	8001a2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e3c:	480c      	ldr	r0, [pc, #48]	; (8002e70 <prvInitialiseTaskLists+0x6c>)
 8002e3e:	f7fe fdf6 	bl	8001a2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <prvInitialiseTaskLists+0x70>)
 8002e44:	f7fe fdf3 	bl	8001a2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <prvInitialiseTaskLists+0x74>)
 8002e4a:	f7fe fdf0 	bl	8001a2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <prvInitialiseTaskLists+0x78>)
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <prvInitialiseTaskLists+0x64>)
 8002e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <prvInitialiseTaskLists+0x7c>)
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <prvInitialiseTaskLists+0x68>)
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000002c 	.word	0x2000002c
 8002e68:	200000b8 	.word	0x200000b8
 8002e6c:	200000cc 	.word	0x200000cc
 8002e70:	200000e8 	.word	0x200000e8
 8002e74:	200000fc 	.word	0x200000fc
 8002e78:	20000114 	.word	0x20000114
 8002e7c:	200000e0 	.word	0x200000e0
 8002e80:	200000e4 	.word	0x200000e4

08002e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e8a:	e019      	b.n	8002ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e8c:	f000 fbcc 	bl	8003628 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <prvCheckTasksWaitingTermination+0x4c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fe50 	bl	8001b42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <prvCheckTasksWaitingTermination+0x50>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <prvCheckTasksWaitingTermination+0x50>)
 8002eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <prvCheckTasksWaitingTermination+0x54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <prvCheckTasksWaitingTermination+0x54>)
 8002eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002eb6:	f000 fbe9 	bl	800368c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f80e 	bl	8002edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <prvCheckTasksWaitingTermination+0x54>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e1      	bne.n	8002e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	200000fc 	.word	0x200000fc
 8002ed4:	20000128 	.word	0x20000128
 8002ed8:	20000110 	.word	0x20000110

08002edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fd40 	bl	8003978 <vPortFree>
				vPortFree( pxTCB );
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fd3d 	bl	8003978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002efe:	e019      	b.n	8002f34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d103      	bne.n	8002f12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fd34 	bl	8003978 <vPortFree>
	}
 8002f10:	e010      	b.n	8002f34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d00b      	beq.n	8002f34 <prvDeleteTCB+0x58>
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	b672      	cpsid	i
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	b662      	cpsie	i
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e7fe      	b.n	8002f32 <prvDeleteTCB+0x56>
	}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <prvResetNextTaskUnblockTime+0x44>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <prvResetNextTaskUnblockTime+0x14>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <prvResetNextTaskUnblockTime+0x16>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <prvResetNextTaskUnblockTime+0x48>)
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f5e:	e008      	b.n	8002f72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <prvResetNextTaskUnblockTime+0x44>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <prvResetNextTaskUnblockTime+0x48>)
 8002f70:	6013      	str	r3, [r2, #0]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	200000e0 	.word	0x200000e0
 8002f84:	20000148 	.word	0x20000148

08002f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <xTaskGetSchedulerState+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002f96:	2301      	movs	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	e008      	b.n	8002fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <xTaskGetSchedulerState+0x38>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	e001      	b.n	8002fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002fae:	687b      	ldr	r3, [r7, #4]
	}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	20000134 	.word	0x20000134
 8002fc0:	20000150 	.word	0x20000150

08002fc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d06e      	beq.n	80030b8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <xTaskPriorityInherit+0x100>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d25e      	bcs.n	80030a6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	db06      	blt.n	8002ffe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff0:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <xTaskPriorityInherit+0x100>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f1c3 0207 	rsb	r2, r3, #7
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6959      	ldr	r1, [r3, #20]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4a2e      	ldr	r2, [pc, #184]	; (80030c8 <xTaskPriorityInherit+0x104>)
 8003010:	4413      	add	r3, r2
 8003012:	4299      	cmp	r1, r3
 8003014:	d101      	bne.n	800301a <xTaskPriorityInherit+0x56>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <xTaskPriorityInherit+0x58>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d03a      	beq.n	8003096 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3304      	adds	r3, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fd8c 	bl	8001b42 <uxListRemove>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	4924      	ldr	r1, [pc, #144]	; (80030c8 <xTaskPriorityInherit+0x104>)
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <xTaskPriorityInherit+0x98>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	2201      	movs	r2, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43da      	mvns	r2, r3
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <xTaskPriorityInherit+0x108>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4013      	ands	r3, r2
 8003058:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <xTaskPriorityInherit+0x108>)
 800305a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <xTaskPriorityInherit+0x100>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	2201      	movs	r2, #1
 800306c:	409a      	lsls	r2, r3
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <xTaskPriorityInherit+0x108>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <xTaskPriorityInherit+0x108>)
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <xTaskPriorityInherit+0x104>)
 8003086:	441a      	add	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fe fcfa 	bl	8001a88 <vListInsertEnd>
 8003094:	e004      	b.n	80030a0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <xTaskPriorityInherit+0x100>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e008      	b.n	80030b8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <xTaskPriorityInherit+0x100>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d201      	bcs.n	80030b8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80030b8:	68fb      	ldr	r3, [r7, #12]
	}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000028 	.word	0x20000028
 80030c8:	2000002c 	.word	0x2000002c
 80030cc:	20000130 	.word	0x20000130

080030d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d070      	beq.n	80031c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <xTaskPriorityDisinherit+0x104>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d00b      	beq.n	8003108 <xTaskPriorityDisinherit+0x38>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	b672      	cpsid	i
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	b662      	cpsie	i
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e7fe      	b.n	8003106 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10b      	bne.n	8003128 <xTaskPriorityDisinherit+0x58>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	b672      	cpsid	i
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	b662      	cpsie	i
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	e7fe      	b.n	8003126 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	429a      	cmp	r2, r3
 800313c:	d044      	beq.n	80031c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	2b00      	cmp	r3, #0
 8003144:	d140      	bne.n	80031c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	3304      	adds	r3, #4
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fcf9 	bl	8001b42 <uxListRemove>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	491f      	ldr	r1, [pc, #124]	; (80031d8 <xTaskPriorityDisinherit+0x108>)
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xTaskPriorityDisinherit+0xb2>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <xTaskPriorityDisinherit+0x10c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4013      	ands	r3, r2
 800317e:	4a17      	ldr	r2, [pc, #92]	; (80031dc <xTaskPriorityDisinherit+0x10c>)
 8003180:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f1c3 0207 	rsb	r2, r3, #7
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	2201      	movs	r2, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <xTaskPriorityDisinherit+0x10c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <xTaskPriorityDisinherit+0x10c>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <xTaskPriorityDisinherit+0x108>)
 80031b6:	441a      	add	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe fc62 	bl	8001a88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031c8:	697b      	ldr	r3, [r7, #20]
	}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000028 	.word	0x20000028
 80031d8:	2000002c 	.word	0x2000002c
 80031dc:	20000130 	.word	0x20000130

080031e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 808a 	beq.w	800330e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	b672      	cpsid	i
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	b662      	cpsie	i
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e7fe      	b.n	8003218 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d902      	bls.n	800322a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	e002      	b.n	8003230 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	429a      	cmp	r2, r3
 8003238:	d069      	beq.n	800330e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	d164      	bne.n	800330e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003244:	4b34      	ldr	r3, [pc, #208]	; (8003318 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	429a      	cmp	r2, r3
 800324c:	d10b      	bne.n	8003266 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	b672      	cpsid	i
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	b662      	cpsie	i
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	e7fe      	b.n	8003264 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db04      	blt.n	8003284 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f1c3 0207 	rsb	r2, r3, #7
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6959      	ldr	r1, [r3, #20]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4a22      	ldr	r2, [pc, #136]	; (800331c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003294:	4413      	add	r3, r2
 8003296:	4299      	cmp	r1, r3
 8003298:	d101      	bne.n	800329e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d034      	beq.n	800330e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fc4a 	bl	8001b42 <uxListRemove>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d115      	bne.n	80032e0 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	4918      	ldr	r1, [pc, #96]	; (800331c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43da      	mvns	r2, r3
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4013      	ands	r3, r2
 80032dc:	4a10      	ldr	r2, [pc, #64]	; (8003320 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80032de:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003300:	441a      	add	r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7fe fbbd 	bl	8001a88 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000028 	.word	0x20000028
 800331c:	2000002c 	.word	0x2000002c
 8003320:	20000130 	.word	0x20000130

08003324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <pvTaskIncrementMutexHeldCount+0x24>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <pvTaskIncrementMutexHeldCount+0x24>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003336:	3201      	adds	r2, #1
 8003338:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800333a:	4b03      	ldr	r3, [pc, #12]	; (8003348 <pvTaskIncrementMutexHeldCount+0x24>)
 800333c:	681b      	ldr	r3, [r3, #0]
	}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000028 	.word	0x20000028

0800334c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fbed 	bl	8001b42 <uxListRemove>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	2201      	movs	r2, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4013      	ands	r3, r2
 8003382:	4a20      	ldr	r2, [pc, #128]	; (8003404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d10a      	bne.n	80033a4 <prvAddCurrentTaskToDelayedList+0x58>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	481a      	ldr	r0, [pc, #104]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800339e:	f7fe fb73 	bl	8001a88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033a2:	e026      	b.n	80033f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d209      	bcs.n	80033d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <prvAddCurrentTaskToDelayedList+0xc0>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7fe fb81 	bl	8001ad0 <vListInsert>
}
 80033ce:	e010      	b.n	80033f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fe fb77 	bl	8001ad0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d202      	bcs.n	80033f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6013      	str	r3, [r2, #0]
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000012c 	.word	0x2000012c
 8003400:	20000028 	.word	0x20000028
 8003404:	20000130 	.word	0x20000130
 8003408:	20000114 	.word	0x20000114
 800340c:	200000e4 	.word	0x200000e4
 8003410:	200000e0 	.word	0x200000e0
 8003414:	20000148 	.word	0x20000148

08003418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b04      	subs	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b04      	subs	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b04      	subs	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <pxPortInitialiseStack+0x64>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3b14      	subs	r3, #20
 8003452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3b04      	subs	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f06f 0202 	mvn.w	r2, #2
 8003466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b20      	subs	r3, #32
 800346c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	08003481 	.word	0x08003481

08003480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <prvTaskExitError+0x58>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d00b      	beq.n	80034ac <prvTaskExitError+0x2c>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	b672      	cpsid	i
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	b662      	cpsie	i
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e7fe      	b.n	80034aa <prvTaskExitError+0x2a>
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	b672      	cpsid	i
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	b662      	cpsie	i
 80034c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034c2:	bf00      	nop
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0fc      	beq.n	80034c4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000004 	.word	0x20000004
 80034dc:	00000000 	.word	0x00000000

080034e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <pxCurrentTCBConst2>)
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	f380 8809 	msr	PSP, r0
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8811 	msr	BASEPRI, r0
 80034fa:	4770      	bx	lr
 80034fc:	f3af 8000 	nop.w

08003500 <pxCurrentTCBConst2>:
 8003500:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop

08003508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <prvPortStartFirstTask+0x24>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f380 8808 	msr	MSP, r0
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f380 8814 	msr	CONTROL, r0
 800351a:	b662      	cpsie	i
 800351c:	b661      	cpsie	f
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	df00      	svc	0
 8003528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800352a:	bf00      	nop
 800352c:	e000ed08 	.word	0xe000ed08

08003530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <xPortStartScheduler+0xe0>)
 8003538:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <xPortStartScheduler+0xe4>)
 800355c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <xPortStartScheduler+0xe8>)
 8003560:	2207      	movs	r2, #7
 8003562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003564:	e009      	b.n	800357a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <xPortStartScheduler+0xe8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3b01      	subs	r3, #1
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <xPortStartScheduler+0xe8>)
 800356e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d0ef      	beq.n	8003566 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <xPortStartScheduler+0xe8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1c3 0307 	rsb	r3, r3, #7
 800358e:	2b04      	cmp	r3, #4
 8003590:	d00b      	beq.n	80035aa <xPortStartScheduler+0x7a>
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	b672      	cpsid	i
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	b662      	cpsie	i
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	e7fe      	b.n	80035a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <xPortStartScheduler+0xe8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <xPortStartScheduler+0xe8>)
 80035b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035b4:	4b18      	ldr	r3, [pc, #96]	; (8003618 <xPortStartScheduler+0xe8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <xPortStartScheduler+0xe8>)
 80035be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <xPortStartScheduler+0xec>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a13      	ldr	r2, [pc, #76]	; (800361c <xPortStartScheduler+0xec>)
 80035ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <xPortStartScheduler+0xec>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a10      	ldr	r2, [pc, #64]	; (800361c <xPortStartScheduler+0xec>)
 80035da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035e0:	f000 f8d4 	bl	800378c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <xPortStartScheduler+0xf0>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035ea:	f000 f8f3 	bl	80037d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <xPortStartScheduler+0xf4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <xPortStartScheduler+0xf4>)
 80035f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035fa:	f7ff ff85 	bl	8003508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035fe:	f7ff fa7d 	bl	8002afc <vTaskSwitchContext>
	prvTaskExitError();
 8003602:	f7ff ff3d 	bl	8003480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	e000e400 	.word	0xe000e400
 8003614:	20000154 	.word	0x20000154
 8003618:	20000158 	.word	0x20000158
 800361c:	e000ed20 	.word	0xe000ed20
 8003620:	20000004 	.word	0x20000004
 8003624:	e000ef34 	.word	0xe000ef34

08003628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	b672      	cpsid	i
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	b662      	cpsie	i
 8003642:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <vPortEnterCritical+0x5c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <vPortEnterCritical+0x5c>)
 800364c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <vPortEnterCritical+0x5c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d110      	bne.n	8003678 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <vPortEnterCritical+0x60>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <vPortEnterCritical+0x50>
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	b672      	cpsid	i
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	b662      	cpsie	i
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	e7fe      	b.n	8003676 <vPortEnterCritical+0x4e>
	}
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20000004 	.word	0x20000004
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <vPortExitCritical+0x50>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <vPortExitCritical+0x26>
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	b672      	cpsid	i
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	b662      	cpsie	i
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	e7fe      	b.n	80036b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <vPortExitCritical+0x50>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <vPortExitCritical+0x50>)
 80036ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <vPortExitCritical+0x50>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <vPortExitCritical+0x42>
 80036c4:	2300      	movs	r3, #0
 80036c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000004 	.word	0x20000004

080036e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036e0:	f3ef 8009 	mrs	r0, PSP
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <pxCurrentTCBConst>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f01e 0f10 	tst.w	lr, #16
 80036f0:	bf08      	it	eq
 80036f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003704:	b672      	cpsid	i
 8003706:	f380 8811 	msr	BASEPRI, r0
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	b662      	cpsie	i
 8003714:	f7ff f9f2 	bl	8002afc <vTaskSwitchContext>
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f380 8811 	msr	BASEPRI, r0
 8003720:	bc09      	pop	{r0, r3}
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	6808      	ldr	r0, [r1, #0]
 8003726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	f01e 0f10 	tst.w	lr, #16
 800372e:	bf08      	it	eq
 8003730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003734:	f380 8809 	msr	PSP, r0
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <pxCurrentTCBConst>:
 8003740:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop

08003748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	b672      	cpsid	i
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	b662      	cpsie	i
 8003762:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003764:	f7ff f90c 	bl	8002980 <xTaskIncrementTick>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <SysTick_Handler+0x40>)
 8003770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	603b      	str	r3, [r7, #0]
	__asm volatile
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <vPortSetupTimerInterrupt+0x34>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <vPortSetupTimerInterrupt+0x38>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <vPortSetupTimerInterrupt+0x3c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <vPortSetupTimerInterrupt+0x40>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <vPortSetupTimerInterrupt+0x44>)
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <vPortSetupTimerInterrupt+0x34>)
 80037b0:	2207      	movs	r2, #7
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e010 	.word	0xe000e010
 80037c4:	e000e018 	.word	0xe000e018
 80037c8:	20000008 	.word	0x20000008
 80037cc:	10624dd3 	.word	0x10624dd3
 80037d0:	e000e014 	.word	0xe000e014

080037d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037e4 <vPortEnableVFP+0x10>
 80037d8:	6801      	ldr	r1, [r0, #0]
 80037da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037de:	6001      	str	r1, [r0, #0]
 80037e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037e2:	bf00      	nop
 80037e4:	e000ed88 	.word	0xe000ed88

080037e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037f4:	f7ff f808 	bl	8002808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037f8:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <pvPortMalloc+0x17c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003800:	f000 f916 	bl	8003a30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003804:	4b58      	ldr	r3, [pc, #352]	; (8003968 <pvPortMalloc+0x180>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 8090 	bne.w	8003932 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01e      	beq.n	8003856 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003818:	2208      	movs	r2, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	3308      	adds	r3, #8
 8003832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <pvPortMalloc+0x6e>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	b672      	cpsid	i
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	b662      	cpsie	i
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e7fe      	b.n	8003854 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d06a      	beq.n	8003932 <pvPortMalloc+0x14a>
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <pvPortMalloc+0x184>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d865      	bhi.n	8003932 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003866:	4b42      	ldr	r3, [pc, #264]	; (8003970 <pvPortMalloc+0x188>)
 8003868:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <pvPortMalloc+0x188>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003870:	e004      	b.n	800387c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d903      	bls.n	800388e <pvPortMalloc+0xa6>
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f1      	bne.n	8003872 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800388e:	4b35      	ldr	r3, [pc, #212]	; (8003964 <pvPortMalloc+0x17c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	429a      	cmp	r2, r3
 8003896:	d04c      	beq.n	8003932 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	4413      	add	r3, r2
 80038a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	1ad2      	subs	r2, r2, r3
 80038b2:	2308      	movs	r3, #8
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d920      	bls.n	80038fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <pvPortMalloc+0xfc>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	b672      	cpsid	i
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	b662      	cpsie	i
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e7fe      	b.n	80038e2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038f6:	69b8      	ldr	r0, [r7, #24]
 80038f8:	f000 f8fc 	bl	8003af4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <pvPortMalloc+0x184>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	4a19      	ldr	r2, [pc, #100]	; (800396c <pvPortMalloc+0x184>)
 8003908:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <pvPortMalloc+0x184>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <pvPortMalloc+0x18c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d203      	bcs.n	800391e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <pvPortMalloc+0x184>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a16      	ldr	r2, [pc, #88]	; (8003974 <pvPortMalloc+0x18c>)
 800391c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <pvPortMalloc+0x180>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	431a      	orrs	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003932:	f7fe ff77 	bl	8002824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <pvPortMalloc+0x170>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	b672      	cpsid	i
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	b662      	cpsie	i
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e7fe      	b.n	8003956 <pvPortMalloc+0x16e>
	return pvReturn;
 8003958:	69fb      	ldr	r3, [r7, #28]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3728      	adds	r7, #40	; 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20003d64 	.word	0x20003d64
 8003968:	20003d70 	.word	0x20003d70
 800396c:	20003d68 	.word	0x20003d68
 8003970:	20003d5c 	.word	0x20003d5c
 8003974:	20003d6c 	.word	0x20003d6c

08003978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04a      	beq.n	8003a20 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800398a:	2308      	movs	r3, #8
 800398c:	425b      	negs	r3, r3
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <vPortFree+0xb0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <vPortFree+0x46>
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	b672      	cpsid	i
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	b662      	cpsie	i
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	e7fe      	b.n	80039bc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <vPortFree+0x66>
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	b672      	cpsid	i
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	b662      	cpsie	i
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	e7fe      	b.n	80039dc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <vPortFree+0xb0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d019      	beq.n	8003a20 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d115      	bne.n	8003a20 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <vPortFree+0xb0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a04:	f7fe ff00 	bl	8002808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <vPortFree+0xb4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	4a06      	ldr	r2, [pc, #24]	; (8003a2c <vPortFree+0xb4>)
 8003a14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a16:	6938      	ldr	r0, [r7, #16]
 8003a18:	f000 f86c 	bl	8003af4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a1c:	f7fe ff02 	bl	8002824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20003d70 	.word	0x20003d70
 8003a2c:	20003d68 	.word	0x20003d68

08003a30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003a3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <prvHeapInit+0xac>)
 8003a3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3307      	adds	r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <prvHeapInit+0xac>)
 8003a60:	4413      	add	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a68:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <prvHeapInit+0xb0>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <prvHeapInit+0xb0>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	4413      	add	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <prvHeapInit+0xb4>)
 8003a90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <prvHeapInit+0xb4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <prvHeapInit+0xb4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <prvHeapInit+0xb4>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <prvHeapInit+0xb8>)
 8003abe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <prvHeapInit+0xbc>)
 8003ac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <prvHeapInit+0xc0>)
 8003aca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	2000015c 	.word	0x2000015c
 8003ae0:	20003d5c 	.word	0x20003d5c
 8003ae4:	20003d64 	.word	0x20003d64
 8003ae8:	20003d6c 	.word	0x20003d6c
 8003aec:	20003d68 	.word	0x20003d68
 8003af0:	20003d70 	.word	0x20003d70

08003af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <prvInsertBlockIntoFreeList+0xac>)
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	e002      	b.n	8003b08 <prvInsertBlockIntoFreeList+0x14>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d8f7      	bhi.n	8003b02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d108      	bne.n	8003b36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	441a      	add	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d118      	bne.n	8003b7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d00d      	beq.n	8003b72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e008      	b.n	8003b84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e003      	b.n	8003b84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d002      	beq.n	8003b92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20003d5c 	.word	0x20003d5c
 8003ba4:	20003d64 	.word	0x20003d64

08003ba8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <vApplicationGetIdleTaskMemory+0x30>)
 8003bbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20003d74 	.word	0x20003d74
 8003bd8:	20003dc8 	.word	0x20003dc8

08003bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bdc:	b5b0      	push	{r4, r5, r7, lr}
 8003bde:	b096      	sub	sp, #88	; 0x58
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003be2:	f7fc fcad 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003be6:	f000 f869 	bl	8003cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bea:	f000 f8c3 	bl	8003d74 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of barrierSem */
  barrierSemHandle = xSemaphoreCreateCounting(2,0);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f7fe f899 	bl	8001d28 <xQueueCreateCountingSemaphore>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <main+0xbc>)
 8003bfa:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ToggleRed */

  n++;
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <main+0xc0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <main+0xc0>)
 8003c04:	6013      	str	r3, [r2, #0]
  osThreadDef(ToggleRed, StartToggleRed, osPriorityNormal, 0, 128);
 8003c06:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <main+0xc4>)
 8003c08:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToggleRedHandle = osThreadCreate(osThread(ToggleRed), NULL);
 8003c1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd fea4 	bl	800196e <osThreadCreate>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <main+0xc8>)
 8003c2a:	601a      	str	r2, [r3, #0]

  /* definition and creation of ToggleBlue */
  n++;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <main+0xc0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <main+0xc0>)
 8003c34:	6013      	str	r3, [r2, #0]
  osThreadDef(ToggleBlue, StartToggleBlue, osPriorityNormal, 0, 128);
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <main+0xcc>)
 8003c38:	f107 0420 	add.w	r4, r7, #32
 8003c3c:	461d      	mov	r5, r3
 8003c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToggleBlueHandle = osThreadCreate(osThread(ToggleBlue), NULL);
 8003c4a:	f107 0320 	add.w	r3, r7, #32
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fe8c 	bl	800196e <osThreadCreate>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b14      	ldr	r3, [pc, #80]	; (8003cac <main+0xd0>)
 8003c5a:	601a      	str	r2, [r3, #0]

  /* definition and creation of ToggleGreen */
  n++;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <main+0xc0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <main+0xc0>)
 8003c64:	6013      	str	r3, [r2, #0]
  osThreadDef(ToggleGreen, StartToggleGreen, osPriorityNormal, 0, 128);
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <main+0xd4>)
 8003c68:	1d3c      	adds	r4, r7, #4
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ToggleGreenHandle = osThreadCreate(osThread(ToggleGreen), NULL);
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fd fe76 	bl	800196e <osThreadCreate>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <main+0xd8>)
 8003c86:	601a      	str	r2, [r3, #0]

  count = n;
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <main+0xc0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <main+0xdc>)
 8003c8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003c90:	f7fd fe66 	bl	8001960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <main+0xb8>
 8003c96:	bf00      	nop
 8003c98:	20003fe0 	.word	0x20003fe0
 8003c9c:	20003fc8 	.word	0x20003fc8
 8003ca0:	08004200 	.word	0x08004200
 8003ca4:	20003fd8 	.word	0x20003fd8
 8003ca8:	08004228 	.word	0x08004228
 8003cac:	20003fd4 	.word	0x20003fd4
 8003cb0:	08004250 	.word	0x08004250
 8003cb4:	20003fdc 	.word	0x20003fdc
 8003cb8:	20003fcc 	.word	0x20003fcc

08003cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b094      	sub	sp, #80	; 0x50
 8003cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cc2:	f107 031c 	add.w	r3, r7, #28
 8003cc6:	2234      	movs	r2, #52	; 0x34
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa79 	bl	80041c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <SystemClock_Config+0xb0>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <SystemClock_Config+0xb0>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6413      	str	r3, [r2, #64]	; 0x40
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <SystemClock_Config+0xb0>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <SystemClock_Config+0xb4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <SystemClock_Config+0xb4>)
 8003d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <SystemClock_Config+0xb4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d14:	2302      	movs	r3, #2
 8003d16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc ff19 	bl	8000b60 <HAL_RCC_OscConfig>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003d34:	f000 f90c 	bl	8003f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d38:	230f      	movs	r3, #15
 8003d3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d4e:	f107 0308 	add.w	r3, r7, #8
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd f975 	bl	8001044 <HAL_RCC_ClockConfig>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003d60:	f000 f8f6 	bl	8003f50 <Error_Handler>
  }
}
 8003d64:	bf00      	nop
 8003d66:	3750      	adds	r7, #80	; 0x50
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000

08003d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <MX_GPIO_Init+0x9c>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <MX_GPIO_Init+0x9c>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6313      	str	r3, [r2, #48]	; 0x30
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <MX_GPIO_Init+0x9c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <MX_GPIO_Init+0x9c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a1a      	ldr	r2, [pc, #104]	; (8003e10 <MX_GPIO_Init+0x9c>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <MX_GPIO_Init+0x9c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EBlue_Pin|ERed_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2109      	movs	r1, #9
 8003dbe:	4815      	ldr	r0, [pc, #84]	; (8003e14 <MX_GPIO_Init+0xa0>)
 8003dc0:	f7fc fe9a 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EGreen_GPIO_Port, EGreen_Pin, GPIO_PIN_RESET);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	4813      	ldr	r0, [pc, #76]	; (8003e18 <MX_GPIO_Init+0xa4>)
 8003dca:	f7fc fe95 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EBlue_Pin ERed_Pin */
  GPIO_InitStruct.Pin = EBlue_Pin|ERed_Pin;
 8003dce:	2309      	movs	r3, #9
 8003dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	4619      	mov	r1, r3
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <MX_GPIO_Init+0xa0>)
 8003de6:	f7fc fcdd 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EGreen_Pin */
  GPIO_InitStruct.Pin = EGreen_Pin;
 8003dea:	2308      	movs	r3, #8
 8003dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dee:	2301      	movs	r3, #1
 8003df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EGreen_GPIO_Port, &GPIO_InitStruct);
 8003dfa:	f107 030c 	add.w	r3, r7, #12
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4805      	ldr	r0, [pc, #20]	; (8003e18 <MX_GPIO_Init+0xa4>)
 8003e02:	f7fc fccf 	bl	80007a4 <HAL_GPIO_Init>

}
 8003e06:	bf00      	nop
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40020800 	.word	0x40020800
 8003e18:	40020000 	.word	0x40020000

08003e1c <toggle>:

/* USER CODE BEGIN 4 */
void toggle(GPIO_TypeDef*  GPIOx, uint16_t GPIO_Pin, uint32_t frequency, int duration)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	817b      	strh	r3, [r7, #10]
	TickType_t start = xTaskGetTickCount();
 8003e2c:	f7fe fd98 	bl	8002960 <xTaskGetTickCount>
 8003e30:	6178      	str	r0, [r7, #20]

	do {
		HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8003e32:	897b      	ldrh	r3, [r7, #10]
 8003e34:	4619      	mov	r1, r3
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7fc fe77 	bl	8000b2a <HAL_GPIO_TogglePin>
		HAL_Delay(frequency);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fc fbad 	bl	800059c <HAL_Delay>
	} while((xTaskGetTickCount() - start) <= duration);
 8003e42:	f7fe fd8d 	bl	8002960 <xTaskGetTickCount>
 8003e46:	4602      	mov	r2, r0
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d9ef      	bls.n	8003e32 <toggle+0x16>
}
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <rendezvous_barrier_wait>:


void rendezvous_barrier_wait(){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
	//BaseType_t xHigherPriorityTaskWoken;
	//xHigherPriorityTaskWoken = pdFALSE;

	if( --count == 0) {
 8003e62:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <rendezvous_barrier_wait+0x64>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <rendezvous_barrier_wait+0x64>)
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <rendezvous_barrier_wait+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d119      	bne.n	8003ea8 <rendezvous_barrier_wait+0x4c>
		count = n;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <rendezvous_barrier_wait+0x68>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <rendezvous_barrier_wait+0x64>)
 8003e7a:	6013      	str	r3, [r2, #0]
		for(int p = 1; p < n; p++) {
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	e00c      	b.n	8003e9c <rendezvous_barrier_wait+0x40>
			xSemaphoreGive(barrierSemHandle); //, &xHigherPriorityTaskWoken); FromISR
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <rendezvous_barrier_wait+0x6c>)
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f7fd ff82 	bl	8001d94 <xQueueGenericSend>
			osDelay(10);
 8003e90:	200a      	movs	r0, #10
 8003e92:	f7fd fdb8 	bl	8001a06 <osDelay>
		for(int p = 1; p < n; p++) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <rendezvous_barrier_wait+0x68>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	dbed      	blt.n	8003e82 <rendezvous_barrier_wait+0x26>
		}
	} else{
		xSemaphoreTake(barrierSemHandle, portMAX_DELAY);
	}
}
 8003ea6:	e006      	b.n	8003eb6 <rendezvous_barrier_wait+0x5a>
		xSemaphoreTake(barrierSemHandle, portMAX_DELAY);
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <rendezvous_barrier_wait+0x6c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe f871 	bl	8001f98 <xQueueSemaphoreTake>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20003fcc 	.word	0x20003fcc
 8003ec4:	20003fc8 	.word	0x20003fc8
 8003ec8:	20003fe0 	.word	0x20003fe0

08003ecc <StartToggleRed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartToggleRed */
void StartToggleRed(void const * argument)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		toggle(ERed_GPIO_Port, ERed_Pin, (uint32_t) 100, 6000);
 8003ed4:	f241 7370 	movw	r3, #6000	; 0x1770
 8003ed8:	2264      	movs	r2, #100	; 0x64
 8003eda:	2108      	movs	r1, #8
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <StartToggleRed+0x1c>)
 8003ede:	f7ff ff9d 	bl	8003e1c <toggle>
		rendezvous_barrier_wait();
 8003ee2:	f7ff ffbb 	bl	8003e5c <rendezvous_barrier_wait>
		toggle(ERed_GPIO_Port, ERed_Pin, (uint32_t) 100, 6000);
 8003ee6:	e7f5      	b.n	8003ed4 <StartToggleRed+0x8>
 8003ee8:	40020800 	.word	0x40020800

08003eec <StartToggleBlue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartToggleBlue */
void StartToggleBlue(void const * argument)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		toggle(EBlue_GPIO_Port, EBlue_Pin, (uint32_t) 100, 3000);
 8003ef4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003ef8:	2264      	movs	r2, #100	; 0x64
 8003efa:	2101      	movs	r1, #1
 8003efc:	4802      	ldr	r0, [pc, #8]	; (8003f08 <StartToggleBlue+0x1c>)
 8003efe:	f7ff ff8d 	bl	8003e1c <toggle>
		rendezvous_barrier_wait();
 8003f02:	f7ff ffab 	bl	8003e5c <rendezvous_barrier_wait>
		toggle(EBlue_GPIO_Port, EBlue_Pin, (uint32_t) 100, 3000);
 8003f06:	e7f5      	b.n	8003ef4 <StartToggleBlue+0x8>
 8003f08:	40020800 	.word	0x40020800

08003f0c <StartToggleGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartToggleGreen */
void StartToggleGreen(void const * argument)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		toggle(EGreen_GPIO_Port, EGreen_Pin, (uint32_t) 100, 1000);
 8003f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f18:	2264      	movs	r2, #100	; 0x64
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <StartToggleGreen+0x1c>)
 8003f1e:	f7ff ff7d 	bl	8003e1c <toggle>
		rendezvous_barrier_wait();
 8003f22:	f7ff ff9b 	bl	8003e5c <rendezvous_barrier_wait>
		toggle(EGreen_GPIO_Port, EGreen_Pin, (uint32_t) 100, 1000);
 8003f26:	e7f5      	b.n	8003f14 <StartToggleGreen+0x8>
 8003f28:	40020000 	.word	0x40020000

08003f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f3e:	f7fc fb0d 	bl	800055c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40010000 	.word	0x40010000

08003f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_MspInit+0x4c>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a10      	ldr	r2, [pc, #64]	; (8003fac <HAL_MspInit+0x4c>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <HAL_MspInit+0x4c>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_MspInit+0x4c>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <HAL_MspInit+0x4c>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_MspInit+0x4c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	210f      	movs	r1, #15
 8003f9a:	f06f 0001 	mvn.w	r0, #1
 8003f9e:	f7fc fbd7 	bl	8000750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800

08003fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08c      	sub	sp, #48	; 0x30
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	2019      	movs	r0, #25
 8003fc6:	f7fc fbc3 	bl	8000750 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fca:	2019      	movs	r0, #25
 8003fcc:	f7fc fbdc 	bl	8000788 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_InitTick+0x9c>)
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <HAL_InitTick+0x9c>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6453      	str	r3, [r2, #68]	; 0x44
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_InitTick+0x9c>)
 8003fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fe8:	f107 0210 	add.w	r2, r7, #16
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fa04 	bl	8001400 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ff8:	f7fd f9ee 	bl	80013d8 <HAL_RCC_GetPCLK2Freq>
 8003ffc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_InitTick+0xa0>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0c9b      	lsrs	r3, r3, #18
 8004008:	3b01      	subs	r3, #1
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_InitTick+0xa4>)
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_InitTick+0xa8>)
 8004010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_InitTick+0xa4>)
 8004014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004018:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_InitTick+0xa4>)
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_InitTick+0xa4>)
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_InitTick+0xa4>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800402c:	4809      	ldr	r0, [pc, #36]	; (8004054 <HAL_InitTick+0xa4>)
 800402e:	f7fd fa19 	bl	8001464 <HAL_TIM_Base_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004038:	4806      	ldr	r0, [pc, #24]	; (8004054 <HAL_InitTick+0xa4>)
 800403a:	f7fd fa49 	bl	80014d0 <HAL_TIM_Base_Start_IT>
 800403e:	4603      	mov	r3, r0
 8004040:	e000      	b.n	8004044 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	3730      	adds	r7, #48	; 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	431bde83 	.word	0x431bde83
 8004054:	20003fe4 	.word	0x20003fe4
 8004058:	40010000 	.word	0x40010000

0800405c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800406e:	e7fe      	b.n	800406e <HardFault_Handler+0x4>

08004070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004074:	e7fe      	b.n	8004074 <MemManage_Handler+0x4>

08004076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800407a:	e7fe      	b.n	800407a <BusFault_Handler+0x4>

0800407c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004080:	e7fe      	b.n	8004080 <UsageFault_Handler+0x4>

08004082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004096:	f7fd fa45 	bl	8001524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20003fe4 	.word	0x20003fe4

080040a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <SystemInit+0x5c>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	4a14      	ldr	r2, [pc, #80]	; (8004100 <SystemInit+0x5c>)
 80040b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <SystemInit+0x60>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a11      	ldr	r2, [pc, #68]	; (8004104 <SystemInit+0x60>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <SystemInit+0x60>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <SystemInit+0x60>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	490d      	ldr	r1, [pc, #52]	; (8004104 <SystemInit+0x60>)
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <SystemInit+0x64>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <SystemInit+0x60>)
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <SystemInit+0x68>)
 80040da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040dc:	4b09      	ldr	r3, [pc, #36]	; (8004104 <SystemInit+0x60>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a08      	ldr	r2, [pc, #32]	; (8004104 <SystemInit+0x60>)
 80040e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <SystemInit+0x60>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <SystemInit+0x5c>)
 80040f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040f4:	609a      	str	r2, [r3, #8]
#endif
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00
 8004104:	40023800 	.word	0x40023800
 8004108:	fef6ffff 	.word	0xfef6ffff
 800410c:	24003010 	.word	0x24003010

08004110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004116:	e003      	b.n	8004120 <LoopCopyDataInit>

08004118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800411a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800411c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800411e:	3104      	adds	r1, #4

08004120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004120:	480b      	ldr	r0, [pc, #44]	; (8004150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004128:	d3f6      	bcc.n	8004118 <CopyDataInit>
  ldr  r2, =_sbss
 800412a:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800412c:	e002      	b.n	8004134 <LoopFillZerobss>

0800412e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800412e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004130:	f842 3b04 	str.w	r3, [r2], #4

08004134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004138:	d3f9      	bcc.n	800412e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800413a:	f7ff ffb3 	bl	80040a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413e:	f000 f811 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004142:	f7ff fd4b 	bl	8003bdc <main>
  bx  lr    
 8004146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004148:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800414c:	08004294 	.word	0x08004294
  ldr  r0, =_sdata
 8004150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004154:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004158:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800415c:	20004024 	.word	0x20004024

08004160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004160:	e7fe      	b.n	8004160 <ADC_IRQHandler>
	...

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4e0d      	ldr	r6, [pc, #52]	; (800419c <__libc_init_array+0x38>)
 8004168:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416a:	1ba4      	subs	r4, r4, r6
 800416c:	10a4      	asrs	r4, r4, #2
 800416e:	2500      	movs	r5, #0
 8004170:	42a5      	cmp	r5, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	4e0b      	ldr	r6, [pc, #44]	; (80041a4 <__libc_init_array+0x40>)
 8004176:	4c0c      	ldr	r4, [pc, #48]	; (80041a8 <__libc_init_array+0x44>)
 8004178:	f000 f82c 	bl	80041d4 <_init>
 800417c:	1ba4      	subs	r4, r4, r6
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	2500      	movs	r5, #0
 8004182:	42a5      	cmp	r5, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800418c:	4798      	blx	r3
 800418e:	3501      	adds	r5, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004196:	4798      	blx	r3
 8004198:	3501      	adds	r5, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	0800428c 	.word	0x0800428c
 80041a0:	0800428c 	.word	0x0800428c
 80041a4:	0800428c 	.word	0x0800428c
 80041a8:	08004290 	.word	0x08004290

080041ac <memcpy>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	1e43      	subs	r3, r0, #1
 80041b0:	440a      	add	r2, r1
 80041b2:	4291      	cmp	r1, r2
 80041b4:	d100      	bne.n	80041b8 <memcpy+0xc>
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c0:	e7f7      	b.n	80041b2 <memcpy+0x6>

080041c2 <memset>:
 80041c2:	4402      	add	r2, r0
 80041c4:	4603      	mov	r3, r0
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d100      	bne.n	80041cc <memset+0xa>
 80041ca:	4770      	bx	lr
 80041cc:	f803 1b01 	strb.w	r1, [r3], #1
 80041d0:	e7f9      	b.n	80041c6 <memset+0x4>
	...

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
